# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import dric_pb2 as dric__pb2
from . import marmot_type_pb2 as marmot__type__pb2


class DrICPlatformStub(object):
    """///////////////////////////////////////////////////////////////
    DrIC Platform request & response protos
    ///////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getServiceEndPoint = channel.unary_unary(
                '/dric.proto.DrICPlatform/getServiceEndPoint',
                request_serializer=marmot__type__pb2.StringProto.SerializeToString,
                response_deserializer=dric__pb2.EndPointResponse.FromString,
                )


class DrICPlatformServicer(object):
    """///////////////////////////////////////////////////////////////
    DrIC Platform request & response protos
    ///////////////////////////////////////////////////////////////

    """

    def getServiceEndPoint(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DrICPlatformServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getServiceEndPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.getServiceEndPoint,
                    request_deserializer=marmot__type__pb2.StringProto.FromString,
                    response_serializer=dric__pb2.EndPointResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dric.proto.DrICPlatform', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DrICPlatform(object):
    """///////////////////////////////////////////////////////////////
    DrIC Platform request & response protos
    ///////////////////////////////////////////////////////////////

    """

    @staticmethod
    def getServiceEndPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dric.proto.DrICPlatform/getServiceEndPoint',
            marmot__type__pb2.StringProto.SerializeToString,
            dric__pb2.EndPointResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class DrICDataStoreStub(object):
    """///////////////////////////////////////////////////////////////
    DrIC DataStore request & response protos
    ///////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class DrICDataStoreServicer(object):
    """///////////////////////////////////////////////////////////////
    DrIC DataStore request & response protos
    ///////////////////////////////////////////////////////////////

    """


def add_DrICDataStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dric.proto.DrICDataStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DrICDataStore(object):
    """///////////////////////////////////////////////////////////////
    DrIC DataStore request & response protos
    ///////////////////////////////////////////////////////////////

    """


class DrICVideoServerStub(object):
    """///////////////////////////////////////////////////////////////
    DrIC VideoServer request & response protos
    ///////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addCamera = channel.unary_unary(
                '/dric.proto.DrICVideoServer/addCamera',
                request_serializer=dric__pb2.CameraInfoProto.SerializeToString,
                response_deserializer=marmot__type__pb2.VoidResponse.FromString,
                )
        self.removeCamera = channel.unary_unary(
                '/dric.proto.DrICVideoServer/removeCamera',
                request_serializer=marmot__type__pb2.StringProto.SerializeToString,
                response_deserializer=marmot__type__pb2.VoidResponse.FromString,
                )
        self.getCamera = channel.unary_unary(
                '/dric.proto.DrICVideoServer/getCamera',
                request_serializer=marmot__type__pb2.StringProto.SerializeToString,
                response_deserializer=dric__pb2.CameraInfoResponse.FromString,
                )
        self.getCameraAll = channel.unary_stream(
                '/dric.proto.DrICVideoServer/getCameraAll',
                request_serializer=marmot__type__pb2.VoidProto.SerializeToString,
                response_deserializer=dric__pb2.CameraInfoResponse.FromString,
                )
        self.getCameraFrame = channel.unary_unary(
                '/dric.proto.DrICVideoServer/getCameraFrame',
                request_serializer=dric__pb2.CameraFrameRequest.SerializeToString,
                response_deserializer=dric__pb2.CameraFrameResponse.FromString,
                )
        self.queryCameraFrames = channel.unary_stream(
                '/dric.proto.DrICVideoServer/queryCameraFrames',
                request_serializer=dric__pb2.CameraFrameRangeRequest.SerializeToString,
                response_deserializer=dric__pb2.CameraFrameResponse.FromString,
                )


class DrICVideoServerServicer(object):
    """///////////////////////////////////////////////////////////////
    DrIC VideoServer request & response protos
    ///////////////////////////////////////////////////////////////

    """

    def addCamera(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeCamera(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCamera(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCameraAll(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCameraFrame(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryCameraFrames(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DrICVideoServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.addCamera,
                    request_deserializer=dric__pb2.CameraInfoProto.FromString,
                    response_serializer=marmot__type__pb2.VoidResponse.SerializeToString,
            ),
            'removeCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.removeCamera,
                    request_deserializer=marmot__type__pb2.StringProto.FromString,
                    response_serializer=marmot__type__pb2.VoidResponse.SerializeToString,
            ),
            'getCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.getCamera,
                    request_deserializer=marmot__type__pb2.StringProto.FromString,
                    response_serializer=dric__pb2.CameraInfoResponse.SerializeToString,
            ),
            'getCameraAll': grpc.unary_stream_rpc_method_handler(
                    servicer.getCameraAll,
                    request_deserializer=marmot__type__pb2.VoidProto.FromString,
                    response_serializer=dric__pb2.CameraInfoResponse.SerializeToString,
            ),
            'getCameraFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.getCameraFrame,
                    request_deserializer=dric__pb2.CameraFrameRequest.FromString,
                    response_serializer=dric__pb2.CameraFrameResponse.SerializeToString,
            ),
            'queryCameraFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.queryCameraFrames,
                    request_deserializer=dric__pb2.CameraFrameRangeRequest.FromString,
                    response_serializer=dric__pb2.CameraFrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dric.proto.DrICVideoServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DrICVideoServer(object):
    """///////////////////////////////////////////////////////////////
    DrIC VideoServer request & response protos
    ///////////////////////////////////////////////////////////////

    """

    @staticmethod
    def addCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dric.proto.DrICVideoServer/addCamera',
            dric__pb2.CameraInfoProto.SerializeToString,
            marmot__type__pb2.VoidResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dric.proto.DrICVideoServer/removeCamera',
            marmot__type__pb2.StringProto.SerializeToString,
            marmot__type__pb2.VoidResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dric.proto.DrICVideoServer/getCamera',
            marmot__type__pb2.StringProto.SerializeToString,
            dric__pb2.CameraInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCameraAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dric.proto.DrICVideoServer/getCameraAll',
            marmot__type__pb2.VoidProto.SerializeToString,
            dric__pb2.CameraInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCameraFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dric.proto.DrICVideoServer/getCameraFrame',
            dric__pb2.CameraFrameRequest.SerializeToString,
            dric__pb2.CameraFrameResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryCameraFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dric.proto.DrICVideoServer/queryCameraFrames',
            dric__pb2.CameraFrameRangeRequest.SerializeToString,
            dric__pb2.CameraFrameResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
