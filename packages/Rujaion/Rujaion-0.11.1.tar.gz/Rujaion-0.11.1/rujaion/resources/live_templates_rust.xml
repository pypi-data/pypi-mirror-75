<templateSet group="Rust">
  <template name="for" value="for $iter$ in 0..$LAST$ { $END$ }" description="for loop" toReformat="false" toShortenFQNames="true">
    <variable name="iter" expression="" defaultValue="i" alwaysStopAt="true" />
    <variable name="LAST" expression="" defaultValue="n" alwaysStopAt="true" />
  </template>
  <template name="forrev" value="for $iter$ in (0..$LAST$).rev() { $END$ }" description="for loop" toReformat="false" toShortenFQNames="true">
    <variable name="iter" expression="" defaultValue="i" alwaysStopAt="true" />
    <variable name="LAST" expression="" defaultValue="n" alwaysStopAt="true" />
  </template>
  <template name="let mut" value="let mut " description="let mut;" toReformat="false" toShortenFQNames="true" />
  <template name="let (n, k)" value="let (n, k$END$) = (v[0], v[1]);" description="bind" toReformat="false" toShortenFQNames="true" />
  <template name="collect" value="collect::&lt;Vec&lt;_&gt;&gt;();" description="collect vector" toReformat="false" toShortenFQNames="true"/>
  <template name="cond" value="let a$END$ = if { } else { };" description="conditional operator" toReformat="false" toShortenFQNames="true" />
  <template name="map" value="map(|&amp;x| x$END$)" description="map iterator" toReformat="false" toShortenFQNames="true" />
  <template name="filter" value="filter(|&amp;&amp;x| x$END$)" description="filter iterator" toReformat="false" toShortenFQNames="true" />
  <template name="unwrap" value="unwrap()" description="filter iterator" toReformat="false" toShortenFQNames="true" />
  <template name="let vv" value="let mut dp = vec![vec![; ]; ];" description="2d vec" toReformat="false" toShortenFQNames="true" />
  <template name="let vvv" value="let mut dp = vec![vec![vec![; ]; ];];" description="2d vec" toReformat="false" toShortenFQNames="true" />
  <template name="chars" value="chars().collect::&lt;Vec&lt;_&gt;&gt;();" description="collect chars" toReformat="false" toShortenFQNames="true"/>
  <template name="turbo" value="::&lt;&gt;" description="collect chars" toReformat="false" toShortenFQNames="true"/>
  <template name="print" value="println!(&quot;{}&quot;, $VAR$$END$);" description="p" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="ans" alwaysStopAt="true" />
  </template>
  <template name="print-1" value="println!(&quot;-1$END$&quot;);return;" description="p" toReformat="false" toShortenFQNames="true" />
  <template name="yn" value='if true$END$ { println!("Yes"); } else { println!("No"); } ' description="print Yes or No" toReformat="false" toShortenFQNames="true" />
  <template name="YN" value='if true$END$ { println!("YES"); } else { println!("NO"); } ' description="print YES or NO" toReformat="false" toShortenFQNames="true" />
  <template name="match" value='match x$END$ { _ => , }' description="print YES or NO" toReformat="false" toShortenFQNames="true" />
  <template name="return" value="return" description="return" toReformat="false" toShortenFQNames="true" />
  <template name="continue;" value="continue;" description="continue;" toReformat="false" toShortenFQNames="true" />
  <template name="swap" value="std::mem::swap(&amp;mut a, &amp;mut b);" description="swap" toReformat="false" toShortenFQNames="true" />
  <template name="vec" value="vec![$END$];" description="vec" toReformat="false" toShortenFQNames="true" />
  <template name="entry_or_insert" value="entry(k$END$).or_insert(0) += 1;" description="map iterator" toReformat="false" toShortenFQNames="true" />
</templateSet>
