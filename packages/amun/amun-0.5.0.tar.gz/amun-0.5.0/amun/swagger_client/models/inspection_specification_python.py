# coding: utf-8

"""
    Amun API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from amun.swagger_client.configuration import Configuration


class InspectionSpecificationPython(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requirements': 'dict(str, object)',
        'requirements_locked': 'dict(str, object)'
    }

    attribute_map = {
        'requirements': 'requirements',
        'requirements_locked': 'requirements_locked'
    }

    def __init__(self, requirements=None, requirements_locked=None, local_vars_configuration=None):  # noqa: E501
        """InspectionSpecificationPython - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._requirements = None
        self._requirements_locked = None
        self.discriminator = None

        self.requirements = requirements
        self.requirements_locked = requirements_locked

    @property
    def requirements(self):
        """Gets the requirements of this InspectionSpecificationPython.  # noqa: E501

        Pipfile stating software stack (direct dependencies) of an application.  # noqa: E501

        :return: The requirements of this InspectionSpecificationPython.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this InspectionSpecificationPython.

        Pipfile stating software stack (direct dependencies) of an application.  # noqa: E501

        :param requirements: The requirements of this InspectionSpecificationPython.  # noqa: E501
        :type: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and requirements is None:  # noqa: E501
            raise ValueError("Invalid value for `requirements`, must not be `None`")  # noqa: E501

        self._requirements = requirements

    @property
    def requirements_locked(self):
        """Gets the requirements_locked of this InspectionSpecificationPython.  # noqa: E501

        Pipfile.lock with fully pinned down and resolved software stack.  # noqa: E501

        :return: The requirements_locked of this InspectionSpecificationPython.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._requirements_locked

    @requirements_locked.setter
    def requirements_locked(self, requirements_locked):
        """Sets the requirements_locked of this InspectionSpecificationPython.

        Pipfile.lock with fully pinned down and resolved software stack.  # noqa: E501

        :param requirements_locked: The requirements_locked of this InspectionSpecificationPython.  # noqa: E501
        :type: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and requirements_locked is None:  # noqa: E501
            raise ValueError("Invalid value for `requirements_locked`, must not be `None`")  # noqa: E501

        self._requirements_locked = requirements_locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionSpecificationPython):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InspectionSpecificationPython):
            return True

        return self.to_dict() != other.to_dict()
