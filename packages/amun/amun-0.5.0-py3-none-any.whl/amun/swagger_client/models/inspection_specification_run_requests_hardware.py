# coding: utf-8

"""
    Amun API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from amun.swagger_client.configuration import Configuration


class InspectionSpecificationRunRequestsHardware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_family': 'int',
        'cpu_model': 'int',
        'physical_cpus': 'int',
        'processor': 'str'
    }

    attribute_map = {
        'cpu_family': 'cpu_family',
        'cpu_model': 'cpu_model',
        'physical_cpus': 'physical_cpus',
        'processor': 'processor'
    }

    def __init__(self, cpu_family=None, cpu_model=None, physical_cpus=None, processor=None, local_vars_configuration=None):  # noqa: E501
        """InspectionSpecificationRunRequestsHardware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_family = None
        self._cpu_model = None
        self._physical_cpus = None
        self._processor = None
        self.discriminator = None

        self.cpu_family = cpu_family
        self.cpu_model = cpu_model
        if physical_cpus is not None:
            self.physical_cpus = physical_cpus
        self.processor = processor

    @property
    def cpu_family(self):
        """Gets the cpu_family of this InspectionSpecificationRunRequestsHardware.  # noqa: E501

        CPU family number from CPU proc info.  # noqa: E501

        :return: The cpu_family of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :rtype: int
        """
        return self._cpu_family

    @cpu_family.setter
    def cpu_family(self, cpu_family):
        """Sets the cpu_family of this InspectionSpecificationRunRequestsHardware.

        CPU family number from CPU proc info.  # noqa: E501

        :param cpu_family: The cpu_family of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and cpu_family is None:  # noqa: E501
            raise ValueError("Invalid value for `cpu_family`, must not be `None`")  # noqa: E501

        self._cpu_family = cpu_family

    @property
    def cpu_model(self):
        """Gets the cpu_model of this InspectionSpecificationRunRequestsHardware.  # noqa: E501

        Model number of CPU from CPU proc info.  # noqa: E501

        :return: The cpu_model of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :rtype: int
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this InspectionSpecificationRunRequestsHardware.

        Model number of CPU from CPU proc info.  # noqa: E501

        :param cpu_model: The cpu_model of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and cpu_model is None:  # noqa: E501
            raise ValueError("Invalid value for `cpu_model`, must not be `None`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def physical_cpus(self):
        """Gets the physical_cpus of this InspectionSpecificationRunRequestsHardware.  # noqa: E501

        Number of physical CPUs.  # noqa: E501

        :return: The physical_cpus of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :rtype: int
        """
        return self._physical_cpus

    @physical_cpus.setter
    def physical_cpus(self, physical_cpus):
        """Sets the physical_cpus of this InspectionSpecificationRunRequestsHardware.

        Number of physical CPUs.  # noqa: E501

        :param physical_cpus: The physical_cpus of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :type: int
        """

        self._physical_cpus = physical_cpus

    @property
    def processor(self):
        """Gets the processor of this InspectionSpecificationRunRequestsHardware.  # noqa: E501

        Name of the CPU model name of CPU proc info.  # noqa: E501

        :return: The processor of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :rtype: str
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this InspectionSpecificationRunRequestsHardware.

        Name of the CPU model name of CPU proc info.  # noqa: E501

        :param processor: The processor of this InspectionSpecificationRunRequestsHardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and processor is None:  # noqa: E501
            raise ValueError("Invalid value for `processor`, must not be `None`")  # noqa: E501

        self._processor = processor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionSpecificationRunRequestsHardware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InspectionSpecificationRunRequestsHardware):
            return True

        return self.to_dict() != other.to_dict()
