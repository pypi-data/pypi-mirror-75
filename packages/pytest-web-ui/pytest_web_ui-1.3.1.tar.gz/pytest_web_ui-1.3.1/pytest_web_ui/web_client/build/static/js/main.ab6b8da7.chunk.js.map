{"version":3,"sources":["NavColumn.tsx","Common.ts","CentrePane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavColumn","props","_","isEmpty","childBranches","childLeaves","className","css","styles","navColumn","ListGroup","selection","handleTestRun","handleEnvToggle","selectedLeafID","NavBranchEntries","childBranchIDs","Object","keys","map","short_id","childNode","console","log","linkAddr","concat","encodeURIComponent","join","ListGroupItem","key","getNavEntryStyle","status","navEntryCommon","navLabel","to","node","BranchEntryButtons","environment_state","nodeid","buttonsContainer","envStatus","NavLeafEntries","childLeafIDs","label","childLeaf","NavEntryIcon","icon","faRedo","inactiveButton","size","spin","faPlay","onClick","e","stopPropagation","runButton","EnvironmentIcon","faToggleOff","faToggleOn","Error","navEntryPassed","navEntryFailed","navEntryDefault","StyleSheet","create","width","height","position","padding","background","fontSize","cursor","color","transition","display","InfoPane","selectedLeaf","title","statusIcon","getStatusIcon","longrepr","message","Message","faCheckCircle","faTimesCircle","NavBreadcrumbs","numSelected","length","Breadcrumb","BreadcrumbItem","faHome","currSelected","restSelected","slice","index","flexDirection","justifyContent","alignItems","textAlign","minHeight","TestRunner","state","resultTree","loading","socket","errorMessage","handleUpdate","bind","io","this","setState","on","getResultTree","axios","get","then","response","data","catch","reason","String","root","updateResultTree","emit","start","parseSelection","url","getCurrSelection","error","SelectionNotFound","React","Component","trimmedPath","replace","split","decodeURIComponent","currRoot","updateData","newRoot","merge","TestRunnerDisplay","useQuery","centrePane","MessageDisplay","URLSearchParams","useLocation","search","selectedBranch","reduce","child_branches","child_leaves","App","path","render","location","pathname","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab6b8da7.chunk.js","sourcesContent":["/**\n * Navigation column component and its subcomponents. Used to control navigation\n * from a current selected branch node down to its child nodes.\n */\nimport React from 'react';\nimport _ from 'lodash';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faRedo, faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nimport { LIGHT_GREY, MEDIUM_GREY, COLWIDTH, BranchNode, LeafNode } from \"./Common\";\n\ninterface NavColumnProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selectedLeafID: string | null,\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * NavColumn component: renders the current navigation selection.\n * @param props Component props\n */\nexport const NavColumn = (props: NavColumnProps) => {\n  if (_.isEmpty(props.childBranches) && _.isEmpty(props.childLeaves)) {\n    return <div className={css(styles.navColumn)} />;\n  }\n\n  return (\n    <div className={css(styles.navColumn)}>\n      <ListGroup>\n        <NavBranchEntries\n          childBranches={props.childBranches}\n          selection={props.selection}\n          handleTestRun={props.handleTestRun}\n          handleEnvToggle={props.handleEnvToggle}\n        />\n        <NavLeafEntries\n          childLeaves={props.childLeaves}\n          handleTestRun={props.handleTestRun}\n          selectedLeafID={props.selectedLeafID}\n        />\n      </ListGroup>\n    </div>\n  );\n};\n\ninterface NavBranchEntriesProps {\n  childBranches: { [key: string]: BranchNode },\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * Render entries in the nav column for branch nodes that are children of the\n * currently selected node.\n * @param props Render props\n */\nconst NavBranchEntries = (props: NavBranchEntriesProps) => {\n  const childBranchIDs = Object.keys(props.childBranches);\n  return (\n    <>\n      {\n        childBranchIDs.map(\n          (short_id: string) => {\n            const childNode = props.childBranches[short_id];\n            console.log(props.selection);\n            const linkAddr = \"/\" + props.selection\n              .concat([short_id])\n              .map(encodeURIComponent)\n              .join(\"/\");\n            console.log(linkAddr);\n            console.log(\"updated\");\n\n            return (\n              <ListGroupItem\n                key={short_id}\n                className={\n                  css(\n                    getNavEntryStyle(childNode.status),\n                    styles.navEntryCommon,\n                  )\n                }\n              >\n                <span className={css(styles.navLabel)}>\n                  <Link\n                    to={linkAddr}\n                  >\n                    {short_id}\n                  </Link>\n                </span>\n                <BranchEntryButtons\n                  node={childNode}\n                  handleTestRun={props.handleTestRun}\n                  handleEnvToggle={props.handleEnvToggle}\n                />\n              </ListGroupItem>\n            );\n          }\n        )\n      }\n    </>\n  );\n};\n\ninterface BranchEntryButtonsProps {\n  node: BranchNode,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst BranchEntryButtons: React.FunctionComponent<BranchEntryButtonsProps> = props => {\n  if (props.node.environment_state === \"inactive\") {\n    return (\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    );\n  }\n\n  return (\n    <span className={css(styles.buttonsContainer, styles.navEntryCommon)}>\n      <EnvironmentIcon\n        envStatus={props.node.environment_state}\n        handleEnvToggle={props.handleEnvToggle}\n        nodeid={props.node.nodeid}\n      />\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    </span>\n  );\n};\n\ninterface NavLeafEntriesProps {\n  childLeaves: { [key: string]: LeafNode },\n  selectedLeafID: string | null,\n  handleTestRun: (nodeid: string) => void,\n}\n\n/**\n * Render entries in the navigation column for child leaves of the currently\n * selected node.\n * @param props Render props\n */\nconst NavLeafEntries = (props: NavLeafEntriesProps) => {\n  const childLeafIDs = Object.keys(props.childLeaves);\n\n  return (\n    <>\n      {\n        childLeafIDs.map(\n          (short_id: string) => {\n            const label = (short_id === props.selectedLeafID) ?\n              short_id :\n              (\n                <Link\n                  to={`?selectedLeaf=${encodeURIComponent(short_id)}`}\n                >\n                  {short_id}\n                </Link>\n              );\n            const childLeaf = props.childLeaves[short_id];\n\n            return (\n              <ListGroupItem\n                key={short_id}\n                className={\n                  css(\n                    getNavEntryStyle(\n                      props.childLeaves[short_id].status\n                    ),\n                    styles.navEntryCommon,\n                  )\n                }\n              >\n                <span className={css(styles.navLabel)}>{label}</span>\n                <NavEntryIcon\n                  nodeid={childLeaf.nodeid}\n                  status={childLeaf.status}\n                  handleTestRun={props.handleTestRun}\n                />\n              </ListGroupItem>\n            );\n          }\n        )\n      }\n    </>\n  );\n};\n\ninterface NavEntryIconProps {\n  nodeid: string,\n  status: string,\n  handleTestRun: (nodeid: string) => void,\n}\n\nconst NavEntryIcon = (props: NavEntryIconProps) => {\n  switch (props.status) {\n    case \"running\":\n      return (\n        <FontAwesomeIcon\n          icon={faRedo}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n          spin\n        />\n      );\n\n    default:\n      return (\n        <FontAwesomeIcon\n          icon={faPlay}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleTestRun(props.nodeid);\n          }}\n          className={css(styles.runButton)}\n          size=\"lg\"\n        />\n      );\n  }\n};\n\ninterface EnvironmentIconProps {\n  envStatus: string,\n  nodeid: string,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst EnvironmentIcon: React.FunctionComponent<EnvironmentIconProps> = (props)=> {\n  switch (props.envStatus) {\n    case \"stopped\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOff}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, true);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"started\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, false);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"stopping\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n        />\n      );\n\n    default:\n      throw new Error(\"unexpected environment status \" + props.envStatus);\n  }\n};\n\n/**\n *\n * @param status\n */\nconst getNavEntryStyle = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return styles.navEntryPassed;\n\n    case \"failed\":\n      return styles.navEntryFailed;\n\n    default:\n      return styles.navEntryDefault;\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonsContainer: {\n    width: \"3em\"\n  },\n  navColumn: {\n    height: \"100%\",\n    width: COLWIDTH,\n    position: \"fixed\",\n    \"z-index\": 1,\n    \"top\": 0,\n    \"left\": 0,\n    \"overflow-x\": \"hidden\",\n    padding: \"1px\",\n    background: LIGHT_GREY,\n  },\n  navLabel: {\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    fontSize: \"small\",\n    \"max-width\": \"80%\",\n  },\n  runButton: {\n    cursor: 'pointer',\n    color: 'black',\n    'padding-left': '3px',\n    'padding-right': '3px',\n    transition: 'color 0.3s ease-out 0s',\n    ':hover': {\n      color: LIGHT_GREY,\n    }\n  },\n  inactiveButton: {\n    color: LIGHT_GREY,\n    'padding-left': '3px',\n    'padding-right': '3px',\n  },\n  navEntryPassed: { background: \"#c0ffbf\" },\n  navEntryFailed: { background: \"#ff7a7a\" },\n  navEntryDefault: { background: MEDIUM_GREY },\n  navEntryCommon: {\n    display: \"flex\",\n    \"justify-content\": \"space-between\",\n    \"align-items\": \"center\",\n  }\n});\n","/**\n * Global constants and type declarations.\n *\n * Commented out until used.\n */\n\n//const GREEN = '#228F1D';\n//const RED = '#A2000C';\n//const ORANGE = '#FFA500';\nexport const LIGHT_GREY = '#F3F3F3';\nexport const MEDIUM_GREY = '#D0D0D0';\n//const DARK_GREY = '#ADADAD';\n//const BLACK = '#404040';\n\nexport const COLWIDTH = \"25em\";\n\nexport interface BranchNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  child_branches: { [key: string]: BranchNode },\n  child_leaves: { [key: string]: LeafNode },\n  environment_state: string,\n}\n\nexport interface LeafNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  longrepr: string,\n}\n","/**\n * Contains InfoPane and NavBreadcrumbs components which make up the main\n * centre display pane.\n */\n\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faHome,\n  faCheckCircle,\n  faTimesCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\n\nimport { LeafNode, MEDIUM_GREY } from \"./Common\";\nimport { css, StyleSheet } from 'aphrodite';\n\ninterface InfoPaneProps {\n  selectedLeaf: LeafNode | null,\n}\n\n/**\n * InfoPane component: renders information on the currently selected testcase\n * (if any)\n * @param props Component props\n */\nexport const InfoPane = (props: InfoPaneProps) => {\n  if (!props.selectedLeaf) {\n    return <Message message=\"Please select a test.\" />;\n  }\n\n  return (\n    <>\n      <div>\n        <span className={css(styles.title)}>{props.selectedLeaf.nodeid}</span>\n        <span className={css(styles.statusIcon)}>\n          {getStatusIcon(props.selectedLeaf.status)}\n        </span>\n      </div>\n      <pre className={css(styles.longrepr)}>{props.selectedLeaf.longrepr}</pre>\n    </>\n  )\n}\n\ninterface MessageProps { message: string }\n\nexport const Message = (props: MessageProps) => (\n  <h1 className={css(styles.message)}>{props.message}</h1>\n);\n\n/**\n * Return an icon for the given test node status.\n * @param status Node status\n */\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return (\n        <FontAwesomeIcon icon={faCheckCircle} color=\"green\" size=\"4x\" />\n      );\n\n    case \"failed\":\n      return (\n        <FontAwesomeIcon icon={faTimesCircle} color=\"red\" size=\"4x\" />\n      );\n\n    default:\n      return null;\n  }\n};\n\ninterface NavBreadcrumbsProps {\n  selection: Array<string>\n}\n\n/**\n* Navigation breadcrumb menu, used to show the current position in the test\n* tree and to navigate back up to any parent branch node.\n* @param props Render props\n*/\nexport const NavBreadcrumbs = (props: NavBreadcrumbsProps) => {\n  const numSelected = props.selection.length;\n\n  if (!numSelected) {\n    return (\n      <Breadcrumb>\n        <BreadcrumbItem key=\"home\">\n          <FontAwesomeIcon icon={faHome} />\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n  }\n\n  const currSelected = props.selection[numSelected - 1];\n  const restSelected = props.selection.slice(0, numSelected - 1);\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to=\"/\">\n          <FontAwesomeIcon icon={faHome} />\n        </Link>\n      </BreadcrumbItem>\n      {\n        restSelected.map(\n          (short_id: string, index: number) => (\n            <BreadcrumbItem key={short_id}>\n              <Link\n                to={\n                  \"/\" +\n                  props.selection\n                    .slice(0, index + 1)\n                    .map(encodeURIComponent)\n                    .join(\"/\")\n                }\n              >\n                {short_id}\n              </Link>\n            </BreadcrumbItem>\n          )\n        )\n      }\n      <BreadcrumbItem>{currSelected}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n};\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: \"large\",\n    \"font-weight\": \"bold\",\n    //\"width\": \"80%\",\n    //display: \"inline-block\",\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    \"padding\": \"10px\",\n  },\n  statusIcon: {\n    \"float\": \"right\"\n  },\n  longrepr: {\n    \"padding\": \"10px\",\n  },\n  message: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    minHeight: '80vh',\n    color: MEDIUM_GREY,\n  }\n});","import React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport {\n  HashRouter as Router,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport _ from \"lodash\";\n\nimport { COLWIDTH, BranchNode, LeafNode } from \"./Common\";\nimport { NavColumn } from \"./NavColumn\";\nimport { NavBreadcrumbs, InfoPane, Message } from \"./CentrePane\";\n\n/**\n * Top level App component.\n */\nconst App = () => {\n  return (\n    <Router>\n      <Route path=\"/\"\n        render={\n          ({ location }) => {\n            return <TestRunner url={location.pathname} />;\n          }\n        }\n      />\n    </Router>\n  );\n};\n\ninterface TestRunnerProps {\n  url: string | null,\n}\n\ninterface TestRunnerState {\n  resultTree: BranchNode | null,\n  loading: boolean,\n  socket: SocketIOClient.Socket | null,\n  errorMessage: string | null,\n}\n\nclass TestRunner extends React.Component<TestRunnerProps, TestRunnerState> {\n  constructor(props: TestRunnerProps) {\n    super(props);\n    this.state = {\n      resultTree: null,\n      loading: false,\n      socket: null,\n      errorMessage: null,\n    }\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleTestRun = this.handleTestRun.bind(this);\n    this.handleEnvToggle = this.handleEnvToggle.bind(this);\n  }\n\n  /**\n   * When the component mounts, we initiate the websocket connection and\n   * make an API call to get the result tree.\n   */\n  componentDidMount() {\n    const socket = io();\n    this.setState({ loading: true, socket: socket }, () => {\n      socket.on('update', this.handleUpdate);\n      this.getResultTree();\n    });\n  }\n\n  /**\n   * Make an API call to get the result tree data. Called at start of day when\n   * this component mounts, then further updates are handled by the websocket\n   * connection.\n   */\n  getResultTree() {\n    axios.get(\"/api/v1/result-tree\").then(response => {\n      this.setState({ resultTree: response.data, loading: false });\n    }).catch((reason: any) => {\n      this.setState({ loading: false, errorMessage: String(reason) });\n    });\n  }\n\n  /**\n   * Handle an update event received over a websocket.\n   * @param data Update data received over socket\n   */\n  handleUpdate(data: BranchNode) {\n    console.log(\"Handling websocket update\");\n    console.log(data);\n\n    const root = this.state.resultTree;\n    if (!root) {\n      return;\n    }\n\n    this.setState((state) => {\n      const newTree = updateResultTree(root, data);\n      return { resultTree: newTree };\n    });\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleTestRun(nodeid: string) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    this.state.socket.emit(\"run test\", nodeid);\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleEnvToggle(nodeid: string, start: boolean) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    if (start) {\n      this.state.socket.emit(\"start env\", nodeid);\n    } else {\n      this.state.socket.emit(\"stop env\", nodeid);\n    }\n  }\n\n  /**\n   * Render the test runner UI. Currently this component acts as the stateful\n   * store and hands off rendering logic to a separate stateless component.\n   */\n  render() {\n    const selection = parseSelection(this.props.url);\n\n    if (this.state.loading) {\n      return <MessageDisplay message=\"Loading...\" selection={selection} />;\n    }\n\n    if (this.state.errorMessage) {\n      return (\n        <MessageDisplay\n          message={this.state.errorMessage}\n          selection={selection}\n        />\n      );\n    }\n\n    try {\n      const { childBranches, childLeaves } = getCurrSelection(\n        selection,\n        this.state.resultTree,\n      );\n\n      return (\n        <TestRunnerDisplay\n          childBranches={childBranches}\n          childLeaves={childLeaves}\n          selection={selection}\n          handleTestRun={this.handleTestRun}\n          handleEnvToggle={this.handleEnvToggle}\n        />\n      );\n    } catch (error) {\n      if (error instanceof SelectionNotFound) {\n        return <MessageDisplay message=\"404 Page Not Found\" selection={selection} />;\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Parse the current URL path (excluding query parameters) and return the\n * short_ids of the currently selected branches.\n * @param url URL path string\n */\nconst parseSelection = (url: string | null): Array<string> => {\n  if (!url) {\n    return [];\n  }\n\n  const trimmedPath = url.replace(/^\\/+|\\/+$/g, '');\n  if (trimmedPath.length === 0) {\n    return [];\n  }\n  const pathElements = trimmedPath.split(\"/\");\n  return pathElements.map(decodeURIComponent);\n};\n\n/**\n * Update a particular node in the result tree with new data.\n * @param currNode Existing in result tree to update\n * @param updateData Update data for new node\n */\nconst updateResultTree = (\n  currRoot: BranchNode, updateData: BranchNode\n): BranchNode => {\n  const newRoot = { ...currRoot };\n  _.merge(newRoot, updateData);\n  return newRoot;\n};\n\ninterface TestRunnerDisplayProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selection: Array<string>,\n  handleTestRun: (short_id: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * Render the navigation column, top breadcrumb menu and the central information\n * pane together.\n * @param props render properties\n */\nconst TestRunnerDisplay = (props: TestRunnerDisplayProps) => {\n  const query = useQuery();\n  const selectedLeafID = query.get(\"selectedLeaf\");\n  const selectedLeaf = selectedLeafID ? props.childLeaves[selectedLeafID] : null;\n\n  return (\n    <div>\n      <NavColumn\n        childBranches={props.childBranches}\n        childLeaves={props.childLeaves}\n        selectedLeafID={selectedLeafID}\n        selection={props.selection}\n        handleTestRun={props.handleTestRun}\n        handleEnvToggle={props.handleEnvToggle}\n      />\n      <div className={css(styles.centrePane)}>\n        <NavBreadcrumbs selection={props.selection} />\n        <InfoPane selectedLeaf={selectedLeaf} />\n      </div>\n    </div>\n  );\n};\n\ninterface MessageDisplayProps {\n  message: string,\n  selection: Array<string>,\n}\n\n/**\n * Display a message.\n */\nconst MessageDisplay = (props: MessageDisplayProps) => (\n  <div>\n    <NavColumn\n      childBranches={{}}\n      childLeaves={{}}\n      selectedLeafID={null}\n      selection={[]}\n      handleTestRun={(nodeid: string) => undefined}\n      handleEnvToggle={(nodeid: string, start: boolean) => undefined}\n    />\n    <div className={css(styles.centrePane)}>\n      <NavBreadcrumbs selection={props.selection} />\n      <Message message={props.message} />\n    </div>\n  </div>\n);\n\n/**\n * Modified react hook to parse the current query parameters in the URL. These\n * are expected in the form \"?x=y\".\n */\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\n/**\n * Get the currently selected branch node, or null if the result tree is not yet\n * loaded.\n * @param state App state\n */\nconst getCurrSelection = (\n  selection: Array<string>, resultTree: BranchNode | null\n): {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n} => {\n  if (!resultTree) {\n    return { childBranches: {}, childLeaves: {} };\n  }\n  if (selection.length === 0) {\n    return {\n      childBranches: { [resultTree.short_id]: resultTree },\n      childLeaves: {},\n    };\n  }\n\n  const selectedBranch = selection.slice(1).reduce(\n    (node: BranchNode | undefined, selection: string) => (\n      node?.child_branches[selection]\n    ),\n    resultTree,\n  );\n  if (selectedBranch) {\n    return {\n      childBranches: selectedBranch.child_branches,\n      childLeaves: selectedBranch.child_leaves\n    };\n  } else {\n    throw new SelectionNotFound(\"Not found\", selection);\n  }\n};\n\nconst styles = StyleSheet.create({\n  centrePane: {\n    \"margin-left\": COLWIDTH,\n    padding: \"10px 10px\",\n  },\n});\n\nclass SelectionNotFound extends Error {\n  public selection: Array<string>\n\n  constructor(message: string, selection: Array<string>) {\n    super(message);\n    this.selection = selection;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}