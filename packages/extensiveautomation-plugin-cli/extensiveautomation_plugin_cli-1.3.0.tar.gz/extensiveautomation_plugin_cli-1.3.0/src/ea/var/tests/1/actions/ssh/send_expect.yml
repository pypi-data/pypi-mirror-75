properties:
  parameters:
   - name: agent
     value: null
   - name: ssh-commands
     value: 
   - name: ssh-hosts
     value: 
   - name: timeout
     value: 20
   - name: timeout-connect
     value: 10
   - name: verbose
     value: true
   - name: debug
     value: false
python: |
    class SshSendExpect(Action):     
      def definition(self, svr):
          self.ADP_SYS = None

          ssh_port = 22
          if "ssh-port" in svr:
              ssh_port = int(svr["ssh-port"])
          
          ssh_agent = None
          ssh_agent_support = False
          if input("agent") is not None:
              ssh_agent_support = True
              ssh_agent = input("agent")

          ssh_password = ""
          if "ssh-password" in svr:
              ssh_password = svr["ssh-password"]

          ssh_private_key = None
          ssh_private_keyfile = None
          if "ssh-password" in svr:
              ssh_password = svr["ssh-password"]
          if "ssh-private-key" in svr:
              ssh_private_key = svr["ssh-private-key"]
          if "ssh-private-keyfile" in svr:
              ssh_private_keyfile = svr["ssh-private-keyfile"]
              
          self.info("> connecting to remote %s:%s" % (svr["ssh-host"],ssh_port))
          self.ADP_SYS = SutAdapters.CLI.SshTerminal(parent=self,
                                                     destIp=svr["ssh-host"],
                                                     destPort=ssh_port,
                                                     login=svr["ssh-login"],
                                                     password=ssh_password,
                                                     agent=ssh_agent,
                                                     agentSupport=ssh_agent_support,
                                                     debug=input('debug'),
                                                     verbose=input('verbose'), 
                                                     privateKey=ssh_private_key,
                                                     privateKeyPath=ssh_private_keyfile)

          if not self.ADP_SYS.doSession(timeout=input('timeout-connect')):
              self.abort("< unable to connect")
          else:
              self.info("< connected to remote")
              
          i = 0
          block = 4
          block_started = False
          
          cmds = input('ssh-commands').splitlines()
          if len(cmds) == 2:
              cmds.append("")
              
          for sys_cmd in cmds:
              if not (i % block):
                  searchScreen = False
                  block_started = True
                  self.warning("%s" % sys_cmd)

              if (i % block) == 1:
                  if not block_started: continue
                  self.ADP_SYS.doClear()
                  self.ADP_SYS.clear_queue()
                  self.ADP_SYS.doText(text=sys_cmd)

              if (i % block) == 2 and len(sys_cmd):
                  if not block_started: continue
                  searchScreen = False
                  screen =  self.ADP_SYS.hasReceivedScreen(timeout=input('timeout'),
                                                           text=TestOperators.RegEx(needle=sys_cmd))
                  not_found = False
                  if screen is None:
                      screen = self.ADP_SYS.last_item_queue()
                      not_found = True
                      
                  if screen is None:
                      self.abort("no screen received during timeout interval")
                  else:

                      screen_content = []
                      for l in screen.get("TERM", "data").splitlines():
                          screen_content.append(l.strip())
                      screen_content = "\n".join(screen_content)
                      
                      for line in screen_content.splitlines():
                          if input("verbose"):
                              self.info(line.strip())
                              
                      if not_found:
                          self.abort("unable to find %s in screen" % sys_cmd)
                      else:
                          Cache().capture(data=screen_content, regexp=sys_cmd)
                          self.info("< %s found in screen" % sys_cmd)

              if (i % block) == 2 and not len(sys_cmd):
                  if not searchScreen:
                      if not block_started: continue
                  block_started = False
                  i += 1
              i += 1

      def cleanup(self, aborted, svr):
          if self.ADP_SYS is not None:
              self.ADP_SYS.doText(text="exit")
              self.ADP_SYS.doClose(timeout=input('timeout-connect'))

                  
    servers = input('ssh-hosts')
    if servers is None: AbortTestSuite(reason="no hosts provided")
    if not isinstance(servers, list): servers = [ input('ssh-hosts') ]
    for svr in servers:
      if "ssh-host" not in svr: AbortTestSuite(reason="ssh-host missing in hosts parameter")
      if "ssh-login" not in svr: AbortTestSuite(reason="ssh-login missing in hosts parameter")
      if "ssh-password" not in svr:
          if "ssh-private-key" not in svr:
              if "ssh-private-keyfile" not in svr:
                  AbortTestSuite(reason="password or private key is missing in hosts parameter")
      SshSendExpect().execute(svr=svr)
