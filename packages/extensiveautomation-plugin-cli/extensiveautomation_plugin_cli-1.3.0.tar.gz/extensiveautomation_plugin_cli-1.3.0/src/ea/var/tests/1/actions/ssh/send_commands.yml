properties:
  parameters:
   - name: agent
     value: null
   - name: ssh-commands
     value: 
   - name: ssh-hosts
     value:  
   - name: timeout
     value: 20
   - name: timeout-connect
     value: 10
   - name: verbose
     value: true
   - name: debug
     value: false
python: |
    class SshSendCommands(Action):                  
      def definition(self, svr):
          ssh_port = 22
          if "ssh-port" in svr:
              ssh_port = int(svr["ssh-port"])
          
          ssh_agent = None
          ssh_agent_support = False
          if input("agent") is not None:
              ssh_agent_support = True
              ssh_agent = input("agent")

          ssh_password = ""
          if "ssh-password" in svr:
              ssh_password = svr["ssh-password"]

          ssh_private_key = None
          ssh_private_keyfile = None
          if "ssh-password" in svr:
              ssh_password = svr["ssh-password"]
          if "ssh-private-key" in svr:
              ssh_private_key = svr["ssh-private-key"]
          if "ssh-private-keyfile" in svr:
              ssh_private_keyfile = svr["ssh-private-keyfile"]
          
          self.info("> connecting to remote %s:%s" % (svr["ssh-host"],ssh_port))
          self.ADP_SYS = SutAdapters.CLI.SshTerminal(parent=self,
                                                     destIp=svr["ssh-host"],
                                                     destPort=ssh_port,
                                                     login=svr["ssh-login"],
                                                     password=ssh_password,
                                                     agent=ssh_agent,
                                                     agentSupport=ssh_agent_support,
                                                     debug=input('debug'),
                                                     verbose=input('verbose'), 
                                                     privateKey=ssh_private_key,
                                                     privateKeyPath=ssh_private_keyfile)

          if not self.ADP_SYS.doSession(timeout=input('timeout-connect')):
              self.abort("< unable to connect")
          else:
              self.info("< connected to remote")
              
          self.ADP_SYS.doClear()
          self.ADP_SYS.clear_queue()
                  
          for sys_cmd in input('ssh-commands').splitlines():
              #self.ADP_SYS.clear_queue()
              self.ADP_SYS.doText(text=sys_cmd)
              screen =  self.ADP_SYS.hasReceivedScreen(timeout=input('timeout'),
                                                       text=TestOperators.RegEx(needle=".*%s.*" % sys_cmd))
                                                           
          screen = self.ADP_SYS.last_item_queue()
          if screen is not None:
              for line in screen.get("TERM", "data").splitlines():
                  if input("verbose"):
                      self.info(line.strip())

      def cleanup(self, aborted, svr):
          if self.ADP_SYS is not None:
              self.ADP_SYS.doText(text="exit")
              self.ADP_SYS.doClose(timeout=input('timeout-connect'))

                  
    servers = input('ssh-hosts')
    if servers is None: AbortTestSuite(reason="no hosts provided")
    if not isinstance(servers, list): servers = [ input('ssh-hosts') ]
    for svr in servers:
      if "ssh-host" not in svr: AbortTestSuite(reason="ssh-host missing in hosts parameter")
      if "ssh-login" not in svr: AbortTestSuite(reason="ssh-login missing in hosts parameter")
      if "ssh-password" not in svr:
          if "ssh-private-key" not in svr:
              if "ssh-private-keyfile" not in svr:
                  AbortTestSuite(reason="password or private key is missing in hosts parameter")
      SshSendCommands().execute(svr=svr)
