# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2020.07.29
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class WebAuthNEnrollmentStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'challenge': 'str'
    }

    attribute_map = {
        'type': 'type',
        'challenge': 'challenge'
    }

    def __init__(self, type=None, challenge=None, local_vars_configuration=None):  # noqa: E501
        """WebAuthNEnrollmentStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._challenge = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if challenge is not None:
            self.challenge = challenge

    @property
    def type(self):
        """Gets the type of this WebAuthNEnrollmentStatus.  # noqa: E501

        This member contains the string \"create\" when creating new credentials, and \"get\" when getting an assertion from an existing credential. The purpose of this member is to prevent certain types of signature confusion attacks.   # noqa: E501

        :return: The type of this WebAuthNEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebAuthNEnrollmentStatus.

        This member contains the string \"create\" when creating new credentials, and \"get\" when getting an assertion from an existing credential. The purpose of this member is to prevent certain types of signature confusion attacks.   # noqa: E501

        :param type: The type of this WebAuthNEnrollmentStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["create", "get"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def challenge(self):
        """Gets the challenge of this WebAuthNEnrollmentStatus.  # noqa: E501

        An opaque string used to challenge a user attempting to login using WebAuthN. The second factor device will return a signed version of this challenge to indicate that the user should be allowed to proceed.   # noqa: E501

        :return: The challenge of this WebAuthNEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this WebAuthNEnrollmentStatus.

        An opaque string used to challenge a user attempting to login using WebAuthN. The second factor device will return a signed version of this challenge to indicate that the user should be allowed to proceed.   # noqa: E501

        :param challenge: The challenge of this WebAuthNEnrollmentStatus.  # noqa: E501
        :type: str
        """

        self._challenge = challenge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebAuthNEnrollmentStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebAuthNEnrollmentStatus):
            return True

        return self.to_dict() != other.to_dict()
