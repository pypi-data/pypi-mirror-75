Metadata-Version: 1.2
Name: flask_jobs
Version: 0.0.1
Summary: An easy job scheduling interface for flask projects.
Home-page: https://github.com/GrantGMiller/flask_jobs
Author: Grant miller
Author-email: grant@grant-miller.com
License: PSF
Project-URL: Source Code, https://github.com/GrantGMiller/flask_jobs
Description: An easy job scheduling interface for flask projects.
        
        Install
        =======
        pip install flask_jobs
        
        
        Schedule a job to run ASAP
        --------------------------
        
        ::
        
            from flask_jobs import AddJob
        
            def Callback(*args, **kwargs):
                print('The Callback function was called with args=', args, ' and kwargs=', kwargs)
        
            newJob = AddJob(
                func=Callback,
                a=(1, 'two', {'three': '4'}),
                k={'key': 'word'},
            )
        
            # The job will be run in a separate thread ASAP.
        
            # You can check the status of your job
            print('newJob['status']=', newJob['status']) # will return 'pending' or 'complete' or 'error'
            >> newJob['status']= complete
        
        Schedule a job to happen once in the future
        -------------------------------------------
        
        ::
        
            from flask_jobs import ScheduleJob
            import datetime
        
            def Callback(*args, **kwargs):
                print('The Callback function was called with args=', args, ' and kwargs=', kwargs)
        
            newJob = ScheduleJob(
                dt=datetime.datetime.utcnow() + datetime.timedelta(seconds=10), # all datetimes are in UTC
                func=Callback,
                a=(1, 'two', {'three': '4'}),
                k={'key': 'word'},
            )
        
            # The job will be run in a separate thread ASAP.
        
            # You can check the status of your job
            print('newJob['status']=', newJob['status']) # will return 'pending' or 'complete' or 'error'
            >> newJob['status']= pending
            # wait 10 seconds
            print('newJob['status']=', newJob['status'])
            >> newJob['status']= complete
        
        Schedule a job to repeat indefinitely
        -------------------------------------
        
        ::
        
            from flask_jobs import RepeatJob
        
            def Callback(*args, **kwargs):
                print('The Callback function was called with args=', args, ' and kwargs=', kwargs)
        
            def CalcNextRepeat():
                # should repeat every 30 seconds
                # this function should return the next datetime that this job should be run
        
                nextDT = datetime.datetime.utcnow().replace(microsecond=0)
                if nextDT.second < 30:
                    nextDT = nextDT.replace(second=30)
                else:
                    nextDT += datetime.timedelta(minutes=1)
                    nextDT = nextDT.replace(second=0)
        
                return nextDT
        
            RepeatJob(
                repeatCallback=CalcNextRepeat,
                func=JobCallback,
                args=('Repeating',),
                kwargs={'key': 'val'}
            )
        
            # All jobs are persistent. Even if you restart your server.
Keywords: flask job scheduler apscheduler celery redis
Platform: UNKNOWN
