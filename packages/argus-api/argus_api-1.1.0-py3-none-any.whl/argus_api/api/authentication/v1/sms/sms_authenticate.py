"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "sms", "authenticate"),
    module=argus_cli_module
)
def authenticate_3(
    userName: str = None,
    domain: str = None,
    mode: str = None,
    passcode: str = None,
    cookie: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
  ) -> dict:
    """Initiate a new user session using SMS authentication (PUBLIC)
    
    :param str userName: Username to authenticate 
    :param str domain: User domain 
    :param str mode: Use PASSWORD for initial request, and SMS to respond with SMS code 
    :param str passcode: Password or SMS code 
    :param str cookie: When responding with SMS code, set the SMS session cookie returned by challenge 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/sms/authenticate".format(
        server_url or settings["api"]["api_url"],
        
    )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send userName if the argument was provided, dont send null values
    if userName is not None:
        body.update({ "userName": userName })
    # Only send domain if the argument was provided, dont send null values
    if domain is not None:
        body.update({ "domain": domain })
    # Only send mode if the argument was provided, dont send null values
    if mode is not None:
        body.update({ "mode": mode })
    # Only send passcode if the argument was provided, dont send null values
    if passcode is not None:
        body.update({ "passcode": passcode })
    # Only send cookie if the argument was provided, dont send null values
    if cookie is not None:
        body.update({ "cookie": cookie })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

