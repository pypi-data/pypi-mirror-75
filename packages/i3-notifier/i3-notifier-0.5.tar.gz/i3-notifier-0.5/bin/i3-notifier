#!/usr/bin/env python3
import importlib.util
import os
import signal
import sys

import dbus.mainloop.glib

import daemon
import daemon.pidfile
from gi.repository import GLib
from i3notifier.data_manager import DataManager
from i3notifier.i3 import I3
from i3notifier.notification_fetcher import NotificationFetcher
from i3notifier.rofi_gui import RofiGUI


def get_user_config():

    config_path = os.path.join(
        os.environ["XDG_CONFIG_HOME"]
        if "XDG_CONFIG_HOME" in os.environ
        else os.path.join(os.environ["HOME"], ".config"),
        "i3",
        "i3_notifier_config.py",
    )

    if os.path.exists(config_path):
        spec = importlib.util.spec_from_file_location("i3_notifier_config", config_path)
        userconfig = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(userconfig)
        return userconfig


def run_daemon():
    config_list = []
    userconfig = get_user_config()
    if userconfig is not None:
        config_list = userconfig.config_list

    dump_path = os.path.join("/tmp", os.environ["USER"], "i3-notifier.dump")
    data_manager = DataManager(config_list, dump_path)

    gui = RofiGUI()
    i3 = I3()

    def dump_and_exit(n, f):
        data_manager.dump()
        sys.exit(0)

    pid_file = os.path.join("/tmp", os.environ["USER"], "i3-notifier.pid")

    if os.path.exists(pid_file):
        try:
            os.kill(int(open(pid_file).read().strip()), 0)
        except:
            os.remove(pid_file)

    with daemon.DaemonContext(
        pidfile=daemon.pidfile.PIDLockFile(pid_file),
        signal_map={signal.SIGTERM: dump_and_exit},
    ):
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        fetcher = NotificationFetcher(data_manager, gui, i3)

        try:
            GLib.MainLoop().run()
        except:
            dump_and_exit(0, 0)


if __name__ == "__main__":
    run_daemon()
