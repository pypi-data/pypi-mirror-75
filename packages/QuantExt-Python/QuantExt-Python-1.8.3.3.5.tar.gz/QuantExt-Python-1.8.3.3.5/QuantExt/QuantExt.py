# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _QuantExt
else:
    import _QuantExt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantExt.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _QuantExt.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _QuantExt.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _QuantExt.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _QuantExt.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _QuantExt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _QuantExt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _QuantExt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _QuantExt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _QuantExt.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _QuantExt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _QuantExt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _QuantExt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _QuantExt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _QuantExt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _QuantExt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _QuantExt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _QuantExt:
_QuantExt.SwigPyIterator_swigregister(SwigPyIterator)
cvar = _QuantExt.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

Sunday = _QuantExt.Sunday
Monday = _QuantExt.Monday
Tuesday = _QuantExt.Tuesday
Wednesday = _QuantExt.Wednesday
Thursday = _QuantExt.Thursday
Friday = _QuantExt.Friday
Saturday = _QuantExt.Saturday
January = _QuantExt.January
February = _QuantExt.February
March = _QuantExt.March
April = _QuantExt.April
May = _QuantExt.May
June = _QuantExt.June
July = _QuantExt.July
August = _QuantExt.August
September = _QuantExt.September
October = _QuantExt.October
November = _QuantExt.November
December = _QuantExt.December
Days = _QuantExt.Days
Weeks = _QuantExt.Weeks
Months = _QuantExt.Months
Years = _QuantExt.Years
Hours = _QuantExt.Hours
Minutes = _QuantExt.Minutes
Seconds = _QuantExt.Seconds
Milliseconds = _QuantExt.Milliseconds
Microseconds = _QuantExt.Microseconds
NoFrequency = _QuantExt.NoFrequency
Once = _QuantExt.Once
Annual = _QuantExt.Annual
Semiannual = _QuantExt.Semiannual
EveryFourthMonth = _QuantExt.EveryFourthMonth
Quarterly = _QuantExt.Quarterly
Bimonthly = _QuantExt.Bimonthly
Monthly = _QuantExt.Monthly
EveryFourthWeek = _QuantExt.EveryFourthWeek
Biweekly = _QuantExt.Biweekly
Weekly = _QuantExt.Weekly
Daily = _QuantExt.Daily
OtherFrequency = _QuantExt.OtherFrequency
class Period(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def length(self) -> "Integer":
        return _QuantExt.Period_length(self)

    def units(self) -> "TimeUnit":
        return _QuantExt.Period_units(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.Period_frequency(self)

    def __init__(self, *args):
        _QuantExt.Period_swiginit(self, _QuantExt.new_Period(*args))

    def __str__(self) -> "std::string":
        return _QuantExt.Period___str__(self)

    def __repr__(self) -> "std::string":
        return _QuantExt.Period___repr__(self)

    def __neg__(self) -> "Period":
        return _QuantExt.Period___neg__(self)

    def __mul__(self, n: "Integer") -> "Period":
        return _QuantExt.Period___mul__(self, n)

    def __rmul__(self, n: "Integer") -> "Period":
        return _QuantExt.Period___rmul__(self, n)

    def __lt__(self, other: "Period") -> "bool":
        return _QuantExt.Period___lt__(self, other)

    def __gt__(self, other: "Period") -> "bool":
        return _QuantExt.Period___gt__(self, other)

    def __le__(self, other: "Period") -> "bool":
        return _QuantExt.Period___le__(self, other)

    def __ge__(self, other: "Period") -> "bool":
        return _QuantExt.Period___ge__(self, other)

    def __eq__(self, other: "Period") -> "bool":
        return _QuantExt.Period___eq__(self, other)

    def __cmp__(self, other: "Period") -> "int":
        return _QuantExt.Period___cmp__(self, other)

    def __hash__(self):
        return hash(str(self))

    __swig_destroy__ = _QuantExt.delete_Period

# Register Period in _QuantExt:
_QuantExt.Period_swigregister(Period)

class PeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.PeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.PeriodVector___bool__(self)

    def __len__(self) -> "std::vector< Period >::size_type":
        return _QuantExt.PeriodVector___len__(self)

    def __getslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "std::vector< Period,std::allocator< Period > > *":
        return _QuantExt.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Period >::difference_type", j: "std::vector< Period >::difference_type") -> "void":
        return _QuantExt.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Period >::value_type const &":
        return _QuantExt.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.PeriodVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Period >::value_type":
        return _QuantExt.PeriodVector_pop(self)

    def append(self, x: "Period") -> "void":
        return _QuantExt.PeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.PeriodVector_empty(self)

    def size(self) -> "std::vector< Period >::size_type":
        return _QuantExt.PeriodVector_size(self)

    def swap(self, v: "PeriodVector") -> "void":
        return _QuantExt.PeriodVector_swap(self, v)

    def begin(self) -> "std::vector< Period >::iterator":
        return _QuantExt.PeriodVector_begin(self)

    def end(self) -> "std::vector< Period >::iterator":
        return _QuantExt.PeriodVector_end(self)

    def rbegin(self) -> "std::vector< Period >::reverse_iterator":
        return _QuantExt.PeriodVector_rbegin(self)

    def rend(self) -> "std::vector< Period >::reverse_iterator":
        return _QuantExt.PeriodVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.PeriodVector_clear(self)

    def get_allocator(self) -> "std::vector< Period >::allocator_type":
        return _QuantExt.PeriodVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.PeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Period >::iterator":
        return _QuantExt.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.PeriodVector_swiginit(self, _QuantExt.new_PeriodVector(*args))

    def push_back(self, x: "Period") -> "void":
        return _QuantExt.PeriodVector_push_back(self, x)

    def front(self) -> "std::vector< Period >::value_type const &":
        return _QuantExt.PeriodVector_front(self)

    def back(self) -> "std::vector< Period >::value_type const &":
        return _QuantExt.PeriodVector_back(self)

    def assign(self, n: "std::vector< Period >::size_type", x: "Period") -> "void":
        return _QuantExt.PeriodVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.PeriodVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.PeriodVector_insert(self, *args)

    def reserve(self, n: "std::vector< Period >::size_type") -> "void":
        return _QuantExt.PeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< Period >::size_type":
        return _QuantExt.PeriodVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_PeriodVector

# Register PeriodVector in _QuantExt:
_QuantExt.PeriodVector_swigregister(PeriodVector)


import datetime as _datetime

class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def weekday(self) -> "Weekday":
        return _QuantExt.Date_weekday(self)

    def dayOfMonth(self) -> "Day":
        return _QuantExt.Date_dayOfMonth(self)

    def dayOfYear(self) -> "Day":
        return _QuantExt.Date_dayOfYear(self)

    def month(self) -> "Month":
        return _QuantExt.Date_month(self)

    def year(self) -> "Year":
        return _QuantExt.Date_year(self)

    def hours(self) -> "Hour":
        return _QuantExt.Date_hours(self)

    def minutes(self) -> "Minute":
        return _QuantExt.Date_minutes(self)

    def seconds(self) -> "Second":
        return _QuantExt.Date_seconds(self)

    def milliseconds(self) -> "Millisecond":
        return _QuantExt.Date_milliseconds(self)

    def microseconds(self) -> "Microsecond":
        return _QuantExt.Date_microseconds(self)

    def fractionOfDay(self) -> "Time":
        return _QuantExt.Date_fractionOfDay(self)

    def fractionOfSecond(self) -> "Time":
        return _QuantExt.Date_fractionOfSecond(self)

    def serialNumber(self) -> "BigInteger":
        return _QuantExt.Date_serialNumber(self)

    @staticmethod
    def isLeap(y: "Year") -> "bool":
        return _QuantExt.Date_isLeap(y)

    @staticmethod
    def minDate() -> "Date":
        return _QuantExt.Date_minDate()

    @staticmethod
    def maxDate() -> "Date":
        return _QuantExt.Date_maxDate()

    @staticmethod
    def todaysDate() -> "Date":
        return _QuantExt.Date_todaysDate()

    @staticmethod
    def localDateTime() -> "Date":
        return _QuantExt.Date_localDateTime()

    @staticmethod
    def universalDateTime() -> "Date":
        return _QuantExt.Date_universalDateTime()

    @staticmethod
    def endOfMonth(arg1: "Date") -> "Date":
        return _QuantExt.Date_endOfMonth(arg1)

    @staticmethod
    def isEndOfMonth(arg1: "Date") -> "bool":
        return _QuantExt.Date_isEndOfMonth(arg1)

    @staticmethod
    def nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
        return _QuantExt.Date_nextWeekday(arg1, arg2)

    @staticmethod
    def nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
        return _QuantExt.Date_nthWeekday(n, arg2, m, y)

    def __add__(self, *args) -> "Date":
        return _QuantExt.Date___add__(self, *args)

    def __init__(self, *args):
        _QuantExt.Date_swiginit(self, _QuantExt.new_Date(*args))

    def weekdayNumber(self) -> "Integer":
        return _QuantExt.Date_weekdayNumber(self)

    def __str__(self) -> "std::string":
        return _QuantExt.Date___str__(self)

    def __repr__(self) -> "std::string":
        return _QuantExt.Date___repr__(self)

    def ISO(self) -> "std::string":
        return _QuantExt.Date_ISO(self)

    def __sub__(self, *args) -> "BigInteger":
        return _QuantExt.Date___sub__(self, *args)

    def __eq__(self, other: "Date") -> "bool":
        return _QuantExt.Date___eq__(self, other)

    def __cmp__(self, other: "Date") -> "int":
        return _QuantExt.Date___cmp__(self, other)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Date___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Date___bool__(self)

    def __hash__(self) -> "int":
        return _QuantExt.Date___hash__(self)

    def __lt__(self, other: "Date") -> "bool":
        return _QuantExt.Date___lt__(self, other)

    def __gt__(self, other: "Date") -> "bool":
        return _QuantExt.Date___gt__(self, other)

    def __le__(self, other: "Date") -> "bool":
        return _QuantExt.Date___le__(self, other)

    def __ge__(self, other: "Date") -> "bool":
        return _QuantExt.Date___ge__(self, other)

    def __ne__(self, other: "Date") -> "bool":
        return _QuantExt.Date___ne__(self, other)

    def to_date(self):
        return _datetime.date(self.year(), self.month(), self.dayOfMonth())

    @staticmethod
    def from_date(date):
        return Date(date.day, date.month, date.year)

    __swig_destroy__ = _QuantExt.delete_Date

# Register Date in _QuantExt:
_QuantExt.Date_swigregister(Date)

def Date_isLeap(y: "Year") -> "bool":
    return _QuantExt.Date_isLeap(y)

def Date_minDate() -> "Date":
    return _QuantExt.Date_minDate()

def Date_maxDate() -> "Date":
    return _QuantExt.Date_maxDate()

def Date_todaysDate() -> "Date":
    return _QuantExt.Date_todaysDate()

def Date_localDateTime() -> "Date":
    return _QuantExt.Date_localDateTime()

def Date_universalDateTime() -> "Date":
    return _QuantExt.Date_universalDateTime()

def Date_endOfMonth(arg1: "Date") -> "Date":
    return _QuantExt.Date_endOfMonth(arg1)

def Date_isEndOfMonth(arg1: "Date") -> "bool":
    return _QuantExt.Date_isEndOfMonth(arg1)

def Date_nextWeekday(arg1: "Date", arg2: "Weekday") -> "Date":
    return _QuantExt.Date_nextWeekday(arg1, arg2)

def Date_nthWeekday(n: "Size", arg2: "Weekday", m: "Month", y: "Year") -> "Date":
    return _QuantExt.Date_nthWeekday(n, arg2, m, y)

class DateParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
        return _QuantExt.DateParser_parseFormatted(str, fmt)

    @staticmethod
    def parseISO(str: "std::string const &") -> "Date":
        return _QuantExt.DateParser_parseISO(str)

    @staticmethod
    def parse(str: "std::string const &", fmt: "std::string") -> "Date":
        return _QuantExt.DateParser_parse(str, fmt)

    def __init__(self):
        _QuantExt.DateParser_swiginit(self, _QuantExt.new_DateParser())
    __swig_destroy__ = _QuantExt.delete_DateParser

# Register DateParser in _QuantExt:
_QuantExt.DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str: "std::string const &", fmt: "std::string const &") -> "Date":
    return _QuantExt.DateParser_parseFormatted(str, fmt)

def DateParser_parseISO(str: "std::string const &") -> "Date":
    return _QuantExt.DateParser_parseISO(str)

def DateParser_parse(str: "std::string const &", fmt: "std::string") -> "Date":
    return _QuantExt.DateParser_parse(str, fmt)

class PeriodParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(str: "std::string const &") -> "Period":
        return _QuantExt.PeriodParser_parse(str)

    def __init__(self):
        _QuantExt.PeriodParser_swiginit(self, _QuantExt.new_PeriodParser())
    __swig_destroy__ = _QuantExt.delete_PeriodParser

# Register PeriodParser in _QuantExt:
_QuantExt.PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str: "std::string const &") -> "Period":
    return _QuantExt.PeriodParser_parse(str)


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.DateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DateVector___bool__(self)

    def __len__(self) -> "std::vector< Date >::size_type":
        return _QuantExt.DateVector___len__(self)

    def __getslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "std::vector< Date,std::allocator< Date > > *":
        return _QuantExt.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.DateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Date >::difference_type", j: "std::vector< Date >::difference_type") -> "void":
        return _QuantExt.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.DateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Date >::value_type const &":
        return _QuantExt.DateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.DateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Date >::value_type":
        return _QuantExt.DateVector_pop(self)

    def append(self, x: "Date") -> "void":
        return _QuantExt.DateVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.DateVector_empty(self)

    def size(self) -> "std::vector< Date >::size_type":
        return _QuantExt.DateVector_size(self)

    def swap(self, v: "DateVector") -> "void":
        return _QuantExt.DateVector_swap(self, v)

    def begin(self) -> "std::vector< Date >::iterator":
        return _QuantExt.DateVector_begin(self)

    def end(self) -> "std::vector< Date >::iterator":
        return _QuantExt.DateVector_end(self)

    def rbegin(self) -> "std::vector< Date >::reverse_iterator":
        return _QuantExt.DateVector_rbegin(self)

    def rend(self) -> "std::vector< Date >::reverse_iterator":
        return _QuantExt.DateVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.DateVector_clear(self)

    def get_allocator(self) -> "std::vector< Date >::allocator_type":
        return _QuantExt.DateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.DateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Date >::iterator":
        return _QuantExt.DateVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.DateVector_swiginit(self, _QuantExt.new_DateVector(*args))

    def push_back(self, x: "Date") -> "void":
        return _QuantExt.DateVector_push_back(self, x)

    def front(self) -> "std::vector< Date >::value_type const &":
        return _QuantExt.DateVector_front(self)

    def back(self) -> "std::vector< Date >::value_type const &":
        return _QuantExt.DateVector_back(self)

    def assign(self, n: "std::vector< Date >::size_type", x: "Date") -> "void":
        return _QuantExt.DateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.DateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.DateVector_insert(self, *args)

    def reserve(self, n: "std::vector< Date >::size_type") -> "void":
        return _QuantExt.DateVector_reserve(self, n)

    def capacity(self) -> "std::vector< Date >::size_type":
        return _QuantExt.DateVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_DateVector

# Register DateVector in _QuantExt:
_QuantExt.DateVector_swigregister(DateVector)

class IMM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _QuantExt.IMM_F
    G = _QuantExt.IMM_G
    H = _QuantExt.IMM_H
    J = _QuantExt.IMM_J
    K = _QuantExt.IMM_K
    M = _QuantExt.IMM_M
    N = _QuantExt.IMM_N
    Q = _QuantExt.IMM_Q
    U = _QuantExt.IMM_U
    V = _QuantExt.IMM_V
    X = _QuantExt.IMM_X
    Z = _QuantExt.IMM_Z

    @staticmethod
    def isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
        return _QuantExt.IMM_isIMMdate(d, mainCycle)

    @staticmethod
    def isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
        return _QuantExt.IMM_isIMMcode(code, mainCycle)

    @staticmethod
    def code(immDate: "Date") -> "std::string":
        return _QuantExt.IMM_code(immDate)

    @staticmethod
    def date(*args) -> "Date":
        return _QuantExt.IMM_date(*args)

    @staticmethod
    def nextDate(*args) -> "Date":
        return _QuantExt.IMM_nextDate(*args)

    @staticmethod
    def nextCode(*args) -> "std::string":
        return _QuantExt.IMM_nextCode(*args)

    def __init__(self):
        _QuantExt.IMM_swiginit(self, _QuantExt.new_IMM())
    __swig_destroy__ = _QuantExt.delete_IMM

# Register IMM in _QuantExt:
_QuantExt.IMM_swigregister(IMM)

def IMM_isIMMdate(d: "Date", mainCycle: "bool"=True) -> "bool":
    return _QuantExt.IMM_isIMMdate(d, mainCycle)

def IMM_isIMMcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
    return _QuantExt.IMM_isIMMcode(code, mainCycle)

def IMM_code(immDate: "Date") -> "std::string":
    return _QuantExt.IMM_code(immDate)

def IMM_date(*args) -> "Date":
    return _QuantExt.IMM_date(*args)

def IMM_nextDate(*args) -> "Date":
    return _QuantExt.IMM_nextDate(*args)

def IMM_nextCode(*args) -> "std::string":
    return _QuantExt.IMM_nextCode(*args)

class ASX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _QuantExt.ASX_F
    G = _QuantExt.ASX_G
    H = _QuantExt.ASX_H
    J = _QuantExt.ASX_J
    K = _QuantExt.ASX_K
    M = _QuantExt.ASX_M
    N = _QuantExt.ASX_N
    Q = _QuantExt.ASX_Q
    U = _QuantExt.ASX_U
    V = _QuantExt.ASX_V
    X = _QuantExt.ASX_X
    Z = _QuantExt.ASX_Z

    @staticmethod
    def isASXdate(d: "Date", mainCycle: "bool"=True) -> "bool":
        return _QuantExt.ASX_isASXdate(d, mainCycle)

    @staticmethod
    def isASXcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
        return _QuantExt.ASX_isASXcode(code, mainCycle)

    @staticmethod
    def code(asxDate: "Date") -> "std::string":
        return _QuantExt.ASX_code(asxDate)

    @staticmethod
    def date(*args) -> "Date":
        return _QuantExt.ASX_date(*args)

    @staticmethod
    def nextDate(*args) -> "Date":
        return _QuantExt.ASX_nextDate(*args)

    @staticmethod
    def nextCode(*args) -> "std::string":
        return _QuantExt.ASX_nextCode(*args)

    def __init__(self):
        _QuantExt.ASX_swiginit(self, _QuantExt.new_ASX())
    __swig_destroy__ = _QuantExt.delete_ASX

# Register ASX in _QuantExt:
_QuantExt.ASX_swigregister(ASX)

def ASX_isASXdate(d: "Date", mainCycle: "bool"=True) -> "bool":
    return _QuantExt.ASX_isASXdate(d, mainCycle)

def ASX_isASXcode(code: "std::string const &", mainCycle: "bool"=True) -> "bool":
    return _QuantExt.ASX_isASXcode(code, mainCycle)

def ASX_code(asxDate: "Date") -> "std::string":
    return _QuantExt.ASX_code(asxDate)

def ASX_date(*args) -> "Date":
    return _QuantExt.ASX_date(*args)

def ASX_nextDate(*args) -> "Date":
    return _QuantExt.ASX_nextDate(*args)

def ASX_nextCode(*args) -> "std::string":
    return _QuantExt.ASX_nextCode(*args)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _QuantExt.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _QuantExt.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _QuantExt.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _QuantExt.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _QuantExt.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _QuantExt.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _QuantExt.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _QuantExt.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _QuantExt.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _QuantExt.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _QuantExt.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _QuantExt.IntVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _QuantExt.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _QuantExt.IntVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.IntVector_swiginit(self, _QuantExt.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _QuantExt.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _QuantExt.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _QuantExt.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _QuantExt.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _QuantExt.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _QuantExt.IntVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_IntVector

# Register IntVector in _QuantExt:
_QuantExt.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.UnsignedIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.UnsignedIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _QuantExt.UnsignedIntVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _QuantExt.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned int >::difference_type", j: "std::vector< unsigned int >::difference_type") -> "void":
        return _QuantExt.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _QuantExt.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.UnsignedIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _QuantExt.UnsignedIntVector_pop(self)

    def append(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _QuantExt.UnsignedIntVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.UnsignedIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _QuantExt.UnsignedIntVector_size(self)

    def swap(self, v: "UnsignedIntVector") -> "void":
        return _QuantExt.UnsignedIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _QuantExt.UnsignedIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _QuantExt.UnsignedIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _QuantExt.UnsignedIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _QuantExt.UnsignedIntVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.UnsignedIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _QuantExt.UnsignedIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.UnsignedIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _QuantExt.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.UnsignedIntVector_swiginit(self, _QuantExt.new_UnsignedIntVector(*args))

    def push_back(self, x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _QuantExt.UnsignedIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _QuantExt.UnsignedIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _QuantExt.UnsignedIntVector_back(self)

    def assign(self, n: "std::vector< unsigned int >::size_type", x: "std::vector< unsigned int >::value_type const &") -> "void":
        return _QuantExt.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.UnsignedIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.UnsignedIntVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned int >::size_type") -> "void":
        return _QuantExt.UnsignedIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _QuantExt.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_UnsignedIntVector

# Register UnsignedIntVector in _QuantExt:
_QuantExt.UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _QuantExt.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _QuantExt.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _QuantExt.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _QuantExt.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _QuantExt.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _QuantExt.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _QuantExt.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _QuantExt.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _QuantExt.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _QuantExt.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _QuantExt.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _QuantExt.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _QuantExt.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _QuantExt.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.DoubleVector_swiginit(self, _QuantExt.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _QuantExt.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _QuantExt.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _QuantExt.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _QuantExt.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _QuantExt.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _QuantExt.DoubleVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_DoubleVector

# Register DoubleVector in _QuantExt:
_QuantExt.DoubleVector_swigregister(DoubleVector)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.StrVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.StrVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _QuantExt.StrVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _QuantExt.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.StrVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _QuantExt.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.StrVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _QuantExt.StrVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.StrVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _QuantExt.StrVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _QuantExt.StrVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.StrVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _QuantExt.StrVector_size(self)

    def swap(self, v: "StrVector") -> "void":
        return _QuantExt.StrVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _QuantExt.StrVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _QuantExt.StrVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _QuantExt.StrVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _QuantExt.StrVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.StrVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _QuantExt.StrVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.StrVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _QuantExt.StrVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.StrVector_swiginit(self, _QuantExt.new_StrVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _QuantExt.StrVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _QuantExt.StrVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _QuantExt.StrVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _QuantExt.StrVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.StrVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.StrVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _QuantExt.StrVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _QuantExt.StrVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_StrVector

# Register StrVector in _QuantExt:
_QuantExt.StrVector_swigregister(StrVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _QuantExt.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _QuantExt.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _QuantExt.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _QuantExt.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _QuantExt.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _QuantExt.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _QuantExt.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        return _QuantExt.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _QuantExt.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _QuantExt.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _QuantExt.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _QuantExt.BoolVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _QuantExt.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _QuantExt.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.BoolVector_swiginit(self, _QuantExt.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _QuantExt.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _QuantExt.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _QuantExt.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _QuantExt.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _QuantExt.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _QuantExt.BoolVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_BoolVector

# Register BoolVector in _QuantExt:
_QuantExt.BoolVector_swigregister(BoolVector)

class DoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DoublePair_swiginit(self, _QuantExt.new_DoublePair(*args))
    first = property(_QuantExt.DoublePair_first_get, _QuantExt.DoublePair_first_set)
    second = property(_QuantExt.DoublePair_second_get, _QuantExt.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantExt.delete_DoublePair

# Register DoublePair in _QuantExt:
_QuantExt.DoublePair_swigregister(DoublePair)

class DoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.DoublePairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DoublePairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< double,double > >::size_type":
        return _QuantExt.DoublePairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< double,double > >::difference_type", j: "std::vector< std::pair< double,double > >::difference_type") -> "std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > *":
        return _QuantExt.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< double,double > >::difference_type", j: "std::vector< std::pair< double,double > >::difference_type") -> "void":
        return _QuantExt.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< double,double > >::value_type const &":
        return _QuantExt.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.DoublePairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< double,double > >::value_type":
        return _QuantExt.DoublePairVector_pop(self)

    def append(self, x: "DoublePair") -> "void":
        return _QuantExt.DoublePairVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.DoublePairVector_empty(self)

    def size(self) -> "std::vector< std::pair< double,double > >::size_type":
        return _QuantExt.DoublePairVector_size(self)

    def swap(self, v: "DoublePairVector") -> "void":
        return _QuantExt.DoublePairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< double,double > >::iterator":
        return _QuantExt.DoublePairVector_begin(self)

    def end(self) -> "std::vector< std::pair< double,double > >::iterator":
        return _QuantExt.DoublePairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< double,double > >::reverse_iterator":
        return _QuantExt.DoublePairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< double,double > >::reverse_iterator":
        return _QuantExt.DoublePairVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.DoublePairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< double,double > >::allocator_type":
        return _QuantExt.DoublePairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.DoublePairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< double,double > >::iterator":
        return _QuantExt.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.DoublePairVector_swiginit(self, _QuantExt.new_DoublePairVector(*args))

    def push_back(self, x: "DoublePair") -> "void":
        return _QuantExt.DoublePairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< double,double > >::value_type const &":
        return _QuantExt.DoublePairVector_front(self)

    def back(self) -> "std::vector< std::pair< double,double > >::value_type const &":
        return _QuantExt.DoublePairVector_back(self)

    def assign(self, n: "std::vector< std::pair< double,double > >::size_type", x: "DoublePair") -> "void":
        return _QuantExt.DoublePairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.DoublePairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.DoublePairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< double,double > >::size_type") -> "void":
        return _QuantExt.DoublePairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< double,double > >::size_type":
        return _QuantExt.DoublePairVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_DoublePairVector

# Register DoublePairVector in _QuantExt:
_QuantExt.DoublePairVector_swigregister(DoublePairVector)

class NodePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NodePair_swiginit(self, _QuantExt.new_NodePair(*args))
    first = property(_QuantExt.NodePair_first_get, _QuantExt.NodePair_first_set)
    second = property(_QuantExt.NodePair_second_get, _QuantExt.NodePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantExt.delete_NodePair

# Register NodePair in _QuantExt:
_QuantExt.NodePair_swigregister(NodePair)

class NodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.NodeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.NodeVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< Date,double > >::size_type":
        return _QuantExt.NodeVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< Date,double > >::difference_type", j: "std::vector< std::pair< Date,double > >::difference_type") -> "std::vector< std::pair< Date,double >,std::allocator< std::pair< Date,double > > > *":
        return _QuantExt.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.NodeVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< Date,double > >::difference_type", j: "std::vector< std::pair< Date,double > >::difference_type") -> "void":
        return _QuantExt.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< Date,double > >::value_type const &":
        return _QuantExt.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.NodeVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< Date,double > >::value_type":
        return _QuantExt.NodeVector_pop(self)

    def append(self, x: "NodePair") -> "void":
        return _QuantExt.NodeVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.NodeVector_empty(self)

    def size(self) -> "std::vector< std::pair< Date,double > >::size_type":
        return _QuantExt.NodeVector_size(self)

    def swap(self, v: "NodeVector") -> "void":
        return _QuantExt.NodeVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< Date,double > >::iterator":
        return _QuantExt.NodeVector_begin(self)

    def end(self) -> "std::vector< std::pair< Date,double > >::iterator":
        return _QuantExt.NodeVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< Date,double > >::reverse_iterator":
        return _QuantExt.NodeVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< Date,double > >::reverse_iterator":
        return _QuantExt.NodeVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.NodeVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< Date,double > >::allocator_type":
        return _QuantExt.NodeVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.NodeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< Date,double > >::iterator":
        return _QuantExt.NodeVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.NodeVector_swiginit(self, _QuantExt.new_NodeVector(*args))

    def push_back(self, x: "NodePair") -> "void":
        return _QuantExt.NodeVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< Date,double > >::value_type const &":
        return _QuantExt.NodeVector_front(self)

    def back(self) -> "std::vector< std::pair< Date,double > >::value_type const &":
        return _QuantExt.NodeVector_back(self)

    def assign(self, n: "std::vector< std::pair< Date,double > >::size_type", x: "NodePair") -> "void":
        return _QuantExt.NodeVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.NodeVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.NodeVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< Date,double > >::size_type") -> "void":
        return _QuantExt.NodeVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< Date,double > >::size_type":
        return _QuantExt.NodeVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_NodeVector

# Register NodeVector in _QuantExt:
_QuantExt.NodeVector_swigregister(NodeVector)

class Exercise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Exercise *":
        return _QuantExt.Exercise___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Exercise___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Exercise___bool__(self)
    American = _QuantExt.Exercise_American
    Bermudan = _QuantExt.Exercise_Bermudan
    European = _QuantExt.Exercise_European

    def exerciseType(self) -> "Exercise::Type":
        return _QuantExt.Exercise_exerciseType(self)

    def __init__(self):
        _QuantExt.Exercise_swiginit(self, _QuantExt.new_Exercise())
    __swig_destroy__ = _QuantExt.delete_Exercise

    def type(self) -> "Exercise::Type":
        return _QuantExt.Exercise_type(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.Exercise_dates(self)

    def lastDate(self) -> "Date":
        return _QuantExt.Exercise_lastDate(self)

# Register Exercise in _QuantExt:
_QuantExt.Exercise_swigregister(Exercise)

class EuropeanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, date: "Date"):
        _QuantExt.EuropeanExercise_swiginit(self, _QuantExt.new_EuropeanExercise(date))
    __swig_destroy__ = _QuantExt.delete_EuropeanExercise

# Register EuropeanExercise in _QuantExt:
_QuantExt.EuropeanExercise_swigregister(EuropeanExercise)

class AmericanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, earliestDate: "Date", latestDate: "Date", payoffAtExpiry: "bool"=False):
        _QuantExt.AmericanExercise_swiginit(self, _QuantExt.new_AmericanExercise(earliestDate, latestDate, payoffAtExpiry))
    __swig_destroy__ = _QuantExt.delete_AmericanExercise

# Register AmericanExercise in _QuantExt:
_QuantExt.AmericanExercise_swigregister(AmericanExercise)

class BermudanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates: "DateVector", payoffAtExpiry: "bool"=False):
        _QuantExt.BermudanExercise_swiginit(self, _QuantExt.new_BermudanExercise(dates, payoffAtExpiry))
    __swig_destroy__ = _QuantExt.delete_BermudanExercise

# Register BermudanExercise in _QuantExt:
_QuantExt.BermudanExercise_swigregister(BermudanExercise)

class RebatedExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RebatedExercise_swiginit(self, _QuantExt.new_RebatedExercise(*args))
    __swig_destroy__ = _QuantExt.delete_RebatedExercise

# Register RebatedExercise in _QuantExt:
_QuantExt.RebatedExercise_swigregister(RebatedExercise)

class SwingExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates: "DateVector"):
        _QuantExt.SwingExercise_swiginit(self, _QuantExt.new_SwingExercise(dates))
    __swig_destroy__ = _QuantExt.delete_SwingExercise

# Register SwingExercise in _QuantExt:
_QuantExt.SwingExercise_swigregister(SwingExercise)

class Observable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Observable *":
        return _QuantExt.Observable___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Observable___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Observable___bool__(self)

    def __init__(self):
        _QuantExt.Observable_swiginit(self, _QuantExt.new_Observable())
    __swig_destroy__ = _QuantExt.delete_Observable

# Register Observable in _QuantExt:
_QuantExt.Observable_swigregister(Observable)

class Observer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback: "PyObject *"):
        _QuantExt.Observer_swiginit(self, _QuantExt.new_Observer(callback))

    def _registerWith(self, arg2: "Observable") -> "void":
        return _QuantExt.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2: "Observable") -> "void":
        return _QuantExt.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        self._registerWith(x.asObservable())
    def unregisterWith(self,x):
        self._unregisterWith(x.asObservable())

    __swig_destroy__ = _QuantExt.delete_Observer

# Register Observer in _QuantExt:
_QuantExt.Observer_swigregister(Observer)

class Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Array_swiginit(self, _QuantExt.new_Array(*args))

    def __len__(self) -> "Size":
        return _QuantExt.Array___len__(self)

    def __str__(self) -> "std::string":
        return _QuantExt.Array___str__(self)

    def __add__(self, a: "Array") -> "Array":
        return _QuantExt.Array___add__(self, a)

    def __sub__(self, a: "Array") -> "Array":
        return _QuantExt.Array___sub__(self, a)

    def __mul__(self, *args) -> "Array":
        return _QuantExt.Array___mul__(self, *args)

    def __div__(self, a: "Real") -> "Array":
        return _QuantExt.Array___div__(self, a)

    def __rmul__(self, a: "Real") -> "Array":
        return _QuantExt.Array___rmul__(self, a)

    def __getslice__(self, i: "Integer", j: "Integer") -> "Array":
        return _QuantExt.Array___getslice__(self, i, j)

    def __setslice__(self, i: "Integer", j: "Integer", rhs: "Array") -> "void":
        return _QuantExt.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Array___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Array___bool__(self)

    def __getitem__(self, i: "Integer") -> "Real":
        return _QuantExt.Array___getitem__(self, i)

    def __setitem__(self, i: "Integer", x: "Real") -> "void":
        return _QuantExt.Array___setitem__(self, i, x)
    __swig_destroy__ = _QuantExt.delete_Array

# Register Array in _QuantExt:
_QuantExt.Array_swigregister(Array)

class DefaultLexicographicalViewColumn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        return _QuantExt.DefaultLexicographicalViewColumn___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        return _QuantExt.DefaultLexicographicalViewColumn___setitem__(self, i, x)
    __swig_destroy__ = _QuantExt.delete_DefaultLexicographicalViewColumn

# Register DefaultLexicographicalViewColumn in _QuantExt:
_QuantExt.DefaultLexicographicalViewColumn_swigregister(DefaultLexicographicalViewColumn)

class LexicographicalView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xSize(self) -> "Size":
        return _QuantExt.LexicographicalView_xSize(self)

    def ySize(self) -> "Size":
        return _QuantExt.LexicographicalView_ySize(self)

    def __init__(self, a: "Array", xSize: "Size"):
        _QuantExt.LexicographicalView_swiginit(self, _QuantExt.new_LexicographicalView(a, xSize))

    def __str__(self) -> "std::string":
        return _QuantExt.LexicographicalView___str__(self)

    def __getitem__(self, i: "Size") -> "DefaultLexicographicalViewColumn":
        return _QuantExt.LexicographicalView___getitem__(self, i)
    __swig_destroy__ = _QuantExt.delete_LexicographicalView

# Register LexicographicalView in _QuantExt:
_QuantExt.LexicographicalView_swigregister(LexicographicalView)

class MatrixRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i: "Size") -> "Real":
        return _QuantExt.MatrixRow___getitem__(self, i)

    def __setitem__(self, i: "Size", x: "Real") -> "void":
        return _QuantExt.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _QuantExt.delete_MatrixRow

# Register MatrixRow in _QuantExt:
_QuantExt.MatrixRow_swigregister(MatrixRow)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Matrix_swiginit(self, _QuantExt.new_Matrix(*args))

    def rows(self) -> "Size":
        return _QuantExt.Matrix_rows(self)

    def columns(self) -> "Size":
        return _QuantExt.Matrix_columns(self)

    def __str__(self) -> "std::string":
        return _QuantExt.Matrix___str__(self)

    def __add__(self, m: "Matrix") -> "Matrix":
        return _QuantExt.Matrix___add__(self, m)

    def __sub__(self, m: "Matrix") -> "Matrix":
        return _QuantExt.Matrix___sub__(self, m)

    def __mul__(self, *args) -> "Matrix":
        return _QuantExt.Matrix___mul__(self, *args)

    def __div__(self, x: "Real") -> "Matrix":
        return _QuantExt.Matrix___div__(self, x)

    def __getitem__(self, i: "Size") -> "MatrixRow":
        return _QuantExt.Matrix___getitem__(self, i)

    def __rmul__(self, *args) -> "Matrix":
        return _QuantExt.Matrix___rmul__(self, *args)
    __swig_destroy__ = _QuantExt.delete_Matrix

# Register Matrix in _QuantExt:
_QuantExt.Matrix_swigregister(Matrix)

class SalvagingAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAlgorithm = _QuantExt.SalvagingAlgorithm_NoAlgorithm
    Spectral = _QuantExt.SalvagingAlgorithm_Spectral

    def __init__(self):
        _QuantExt.SalvagingAlgorithm_swiginit(self, _QuantExt.new_SalvagingAlgorithm())
    __swig_destroy__ = _QuantExt.delete_SalvagingAlgorithm

# Register SalvagingAlgorithm in _QuantExt:
_QuantExt.SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def transpose(m: "Matrix") -> "Matrix":
    return _QuantExt.transpose(m)

def outerProduct(v1: "Array", v2: "Array") -> "Matrix":
    return _QuantExt.outerProduct(v1, v2)

def pseudoSqrt(m: "Matrix", a: "SalvagingAlgorithm::Type") -> "Matrix":
    return _QuantExt.pseudoSqrt(m, a)
class SVD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2: "Matrix"):
        _QuantExt.SVD_swiginit(self, _QuantExt.new_SVD(arg2))

    def U(self) -> "Matrix const &":
        return _QuantExt.SVD_U(self)

    def V(self) -> "Matrix const &":
        return _QuantExt.SVD_V(self)

    def S(self) -> "Matrix":
        return _QuantExt.SVD_S(self)

    def singularValues(self) -> "Array const &":
        return _QuantExt.SVD_singularValues(self)
    __swig_destroy__ = _QuantExt.delete_SVD

# Register SVD in _QuantExt:
_QuantExt.SVD_swigregister(SVD)

class Quote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Quote *":
        return _QuantExt.Quote___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Quote___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Quote___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.Quote_asObservable(self)

    def __init__(self):
        _QuantExt.Quote_swiginit(self, _QuantExt.new_Quote())
    __swig_destroy__ = _QuantExt.delete_Quote

    def value(self) -> "Real":
        return _QuantExt.Quote_value(self)

# Register Quote in _QuantExt:
_QuantExt.Quote_swigregister(Quote)

class QuoteHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.QuoteHandle_swiginit(self, _QuantExt.new_QuoteHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< Quote >":
        return _QuantExt.QuoteHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.QuoteHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.QuoteHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.QuoteHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_QuoteHandle

    def value(self) -> "Real":
        return _QuantExt.QuoteHandle_value(self)

# Register QuoteHandle in _QuantExt:
_QuantExt.QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableQuoteHandle_swiginit(self, _QuantExt.new_RelinkableQuoteHandle(*args))

    def linkTo(self, arg2: "Quote") -> "void":
        return _QuantExt.RelinkableQuoteHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableQuoteHandle

# Register RelinkableQuoteHandle in _QuantExt:
_QuantExt.RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class SimpleQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value: "Real"):
        _QuantExt.SimpleQuote_swiginit(self, _QuantExt.new_SimpleQuote(value))

    def setValue(self, value: "Real") -> "void":
        return _QuantExt.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _QuantExt.delete_SimpleQuote

# Register SimpleQuote in _QuantExt:
_QuantExt.SimpleQuote_swigregister(SimpleQuote)

class DerivedQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h: "QuoteHandle", function: "PyObject *"):
        _QuantExt.DerivedQuote_swiginit(self, _QuantExt.new_DerivedQuote(h, function))
    __swig_destroy__ = _QuantExt.delete_DerivedQuote

# Register DerivedQuote in _QuantExt:
_QuantExt.DerivedQuote_swigregister(DerivedQuote)

class CompositeQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h1: "QuoteHandle", h2: "QuoteHandle", function: "PyObject *"):
        _QuantExt.CompositeQuote_swiginit(self, _QuantExt.new_CompositeQuote(h1, h2, function))
    __swig_destroy__ = _QuantExt.delete_CompositeQuote

# Register CompositeQuote in _QuantExt:
_QuantExt.CompositeQuote_swigregister(CompositeQuote)

class QuoteVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.QuoteVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.QuoteVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _QuantExt.QuoteVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > *":
        return _QuantExt.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Quote > >::difference_type", j: "std::vector< boost::shared_ptr< Quote > >::difference_type") -> "void":
        return _QuantExt.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _QuantExt.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.QuoteVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type":
        return _QuantExt.QuoteVector_pop(self)

    def append(self, x: "Quote") -> "void":
        return _QuantExt.QuoteVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.QuoteVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _QuantExt.QuoteVector_size(self)

    def swap(self, v: "QuoteVector") -> "void":
        return _QuantExt.QuoteVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _QuantExt.QuoteVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _QuantExt.QuoteVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        return _QuantExt.QuoteVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Quote > >::reverse_iterator":
        return _QuantExt.QuoteVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.QuoteVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Quote > >::allocator_type":
        return _QuantExt.QuoteVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.QuoteVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Quote > >::iterator":
        return _QuantExt.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.QuoteVector_swiginit(self, _QuantExt.new_QuoteVector(*args))

    def push_back(self, x: "Quote") -> "void":
        return _QuantExt.QuoteVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _QuantExt.QuoteVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Quote > >::value_type const &":
        return _QuantExt.QuoteVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type", x: "Quote") -> "void":
        return _QuantExt.QuoteVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.QuoteVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.QuoteVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Quote > >::size_type") -> "void":
        return _QuantExt.QuoteVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Quote > >::size_type":
        return _QuantExt.QuoteVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_QuoteVector

# Register QuoteVector in _QuantExt:
_QuantExt.QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.QuoteVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.QuoteVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _QuantExt.QuoteVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "std::vector< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > >,std::allocator< std::vector< boost::shared_ptr< Quote >,std::allocator< boost::shared_ptr< Quote > > > > > *":
        return _QuantExt.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type", j: "std::vector< std::vector< boost::shared_ptr< Quote > > >::difference_type") -> "void":
        return _QuantExt.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _QuantExt.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.QuoteVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type":
        return _QuantExt.QuoteVectorVector_pop(self)

    def append(self, x: "QuoteVector") -> "void":
        return _QuantExt.QuoteVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.QuoteVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _QuantExt.QuoteVectorVector_size(self)

    def swap(self, v: "QuoteVectorVector") -> "void":
        return _QuantExt.QuoteVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _QuantExt.QuoteVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _QuantExt.QuoteVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        return _QuantExt.QuoteVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::reverse_iterator":
        return _QuantExt.QuoteVectorVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.QuoteVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::allocator_type":
        return _QuantExt.QuoteVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.QuoteVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::iterator":
        return _QuantExt.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.QuoteVectorVector_swiginit(self, _QuantExt.new_QuoteVectorVector(*args))

    def push_back(self, x: "QuoteVector") -> "void":
        return _QuantExt.QuoteVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _QuantExt.QuoteVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::value_type const &":
        return _QuantExt.QuoteVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type", x: "QuoteVector") -> "void":
        return _QuantExt.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.QuoteVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.QuoteVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type") -> "void":
        return _QuantExt.QuoteVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< boost::shared_ptr< Quote > > >::size_type":
        return _QuantExt.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_QuoteVectorVector

# Register QuoteVectorVector in _QuantExt:
_QuantExt.QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.QuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.QuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< Handle< Quote > >::size_type":
        return _QuantExt.QuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > *":
        return _QuantExt.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Handle< Quote > >::difference_type", j: "std::vector< Handle< Quote > >::difference_type") -> "void":
        return _QuantExt.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Handle< Quote > >::value_type const &":
        return _QuantExt.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< Handle< Quote > >::value_type":
        return _QuantExt.QuoteHandleVector_pop(self)

    def append(self, x: "QuoteHandle") -> "void":
        return _QuantExt.QuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.QuoteHandleVector_empty(self)

    def size(self) -> "std::vector< Handle< Quote > >::size_type":
        return _QuantExt.QuoteHandleVector_size(self)

    def swap(self, v: "QuoteHandleVector") -> "void":
        return _QuantExt.QuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< Handle< Quote > >::iterator":
        return _QuantExt.QuoteHandleVector_begin(self)

    def end(self) -> "std::vector< Handle< Quote > >::iterator":
        return _QuantExt.QuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        return _QuantExt.QuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< Handle< Quote > >::reverse_iterator":
        return _QuantExt.QuoteHandleVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.QuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< Handle< Quote > >::allocator_type":
        return _QuantExt.QuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.QuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< Handle< Quote > >::iterator":
        return _QuantExt.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.QuoteHandleVector_swiginit(self, _QuantExt.new_QuoteHandleVector(*args))

    def push_back(self, x: "QuoteHandle") -> "void":
        return _QuantExt.QuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< Handle< Quote > >::value_type const &":
        return _QuantExt.QuoteHandleVector_front(self)

    def back(self) -> "std::vector< Handle< Quote > >::value_type const &":
        return _QuantExt.QuoteHandleVector_back(self)

    def assign(self, n: "std::vector< Handle< Quote > >::size_type", x: "QuoteHandle") -> "void":
        return _QuantExt.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.QuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.QuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< Handle< Quote > >::size_type") -> "void":
        return _QuantExt.QuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< Handle< Quote > >::size_type":
        return _QuantExt.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_QuoteHandleVector

# Register QuoteHandleVector in _QuantExt:
_QuantExt.QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.QuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _QuantExt.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "std::vector< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > >,std::allocator< std::vector< Handle< Quote >,std::allocator< Handle< Quote > > > > > *":
        return _QuantExt.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< Handle< Quote > > >::difference_type", j: "std::vector< std::vector< Handle< Quote > > >::difference_type") -> "void":
        return _QuantExt.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _QuantExt.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type":
        return _QuantExt.QuoteHandleVectorVector_pop(self)

    def append(self, x: "QuoteHandleVector") -> "void":
        return _QuantExt.QuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.QuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _QuantExt.QuoteHandleVectorVector_size(self)

    def swap(self, v: "QuoteHandleVectorVector") -> "void":
        return _QuantExt.QuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _QuantExt.QuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _QuantExt.QuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        return _QuantExt.QuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< Handle< Quote > > >::reverse_iterator":
        return _QuantExt.QuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.QuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< Handle< Quote > > >::allocator_type":
        return _QuantExt.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< Handle< Quote > > >::iterator":
        return _QuantExt.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.QuoteHandleVectorVector_swiginit(self, _QuantExt.new_QuoteHandleVectorVector(*args))

    def push_back(self, x: "QuoteHandleVector") -> "void":
        return _QuantExt.QuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _QuantExt.QuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< Handle< Quote > > >::value_type const &":
        return _QuantExt.QuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type", x: "QuoteHandleVector") -> "void":
        return _QuantExt.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< Handle< Quote > > >::size_type") -> "void":
        return _QuantExt.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< Handle< Quote > > >::size_type":
        return _QuantExt.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_QuoteHandleVectorVector

# Register QuoteHandleVectorVector in _QuantExt:
_QuantExt.QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > *":
        return _QuantExt.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< RelinkableHandle< Quote > >::difference_type", j: "std::vector< RelinkableHandle< Quote > >::difference_type") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< RelinkableHandle< Quote > >::value_type":
        return _QuantExt.RelinkableQuoteHandleVector_pop(self)

    def append(self, x: "RelinkableQuoteHandle") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVector_empty(self)

    def size(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVector") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVector_begin(self)

    def end(self) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVector_end(self)

    def rbegin(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        return _QuantExt.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self) -> "std::vector< RelinkableHandle< Quote > >::reverse_iterator":
        return _QuantExt.RelinkableQuoteHandleVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self) -> "std::vector< RelinkableHandle< Quote > >::allocator_type":
        return _QuantExt.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< RelinkableHandle< Quote > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.RelinkableQuoteHandleVector_swiginit(self, _QuantExt.new_RelinkableQuoteHandleVector(*args))

    def push_back(self, x: "RelinkableQuoteHandle") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVector_front(self)

    def back(self) -> "std::vector< RelinkableHandle< Quote > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVector_back(self)

    def assign(self, n: "std::vector< RelinkableHandle< Quote > >::size_type", x: "RelinkableQuoteHandle") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n: "std::vector< RelinkableHandle< Quote > >::size_type") -> "void":
        return _QuantExt.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self) -> "std::vector< RelinkableHandle< Quote > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_RelinkableQuoteHandleVector

# Register RelinkableQuoteHandleVector in _QuantExt:
_QuantExt.RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "std::vector< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > >,std::allocator< std::vector< RelinkableHandle< Quote >,std::allocator< RelinkableHandle< Quote > > > > > *":
        return _QuantExt.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type", j: "std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type":
        return _QuantExt.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x: "RelinkableQuoteHandleVector") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v: "RelinkableQuoteHandleVectorVector") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        return _QuantExt.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator":
        return _QuantExt.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::allocator_type":
        return _QuantExt.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::iterator":
        return _QuantExt.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.RelinkableQuoteHandleVectorVector_swiginit(self, _QuantExt.new_RelinkableQuoteHandleVectorVector(*args))

    def push_back(self, x: "RelinkableQuoteHandleVector") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::value_type const &":
        return _QuantExt.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type", x: "RelinkableQuoteHandleVector") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type") -> "void":
        return _QuantExt.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< RelinkableHandle< Quote > > >::size_type":
        return _QuantExt.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_RelinkableQuoteHandleVectorVector

# Register RelinkableQuoteHandleVectorVector in _QuantExt:
_QuantExt.RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

Following = _QuantExt.Following
ModifiedFollowing = _QuantExt.ModifiedFollowing
Preceding = _QuantExt.Preceding
ModifiedPreceding = _QuantExt.ModifiedPreceding
Unadjusted = _QuantExt.Unadjusted
HalfMonthModifiedFollowing = _QuantExt.HalfMonthModifiedFollowing
JoinHolidays = _QuantExt.JoinHolidays
JoinBusinessDays = _QuantExt.JoinBusinessDays
class Calendar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isWeekend(self, w: "Weekday") -> "bool":
        return _QuantExt.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2: "Date") -> "Date":
        return _QuantExt.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2: "Date") -> "bool":
        return _QuantExt.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2: "Date") -> "bool":
        return _QuantExt.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2: "Date") -> "bool":
        return _QuantExt.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2: "Date") -> "void":
        return _QuantExt.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2: "Date") -> "void":
        return _QuantExt.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args) -> "Date":
        return _QuantExt.Calendar_adjust(self, *args)

    def advance(self, *args) -> "Date":
        return _QuantExt.Calendar_advance(self, *args)

    def businessDaysBetween(self, _from: "Date", to: "Date", includeFirst: "bool"=True, includeLast: "bool"=False) -> "BigInteger":
        return _QuantExt.Calendar_businessDaysBetween(self, _from, to, includeFirst, includeLast)

    @staticmethod
    def holidayList(calendar: "Calendar", _from: "Date", to: "Date", includeWeekEnds: "bool"=False) -> "std::vector< Date,std::allocator< Date > >":
        return _QuantExt.Calendar_holidayList(calendar, _from, to, includeWeekEnds)

    def name(self) -> "std::string":
        return _QuantExt.Calendar_name(self)

    def __str__(self) -> "std::string":
        return _QuantExt.Calendar___str__(self)

    def __eq__(self, other: "Calendar") -> "bool":
        return _QuantExt.Calendar___eq__(self, other)

    def __ne__(self, other: "Calendar") -> "bool":
        return _QuantExt.Calendar___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantExt.delete_Calendar

# Register Calendar in _QuantExt:
_QuantExt.Calendar_swigregister(Calendar)

def Calendar_holidayList(calendar: "Calendar", _from: "Date", to: "Date", includeWeekEnds: "bool"=False) -> "std::vector< Date,std::allocator< Date > >":
    return _QuantExt.Calendar_holidayList(calendar, _from, to, includeWeekEnds)

class Argentina(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Merval = _QuantExt.Argentina_Merval

    def __init__(self, *args):
        _QuantExt.Argentina_swiginit(self, _QuantExt.new_Argentina(*args))
    __swig_destroy__ = _QuantExt.delete_Argentina

# Register Argentina in _QuantExt:
_QuantExt.Argentina_swigregister(Argentina)

class Australia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Australia_swiginit(self, _QuantExt.new_Australia())
    __swig_destroy__ = _QuantExt.delete_Australia

# Register Australia in _QuantExt:
_QuantExt.Australia_swigregister(Australia)

class Brazil(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Brazil_Settlement
    Exchange = _QuantExt.Brazil_Exchange

    def __init__(self, *args):
        _QuantExt.Brazil_swiginit(self, _QuantExt.new_Brazil(*args))
    __swig_destroy__ = _QuantExt.delete_Brazil

# Register Brazil in _QuantExt:
_QuantExt.Brazil_swigregister(Brazil)

class Canada(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Canada_Settlement
    TSX = _QuantExt.Canada_TSX

    def __init__(self, *args):
        _QuantExt.Canada_swiginit(self, _QuantExt.new_Canada(*args))
    __swig_destroy__ = _QuantExt.delete_Canada

# Register Canada in _QuantExt:
_QuantExt.Canada_swigregister(Canada)

class China(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSE = _QuantExt.China_SSE
    IB = _QuantExt.China_IB

    def __init__(self, *args):
        _QuantExt.China_swiginit(self, _QuantExt.new_China(*args))
    __swig_destroy__ = _QuantExt.delete_China

# Register China in _QuantExt:
_QuantExt.China_swigregister(China)

class CzechRepublic(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PSE = _QuantExt.CzechRepublic_PSE

    def __init__(self, *args):
        _QuantExt.CzechRepublic_swiginit(self, _QuantExt.new_CzechRepublic(*args))
    __swig_destroy__ = _QuantExt.delete_CzechRepublic

# Register CzechRepublic in _QuantExt:
_QuantExt.CzechRepublic_swigregister(CzechRepublic)

class Denmark(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Denmark_swiginit(self, _QuantExt.new_Denmark())
    __swig_destroy__ = _QuantExt.delete_Denmark

# Register Denmark in _QuantExt:
_QuantExt.Denmark_swigregister(Denmark)

class Finland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Finland_swiginit(self, _QuantExt.new_Finland())
    __swig_destroy__ = _QuantExt.delete_Finland

# Register Finland in _QuantExt:
_QuantExt.Finland_swigregister(Finland)

class Germany(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Germany_Settlement
    FrankfurtStockExchange = _QuantExt.Germany_FrankfurtStockExchange
    Xetra = _QuantExt.Germany_Xetra
    Eurex = _QuantExt.Germany_Eurex

    def __init__(self, *args):
        _QuantExt.Germany_swiginit(self, _QuantExt.new_Germany(*args))
    __swig_destroy__ = _QuantExt.delete_Germany

# Register Germany in _QuantExt:
_QuantExt.Germany_swigregister(Germany)

class HongKong(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HKEx = _QuantExt.HongKong_HKEx

    def __init__(self, *args):
        _QuantExt.HongKong_swiginit(self, _QuantExt.new_HongKong(*args))
    __swig_destroy__ = _QuantExt.delete_HongKong

# Register HongKong in _QuantExt:
_QuantExt.HongKong_swigregister(HongKong)

class Hungary(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Hungary_swiginit(self, _QuantExt.new_Hungary())
    __swig_destroy__ = _QuantExt.delete_Hungary

# Register Hungary in _QuantExt:
_QuantExt.Hungary_swigregister(Hungary)

class Iceland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ICEX = _QuantExt.Iceland_ICEX

    def __init__(self, *args):
        _QuantExt.Iceland_swiginit(self, _QuantExt.new_Iceland(*args))
    __swig_destroy__ = _QuantExt.delete_Iceland

# Register Iceland in _QuantExt:
_QuantExt.Iceland_swigregister(Iceland)

class India(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NSE = _QuantExt.India_NSE

    def __init__(self, *args):
        _QuantExt.India_swiginit(self, _QuantExt.new_India(*args))
    __swig_destroy__ = _QuantExt.delete_India

# Register India in _QuantExt:
_QuantExt.India_swigregister(India)

class Indonesia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BEJ = _QuantExt.Indonesia_BEJ
    JSX = _QuantExt.Indonesia_JSX

    def __init__(self, *args):
        _QuantExt.Indonesia_swiginit(self, _QuantExt.new_Indonesia(*args))
    __swig_destroy__ = _QuantExt.delete_Indonesia

# Register Indonesia in _QuantExt:
_QuantExt.Indonesia_swigregister(Indonesia)

class Israel(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Israel_Settlement
    TASE = _QuantExt.Israel_TASE

    def __init__(self, *args):
        _QuantExt.Israel_swiginit(self, _QuantExt.new_Israel(*args))
    __swig_destroy__ = _QuantExt.delete_Israel

# Register Israel in _QuantExt:
_QuantExt.Israel_swigregister(Israel)

class Italy(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Italy_Settlement
    Exchange = _QuantExt.Italy_Exchange

    def __init__(self, *args):
        _QuantExt.Italy_swiginit(self, _QuantExt.new_Italy(*args))
    __swig_destroy__ = _QuantExt.delete_Italy

# Register Italy in _QuantExt:
_QuantExt.Italy_swigregister(Italy)

class Japan(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Japan_swiginit(self, _QuantExt.new_Japan())
    __swig_destroy__ = _QuantExt.delete_Japan

# Register Japan in _QuantExt:
_QuantExt.Japan_swigregister(Japan)

class Mexico(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BMV = _QuantExt.Mexico_BMV

    def __init__(self, *args):
        _QuantExt.Mexico_swiginit(self, _QuantExt.new_Mexico(*args))
    __swig_destroy__ = _QuantExt.delete_Mexico

# Register Mexico in _QuantExt:
_QuantExt.Mexico_swigregister(Mexico)

class NewZealand(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NewZealand_swiginit(self, _QuantExt.new_NewZealand())
    __swig_destroy__ = _QuantExt.delete_NewZealand

# Register NewZealand in _QuantExt:
_QuantExt.NewZealand_swigregister(NewZealand)

class Norway(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Norway_swiginit(self, _QuantExt.new_Norway())
    __swig_destroy__ = _QuantExt.delete_Norway

# Register Norway in _QuantExt:
_QuantExt.Norway_swigregister(Norway)

class Poland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Poland_swiginit(self, _QuantExt.new_Poland())
    __swig_destroy__ = _QuantExt.delete_Poland

# Register Poland in _QuantExt:
_QuantExt.Poland_swigregister(Poland)

class Russia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.Russia_Settlement
    MOEX = _QuantExt.Russia_MOEX

    def __init__(self, *args):
        _QuantExt.Russia_swiginit(self, _QuantExt.new_Russia(*args))
    __swig_destroy__ = _QuantExt.delete_Russia

# Register Russia in _QuantExt:
_QuantExt.Russia_swigregister(Russia)

class Romania(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Romania_swiginit(self, _QuantExt.new_Romania())
    __swig_destroy__ = _QuantExt.delete_Romania

# Register Romania in _QuantExt:
_QuantExt.Romania_swigregister(Romania)

class SaudiArabia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Tadawul = _QuantExt.SaudiArabia_Tadawul

    def __init__(self, *args):
        _QuantExt.SaudiArabia_swiginit(self, _QuantExt.new_SaudiArabia(*args))
    __swig_destroy__ = _QuantExt.delete_SaudiArabia

# Register SaudiArabia in _QuantExt:
_QuantExt.SaudiArabia_swigregister(SaudiArabia)

class Singapore(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SGX = _QuantExt.Singapore_SGX

    def __init__(self, *args):
        _QuantExt.Singapore_swiginit(self, _QuantExt.new_Singapore(*args))
    __swig_destroy__ = _QuantExt.delete_Singapore

# Register Singapore in _QuantExt:
_QuantExt.Singapore_swigregister(Singapore)

class Slovakia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BSSE = _QuantExt.Slovakia_BSSE

    def __init__(self, *args):
        _QuantExt.Slovakia_swiginit(self, _QuantExt.new_Slovakia(*args))
    __swig_destroy__ = _QuantExt.delete_Slovakia

# Register Slovakia in _QuantExt:
_QuantExt.Slovakia_swigregister(Slovakia)

class SouthAfrica(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SouthAfrica_swiginit(self, _QuantExt.new_SouthAfrica())
    __swig_destroy__ = _QuantExt.delete_SouthAfrica

# Register SouthAfrica in _QuantExt:
_QuantExt.SouthAfrica_swigregister(SouthAfrica)

class SouthKorea(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.SouthKorea_Settlement
    KRX = _QuantExt.SouthKorea_KRX

    def __init__(self, *args):
        _QuantExt.SouthKorea_swiginit(self, _QuantExt.new_SouthKorea(*args))
    __swig_destroy__ = _QuantExt.delete_SouthKorea

# Register SouthKorea in _QuantExt:
_QuantExt.SouthKorea_swigregister(SouthKorea)

class Sweden(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Sweden_swiginit(self, _QuantExt.new_Sweden())
    __swig_destroy__ = _QuantExt.delete_Sweden

# Register Sweden in _QuantExt:
_QuantExt.Sweden_swigregister(Sweden)

class Switzerland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Switzerland_swiginit(self, _QuantExt.new_Switzerland())
    __swig_destroy__ = _QuantExt.delete_Switzerland

# Register Switzerland in _QuantExt:
_QuantExt.Switzerland_swigregister(Switzerland)

class Taiwan(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TSEC = _QuantExt.Taiwan_TSEC

    def __init__(self, *args):
        _QuantExt.Taiwan_swiginit(self, _QuantExt.new_Taiwan(*args))
    __swig_destroy__ = _QuantExt.delete_Taiwan

# Register Taiwan in _QuantExt:
_QuantExt.Taiwan_swigregister(Taiwan)

class TARGET(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TARGET_swiginit(self, _QuantExt.new_TARGET())
    __swig_destroy__ = _QuantExt.delete_TARGET

# Register TARGET in _QuantExt:
_QuantExt.TARGET_swigregister(TARGET)

class Thailand(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Thailand_swiginit(self, _QuantExt.new_Thailand())
    __swig_destroy__ = _QuantExt.delete_Thailand

# Register Thailand in _QuantExt:
_QuantExt.Thailand_swigregister(Thailand)

class Turkey(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Turkey_swiginit(self, _QuantExt.new_Turkey())
    __swig_destroy__ = _QuantExt.delete_Turkey

# Register Turkey in _QuantExt:
_QuantExt.Turkey_swigregister(Turkey)

class Ukraine(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USE = _QuantExt.Ukraine_USE

    def __init__(self, *args):
        _QuantExt.Ukraine_swiginit(self, _QuantExt.new_Ukraine(*args))
    __swig_destroy__ = _QuantExt.delete_Ukraine

# Register Ukraine in _QuantExt:
_QuantExt.Ukraine_swigregister(Ukraine)

class UnitedKingdom(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.UnitedKingdom_Settlement
    Exchange = _QuantExt.UnitedKingdom_Exchange
    Metals = _QuantExt.UnitedKingdom_Metals

    def __init__(self, *args):
        _QuantExt.UnitedKingdom_swiginit(self, _QuantExt.new_UnitedKingdom(*args))
    __swig_destroy__ = _QuantExt.delete_UnitedKingdom

# Register UnitedKingdom in _QuantExt:
_QuantExt.UnitedKingdom_swigregister(UnitedKingdom)

class UnitedStates(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _QuantExt.UnitedStates_Settlement
    NYSE = _QuantExt.UnitedStates_NYSE
    GovernmentBond = _QuantExt.UnitedStates_GovernmentBond
    NERC = _QuantExt.UnitedStates_NERC
    LiborImpact = _QuantExt.UnitedStates_LiborImpact
    FederalReserve = _QuantExt.UnitedStates_FederalReserve

    def __init__(self, *args):
        _QuantExt.UnitedStates_swiginit(self, _QuantExt.new_UnitedStates(*args))
    __swig_destroy__ = _QuantExt.delete_UnitedStates

# Register UnitedStates in _QuantExt:
_QuantExt.UnitedStates_swigregister(UnitedStates)

class NullCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NullCalendar_swiginit(self, _QuantExt.new_NullCalendar())
    __swig_destroy__ = _QuantExt.delete_NullCalendar

# Register NullCalendar in _QuantExt:
_QuantExt.NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.WeekendsOnly_swiginit(self, _QuantExt.new_WeekendsOnly())
    __swig_destroy__ = _QuantExt.delete_WeekendsOnly

# Register WeekendsOnly in _QuantExt:
_QuantExt.WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.JointCalendar_swiginit(self, _QuantExt.new_JointCalendar(*args))
    __swig_destroy__ = _QuantExt.delete_JointCalendar

# Register JointCalendar in _QuantExt:
_QuantExt.JointCalendar_swigregister(JointCalendar)

class BespokeCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &"):
        _QuantExt.BespokeCalendar_swiginit(self, _QuantExt.new_BespokeCalendar(name))

    def addWeekend(self, arg2: "Weekday") -> "void":
        return _QuantExt.BespokeCalendar_addWeekend(self, arg2)
    __swig_destroy__ = _QuantExt.delete_BespokeCalendar

# Register BespokeCalendar in _QuantExt:
_QuantExt.BespokeCalendar_swigregister(BespokeCalendar)


def nullInt() -> "int":
    return _QuantExt.nullInt()

def nullDouble() -> "double":
    return _QuantExt.nullDouble()
class DayCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1: "Date", d2: "Date") -> "BigInteger":
        return _QuantExt.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args) -> "Time":
        return _QuantExt.DayCounter_yearFraction(self, *args)

    def name(self) -> "std::string":
        return _QuantExt.DayCounter_name(self)

    def __str__(self) -> "std::string":
        return _QuantExt.DayCounter___str__(self)

    def __eq__(self, other: "DayCounter") -> "bool":
        return _QuantExt.DayCounter___eq__(self, other)

    def __ne__(self, other: "DayCounter") -> "bool":
        return _QuantExt.DayCounter___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantExt.delete_DayCounter

# Register DayCounter in _QuantExt:
_QuantExt.DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay: "bool const"=False):
        _QuantExt.Actual360_swiginit(self, _QuantExt.new_Actual360(includeLastDay))
    __swig_destroy__ = _QuantExt.delete_Actual360

# Register Actual360 in _QuantExt:
_QuantExt.Actual360_swigregister(Actual360)

class Actual365Fixed(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Standard = _QuantExt.Actual365Fixed_Standard
    Canadian = _QuantExt.Actual365Fixed_Canadian
    NoLeap = _QuantExt.Actual365Fixed_NoLeap

    def __init__(self, *args):
        _QuantExt.Actual365Fixed_swiginit(self, _QuantExt.new_Actual365Fixed(*args))
    __swig_destroy__ = _QuantExt.delete_Actual365Fixed

# Register Actual365Fixed in _QuantExt:
_QuantExt.Actual365Fixed_swigregister(Actual365Fixed)

class Thirty360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USA = _QuantExt.Thirty360_USA
    BondBasis = _QuantExt.Thirty360_BondBasis
    European = _QuantExt.Thirty360_European
    EurobondBasis = _QuantExt.Thirty360_EurobondBasis
    Italian = _QuantExt.Thirty360_Italian

    def __init__(self, *args):
        _QuantExt.Thirty360_swiginit(self, _QuantExt.new_Thirty360(*args))
    __swig_destroy__ = _QuantExt.delete_Thirty360

# Register Thirty360 in _QuantExt:
_QuantExt.Thirty360_swigregister(Thirty360)

class ActualActual(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISMA = _QuantExt.ActualActual_ISMA
    Bond = _QuantExt.ActualActual_Bond
    ISDA = _QuantExt.ActualActual_ISDA
    Historical = _QuantExt.ActualActual_Historical
    Actual365 = _QuantExt.ActualActual_Actual365
    AFB = _QuantExt.ActualActual_AFB
    Euro = _QuantExt.ActualActual_Euro

    def __init__(self, *args):
        _QuantExt.ActualActual_swiginit(self, _QuantExt.new_ActualActual(*args))
    __swig_destroy__ = _QuantExt.delete_ActualActual

# Register ActualActual in _QuantExt:
_QuantExt.ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.OneDayCounter_swiginit(self, _QuantExt.new_OneDayCounter())
    __swig_destroy__ = _QuantExt.delete_OneDayCounter

# Register OneDayCounter in _QuantExt:
_QuantExt.OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SimpleDayCounter_swiginit(self, _QuantExt.new_SimpleDayCounter())
    __swig_destroy__ = _QuantExt.delete_SimpleDayCounter

# Register SimpleDayCounter in _QuantExt:
_QuantExt.SimpleDayCounter_swigregister(SimpleDayCounter)

class Business252(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Business252_swiginit(self, _QuantExt.new_Business252(*args))
    __swig_destroy__ = _QuantExt.delete_Business252

# Register Business252 in _QuantExt:
_QuantExt.Business252_swigregister(Business252)


def Actual365NoLeap() -> "DayCounter":
    return _QuantExt.Actual365NoLeap()
Simple = _QuantExt.Simple
Compounded = _QuantExt.Compounded
Continuous = _QuantExt.Continuous
SimpleThenCompounded = _QuantExt.SimpleThenCompounded
CompoundedThenSimple = _QuantExt.CompoundedThenSimple
class InterestRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.InterestRate_swiginit(self, _QuantExt.new_InterestRate(*args))

    def rate(self) -> "Rate":
        return _QuantExt.InterestRate_rate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.InterestRate_dayCounter(self)

    def compounding(self) -> "Compounding":
        return _QuantExt.InterestRate_compounding(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.InterestRate_frequency(self)

    def discountFactor(self, *args) -> "DiscountFactor":
        return _QuantExt.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args) -> "Real":
        return _QuantExt.InterestRate_compoundFactor(self, *args)

    @staticmethod
    def impliedRate(*args) -> "InterestRate":
        return _QuantExt.InterestRate_impliedRate(*args)

    def equivalentRate(self, *args) -> "InterestRate":
        return _QuantExt.InterestRate_equivalentRate(self, *args)

    def __str__(self) -> "std::string":
        return _QuantExt.InterestRate___str__(self)
    __swig_destroy__ = _QuantExt.delete_InterestRate

# Register InterestRate in _QuantExt:
_QuantExt.InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args) -> "InterestRate":
    return _QuantExt.InterestRate_impliedRate(*args)

class InterestRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.InterestRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.InterestRateVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.InterestRateVector___bool__(self)

    def __len__(self) -> "std::vector< InterestRate >::size_type":
        return _QuantExt.InterestRateVector___len__(self)

    def __getslice__(self, i: "std::vector< InterestRate >::difference_type", j: "std::vector< InterestRate >::difference_type") -> "std::vector< InterestRate,std::allocator< InterestRate > > *":
        return _QuantExt.InterestRateVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.InterestRateVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< InterestRate >::difference_type", j: "std::vector< InterestRate >::difference_type") -> "void":
        return _QuantExt.InterestRateVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.InterestRateVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< InterestRate >::value_type const &":
        return _QuantExt.InterestRateVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.InterestRateVector___setitem__(self, *args)

    def pop(self) -> "std::vector< InterestRate >::value_type":
        return _QuantExt.InterestRateVector_pop(self)

    def append(self, x: "InterestRate") -> "void":
        return _QuantExt.InterestRateVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.InterestRateVector_empty(self)

    def size(self) -> "std::vector< InterestRate >::size_type":
        return _QuantExt.InterestRateVector_size(self)

    def swap(self, v: "InterestRateVector") -> "void":
        return _QuantExt.InterestRateVector_swap(self, v)

    def begin(self) -> "std::vector< InterestRate >::iterator":
        return _QuantExt.InterestRateVector_begin(self)

    def end(self) -> "std::vector< InterestRate >::iterator":
        return _QuantExt.InterestRateVector_end(self)

    def rbegin(self) -> "std::vector< InterestRate >::reverse_iterator":
        return _QuantExt.InterestRateVector_rbegin(self)

    def rend(self) -> "std::vector< InterestRate >::reverse_iterator":
        return _QuantExt.InterestRateVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.InterestRateVector_clear(self)

    def get_allocator(self) -> "std::vector< InterestRate >::allocator_type":
        return _QuantExt.InterestRateVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.InterestRateVector_pop_back(self)

    def erase(self, *args) -> "std::vector< InterestRate >::iterator":
        return _QuantExt.InterestRateVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.InterestRateVector_swiginit(self, _QuantExt.new_InterestRateVector(*args))

    def push_back(self, x: "InterestRate") -> "void":
        return _QuantExt.InterestRateVector_push_back(self, x)

    def front(self) -> "std::vector< InterestRate >::value_type const &":
        return _QuantExt.InterestRateVector_front(self)

    def back(self) -> "std::vector< InterestRate >::value_type const &":
        return _QuantExt.InterestRateVector_back(self)

    def assign(self, n: "std::vector< InterestRate >::size_type", x: "InterestRate") -> "void":
        return _QuantExt.InterestRateVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.InterestRateVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.InterestRateVector_insert(self, *args)

    def reserve(self, n: "std::vector< InterestRate >::size_type") -> "void":
        return _QuantExt.InterestRateVector_reserve(self, n)

    def capacity(self) -> "std::vector< InterestRate >::size_type":
        return _QuantExt.InterestRateVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_InterestRateVector

# Register InterestRateVector in _QuantExt:
_QuantExt.InterestRateVector_swigregister(InterestRateVector)

class Rounding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Rounding_swiginit(self, _QuantExt.new_Rounding())

    def __call__(self, value: "Decimal") -> "Decimal":
        return _QuantExt.Rounding___call__(self, value)
    __swig_destroy__ = _QuantExt.delete_Rounding

# Register Rounding in _QuantExt:
_QuantExt.Rounding_swigregister(Rounding)

class UpRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision: "Integer", digit: "Integer"=5):
        _QuantExt.UpRounding_swiginit(self, _QuantExt.new_UpRounding(precision, digit))
    __swig_destroy__ = _QuantExt.delete_UpRounding

# Register UpRounding in _QuantExt:
_QuantExt.UpRounding_swigregister(UpRounding)

class DownRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision: "Integer", digit: "Integer"=5):
        _QuantExt.DownRounding_swiginit(self, _QuantExt.new_DownRounding(precision, digit))
    __swig_destroy__ = _QuantExt.delete_DownRounding

# Register DownRounding in _QuantExt:
_QuantExt.DownRounding_swigregister(DownRounding)

class ClosestRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision: "Integer", digit: "Integer"=5):
        _QuantExt.ClosestRounding_swiginit(self, _QuantExt.new_ClosestRounding(precision, digit))
    __swig_destroy__ = _QuantExt.delete_ClosestRounding

# Register ClosestRounding in _QuantExt:
_QuantExt.ClosestRounding_swigregister(ClosestRounding)

class CeilingTruncation(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision: "Integer", digit: "Integer"=5):
        _QuantExt.CeilingTruncation_swiginit(self, _QuantExt.new_CeilingTruncation(precision, digit))
    __swig_destroy__ = _QuantExt.delete_CeilingTruncation

# Register CeilingTruncation in _QuantExt:
_QuantExt.CeilingTruncation_swigregister(CeilingTruncation)

class FloorTruncation(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision: "Integer", digit: "Integer"=5):
        _QuantExt.FloorTruncation_swiginit(self, _QuantExt.new_FloorTruncation(precision, digit))
    __swig_destroy__ = _QuantExt.delete_FloorTruncation

# Register FloorTruncation in _QuantExt:
_QuantExt.FloorTruncation_swigregister(FloorTruncation)

class Currency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def name(self) -> "std::string const &":
        return _QuantExt.Currency_name(self)

    def code(self) -> "std::string const &":
        return _QuantExt.Currency_code(self)

    def numericCode(self) -> "Integer":
        return _QuantExt.Currency_numericCode(self)

    def symbol(self) -> "std::string const &":
        return _QuantExt.Currency_symbol(self)

    def fractionSymbol(self) -> "std::string const &":
        return _QuantExt.Currency_fractionSymbol(self)

    def fractionsPerUnit(self) -> "Integer":
        return _QuantExt.Currency_fractionsPerUnit(self)

    def rounding(self) -> "Rounding const &":
        return _QuantExt.Currency_rounding(self)

    def format(self) -> "std::string":
        return _QuantExt.Currency_format(self)

    def empty(self) -> "bool":
        return _QuantExt.Currency_empty(self)

    def triangulationCurrency(self) -> "Currency const &":
        return _QuantExt.Currency_triangulationCurrency(self)

    def __str__(self) -> "std::string":
        return _QuantExt.Currency___str__(self)

    def __eq__(self, other: "Currency") -> "bool":
        return _QuantExt.Currency___eq__(self, other)

    def __ne__(self, other: "Currency") -> "bool":
        return _QuantExt.Currency___ne__(self, other)

    def __mul__(self, x: "Decimal") -> "Money":
        return _QuantExt.Currency___mul__(self, x)

    def __rmul__(self, x: "Decimal") -> "Money":
        return _QuantExt.Currency___rmul__(self, x)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Currency___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Currency___bool__(self)

    def __hash__(self):
        return hash(self.name())


    def __init__(self):
        _QuantExt.Currency_swiginit(self, _QuantExt.new_Currency())
    __swig_destroy__ = _QuantExt.delete_Currency

# Register Currency in _QuantExt:
_QuantExt.Currency_swigregister(Currency)

class ARSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ARSCurrency_swiginit(self, _QuantExt.new_ARSCurrency())
    __swig_destroy__ = _QuantExt.delete_ARSCurrency

# Register ARSCurrency in _QuantExt:
_QuantExt.ARSCurrency_swigregister(ARSCurrency)

class ATSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ATSCurrency_swiginit(self, _QuantExt.new_ATSCurrency())
    __swig_destroy__ = _QuantExt.delete_ATSCurrency

# Register ATSCurrency in _QuantExt:
_QuantExt.ATSCurrency_swigregister(ATSCurrency)

class AUDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.AUDCurrency_swiginit(self, _QuantExt.new_AUDCurrency())
    __swig_destroy__ = _QuantExt.delete_AUDCurrency

# Register AUDCurrency in _QuantExt:
_QuantExt.AUDCurrency_swigregister(AUDCurrency)

class BDTCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BDTCurrency_swiginit(self, _QuantExt.new_BDTCurrency())
    __swig_destroy__ = _QuantExt.delete_BDTCurrency

# Register BDTCurrency in _QuantExt:
_QuantExt.BDTCurrency_swigregister(BDTCurrency)

class BEFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BEFCurrency_swiginit(self, _QuantExt.new_BEFCurrency())
    __swig_destroy__ = _QuantExt.delete_BEFCurrency

# Register BEFCurrency in _QuantExt:
_QuantExt.BEFCurrency_swigregister(BEFCurrency)

class BGLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BGLCurrency_swiginit(self, _QuantExt.new_BGLCurrency())
    __swig_destroy__ = _QuantExt.delete_BGLCurrency

# Register BGLCurrency in _QuantExt:
_QuantExt.BGLCurrency_swigregister(BGLCurrency)

class BRLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BRLCurrency_swiginit(self, _QuantExt.new_BRLCurrency())
    __swig_destroy__ = _QuantExt.delete_BRLCurrency

# Register BRLCurrency in _QuantExt:
_QuantExt.BRLCurrency_swigregister(BRLCurrency)

class BYRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BYRCurrency_swiginit(self, _QuantExt.new_BYRCurrency())
    __swig_destroy__ = _QuantExt.delete_BYRCurrency

# Register BYRCurrency in _QuantExt:
_QuantExt.BYRCurrency_swigregister(BYRCurrency)

class CADCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CADCurrency_swiginit(self, _QuantExt.new_CADCurrency())
    __swig_destroy__ = _QuantExt.delete_CADCurrency

# Register CADCurrency in _QuantExt:
_QuantExt.CADCurrency_swigregister(CADCurrency)

class CHFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CHFCurrency_swiginit(self, _QuantExt.new_CHFCurrency())
    __swig_destroy__ = _QuantExt.delete_CHFCurrency

# Register CHFCurrency in _QuantExt:
_QuantExt.CHFCurrency_swigregister(CHFCurrency)

class CLPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CLPCurrency_swiginit(self, _QuantExt.new_CLPCurrency())
    __swig_destroy__ = _QuantExt.delete_CLPCurrency

# Register CLPCurrency in _QuantExt:
_QuantExt.CLPCurrency_swigregister(CLPCurrency)

class CNYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CNYCurrency_swiginit(self, _QuantExt.new_CNYCurrency())
    __swig_destroy__ = _QuantExt.delete_CNYCurrency

# Register CNYCurrency in _QuantExt:
_QuantExt.CNYCurrency_swigregister(CNYCurrency)

class COPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.COPCurrency_swiginit(self, _QuantExt.new_COPCurrency())
    __swig_destroy__ = _QuantExt.delete_COPCurrency

# Register COPCurrency in _QuantExt:
_QuantExt.COPCurrency_swigregister(COPCurrency)

class CYPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CYPCurrency_swiginit(self, _QuantExt.new_CYPCurrency())
    __swig_destroy__ = _QuantExt.delete_CYPCurrency

# Register CYPCurrency in _QuantExt:
_QuantExt.CYPCurrency_swigregister(CYPCurrency)

class CZKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CZKCurrency_swiginit(self, _QuantExt.new_CZKCurrency())
    __swig_destroy__ = _QuantExt.delete_CZKCurrency

# Register CZKCurrency in _QuantExt:
_QuantExt.CZKCurrency_swigregister(CZKCurrency)

class DEMCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.DEMCurrency_swiginit(self, _QuantExt.new_DEMCurrency())
    __swig_destroy__ = _QuantExt.delete_DEMCurrency

# Register DEMCurrency in _QuantExt:
_QuantExt.DEMCurrency_swigregister(DEMCurrency)

class DKKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.DKKCurrency_swiginit(self, _QuantExt.new_DKKCurrency())
    __swig_destroy__ = _QuantExt.delete_DKKCurrency

# Register DKKCurrency in _QuantExt:
_QuantExt.DKKCurrency_swigregister(DKKCurrency)

class EEKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.EEKCurrency_swiginit(self, _QuantExt.new_EEKCurrency())
    __swig_destroy__ = _QuantExt.delete_EEKCurrency

# Register EEKCurrency in _QuantExt:
_QuantExt.EEKCurrency_swigregister(EEKCurrency)

class ESPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ESPCurrency_swiginit(self, _QuantExt.new_ESPCurrency())
    __swig_destroy__ = _QuantExt.delete_ESPCurrency

# Register ESPCurrency in _QuantExt:
_QuantExt.ESPCurrency_swigregister(ESPCurrency)

class EURCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.EURCurrency_swiginit(self, _QuantExt.new_EURCurrency())
    __swig_destroy__ = _QuantExt.delete_EURCurrency

# Register EURCurrency in _QuantExt:
_QuantExt.EURCurrency_swigregister(EURCurrency)

class FIMCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.FIMCurrency_swiginit(self, _QuantExt.new_FIMCurrency())
    __swig_destroy__ = _QuantExt.delete_FIMCurrency

# Register FIMCurrency in _QuantExt:
_QuantExt.FIMCurrency_swigregister(FIMCurrency)

class FRFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.FRFCurrency_swiginit(self, _QuantExt.new_FRFCurrency())
    __swig_destroy__ = _QuantExt.delete_FRFCurrency

# Register FRFCurrency in _QuantExt:
_QuantExt.FRFCurrency_swigregister(FRFCurrency)

class GBPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.GBPCurrency_swiginit(self, _QuantExt.new_GBPCurrency())
    __swig_destroy__ = _QuantExt.delete_GBPCurrency

# Register GBPCurrency in _QuantExt:
_QuantExt.GBPCurrency_swigregister(GBPCurrency)

class GRDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.GRDCurrency_swiginit(self, _QuantExt.new_GRDCurrency())
    __swig_destroy__ = _QuantExt.delete_GRDCurrency

# Register GRDCurrency in _QuantExt:
_QuantExt.GRDCurrency_swigregister(GRDCurrency)

class HKDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.HKDCurrency_swiginit(self, _QuantExt.new_HKDCurrency())
    __swig_destroy__ = _QuantExt.delete_HKDCurrency

# Register HKDCurrency in _QuantExt:
_QuantExt.HKDCurrency_swigregister(HKDCurrency)

class HUFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.HUFCurrency_swiginit(self, _QuantExt.new_HUFCurrency())
    __swig_destroy__ = _QuantExt.delete_HUFCurrency

# Register HUFCurrency in _QuantExt:
_QuantExt.HUFCurrency_swigregister(HUFCurrency)

class IEPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.IEPCurrency_swiginit(self, _QuantExt.new_IEPCurrency())
    __swig_destroy__ = _QuantExt.delete_IEPCurrency

# Register IEPCurrency in _QuantExt:
_QuantExt.IEPCurrency_swigregister(IEPCurrency)

class IDRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.IDRCurrency_swiginit(self, _QuantExt.new_IDRCurrency())
    __swig_destroy__ = _QuantExt.delete_IDRCurrency

# Register IDRCurrency in _QuantExt:
_QuantExt.IDRCurrency_swigregister(IDRCurrency)

class ILSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ILSCurrency_swiginit(self, _QuantExt.new_ILSCurrency())
    __swig_destroy__ = _QuantExt.delete_ILSCurrency

# Register ILSCurrency in _QuantExt:
_QuantExt.ILSCurrency_swigregister(ILSCurrency)

class INRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.INRCurrency_swiginit(self, _QuantExt.new_INRCurrency())
    __swig_destroy__ = _QuantExt.delete_INRCurrency

# Register INRCurrency in _QuantExt:
_QuantExt.INRCurrency_swigregister(INRCurrency)

class IQDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.IQDCurrency_swiginit(self, _QuantExt.new_IQDCurrency())
    __swig_destroy__ = _QuantExt.delete_IQDCurrency

# Register IQDCurrency in _QuantExt:
_QuantExt.IQDCurrency_swigregister(IQDCurrency)

class IRRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.IRRCurrency_swiginit(self, _QuantExt.new_IRRCurrency())
    __swig_destroy__ = _QuantExt.delete_IRRCurrency

# Register IRRCurrency in _QuantExt:
_QuantExt.IRRCurrency_swigregister(IRRCurrency)

class ISKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ISKCurrency_swiginit(self, _QuantExt.new_ISKCurrency())
    __swig_destroy__ = _QuantExt.delete_ISKCurrency

# Register ISKCurrency in _QuantExt:
_QuantExt.ISKCurrency_swigregister(ISKCurrency)

class ITLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ITLCurrency_swiginit(self, _QuantExt.new_ITLCurrency())
    __swig_destroy__ = _QuantExt.delete_ITLCurrency

# Register ITLCurrency in _QuantExt:
_QuantExt.ITLCurrency_swigregister(ITLCurrency)

class JPYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.JPYCurrency_swiginit(self, _QuantExt.new_JPYCurrency())
    __swig_destroy__ = _QuantExt.delete_JPYCurrency

# Register JPYCurrency in _QuantExt:
_QuantExt.JPYCurrency_swigregister(JPYCurrency)

class KRWCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.KRWCurrency_swiginit(self, _QuantExt.new_KRWCurrency())
    __swig_destroy__ = _QuantExt.delete_KRWCurrency

# Register KRWCurrency in _QuantExt:
_QuantExt.KRWCurrency_swigregister(KRWCurrency)

class KWDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.KWDCurrency_swiginit(self, _QuantExt.new_KWDCurrency())
    __swig_destroy__ = _QuantExt.delete_KWDCurrency

# Register KWDCurrency in _QuantExt:
_QuantExt.KWDCurrency_swigregister(KWDCurrency)

class LTLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.LTLCurrency_swiginit(self, _QuantExt.new_LTLCurrency())
    __swig_destroy__ = _QuantExt.delete_LTLCurrency

# Register LTLCurrency in _QuantExt:
_QuantExt.LTLCurrency_swigregister(LTLCurrency)

class LUFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.LUFCurrency_swiginit(self, _QuantExt.new_LUFCurrency())
    __swig_destroy__ = _QuantExt.delete_LUFCurrency

# Register LUFCurrency in _QuantExt:
_QuantExt.LUFCurrency_swigregister(LUFCurrency)

class LVLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.LVLCurrency_swiginit(self, _QuantExt.new_LVLCurrency())
    __swig_destroy__ = _QuantExt.delete_LVLCurrency

# Register LVLCurrency in _QuantExt:
_QuantExt.LVLCurrency_swigregister(LVLCurrency)

class MTLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MTLCurrency_swiginit(self, _QuantExt.new_MTLCurrency())
    __swig_destroy__ = _QuantExt.delete_MTLCurrency

# Register MTLCurrency in _QuantExt:
_QuantExt.MTLCurrency_swigregister(MTLCurrency)

class MXNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MXNCurrency_swiginit(self, _QuantExt.new_MXNCurrency())
    __swig_destroy__ = _QuantExt.delete_MXNCurrency

# Register MXNCurrency in _QuantExt:
_QuantExt.MXNCurrency_swigregister(MXNCurrency)

class MYRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MYRCurrency_swiginit(self, _QuantExt.new_MYRCurrency())
    __swig_destroy__ = _QuantExt.delete_MYRCurrency

# Register MYRCurrency in _QuantExt:
_QuantExt.MYRCurrency_swigregister(MYRCurrency)

class NLGCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NLGCurrency_swiginit(self, _QuantExt.new_NLGCurrency())
    __swig_destroy__ = _QuantExt.delete_NLGCurrency

# Register NLGCurrency in _QuantExt:
_QuantExt.NLGCurrency_swigregister(NLGCurrency)

class NOKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NOKCurrency_swiginit(self, _QuantExt.new_NOKCurrency())
    __swig_destroy__ = _QuantExt.delete_NOKCurrency

# Register NOKCurrency in _QuantExt:
_QuantExt.NOKCurrency_swigregister(NOKCurrency)

class NPRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NPRCurrency_swiginit(self, _QuantExt.new_NPRCurrency())
    __swig_destroy__ = _QuantExt.delete_NPRCurrency

# Register NPRCurrency in _QuantExt:
_QuantExt.NPRCurrency_swigregister(NPRCurrency)

class NZDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NZDCurrency_swiginit(self, _QuantExt.new_NZDCurrency())
    __swig_destroy__ = _QuantExt.delete_NZDCurrency

# Register NZDCurrency in _QuantExt:
_QuantExt.NZDCurrency_swigregister(NZDCurrency)

class PEHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PEHCurrency_swiginit(self, _QuantExt.new_PEHCurrency())
    __swig_destroy__ = _QuantExt.delete_PEHCurrency

# Register PEHCurrency in _QuantExt:
_QuantExt.PEHCurrency_swigregister(PEHCurrency)

class PEICurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PEICurrency_swiginit(self, _QuantExt.new_PEICurrency())
    __swig_destroy__ = _QuantExt.delete_PEICurrency

# Register PEICurrency in _QuantExt:
_QuantExt.PEICurrency_swigregister(PEICurrency)

class PENCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PENCurrency_swiginit(self, _QuantExt.new_PENCurrency())
    __swig_destroy__ = _QuantExt.delete_PENCurrency

# Register PENCurrency in _QuantExt:
_QuantExt.PENCurrency_swigregister(PENCurrency)

class PKRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PKRCurrency_swiginit(self, _QuantExt.new_PKRCurrency())
    __swig_destroy__ = _QuantExt.delete_PKRCurrency

# Register PKRCurrency in _QuantExt:
_QuantExt.PKRCurrency_swigregister(PKRCurrency)

class PLNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PLNCurrency_swiginit(self, _QuantExt.new_PLNCurrency())
    __swig_destroy__ = _QuantExt.delete_PLNCurrency

# Register PLNCurrency in _QuantExt:
_QuantExt.PLNCurrency_swigregister(PLNCurrency)

class PTECurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PTECurrency_swiginit(self, _QuantExt.new_PTECurrency())
    __swig_destroy__ = _QuantExt.delete_PTECurrency

# Register PTECurrency in _QuantExt:
_QuantExt.PTECurrency_swigregister(PTECurrency)

class ROLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ROLCurrency_swiginit(self, _QuantExt.new_ROLCurrency())
    __swig_destroy__ = _QuantExt.delete_ROLCurrency

# Register ROLCurrency in _QuantExt:
_QuantExt.ROLCurrency_swigregister(ROLCurrency)

class RONCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.RONCurrency_swiginit(self, _QuantExt.new_RONCurrency())
    __swig_destroy__ = _QuantExt.delete_RONCurrency

# Register RONCurrency in _QuantExt:
_QuantExt.RONCurrency_swigregister(RONCurrency)

class RUBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.RUBCurrency_swiginit(self, _QuantExt.new_RUBCurrency())
    __swig_destroy__ = _QuantExt.delete_RUBCurrency

# Register RUBCurrency in _QuantExt:
_QuantExt.RUBCurrency_swigregister(RUBCurrency)

class SARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SARCurrency_swiginit(self, _QuantExt.new_SARCurrency())
    __swig_destroy__ = _QuantExt.delete_SARCurrency

# Register SARCurrency in _QuantExt:
_QuantExt.SARCurrency_swigregister(SARCurrency)

class SEKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SEKCurrency_swiginit(self, _QuantExt.new_SEKCurrency())
    __swig_destroy__ = _QuantExt.delete_SEKCurrency

# Register SEKCurrency in _QuantExt:
_QuantExt.SEKCurrency_swigregister(SEKCurrency)

class SGDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SGDCurrency_swiginit(self, _QuantExt.new_SGDCurrency())
    __swig_destroy__ = _QuantExt.delete_SGDCurrency

# Register SGDCurrency in _QuantExt:
_QuantExt.SGDCurrency_swigregister(SGDCurrency)

class SITCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SITCurrency_swiginit(self, _QuantExt.new_SITCurrency())
    __swig_destroy__ = _QuantExt.delete_SITCurrency

# Register SITCurrency in _QuantExt:
_QuantExt.SITCurrency_swigregister(SITCurrency)

class SKKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SKKCurrency_swiginit(self, _QuantExt.new_SKKCurrency())
    __swig_destroy__ = _QuantExt.delete_SKKCurrency

# Register SKKCurrency in _QuantExt:
_QuantExt.SKKCurrency_swigregister(SKKCurrency)

class THBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.THBCurrency_swiginit(self, _QuantExt.new_THBCurrency())
    __swig_destroy__ = _QuantExt.delete_THBCurrency

# Register THBCurrency in _QuantExt:
_QuantExt.THBCurrency_swigregister(THBCurrency)

class TRLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TRLCurrency_swiginit(self, _QuantExt.new_TRLCurrency())
    __swig_destroy__ = _QuantExt.delete_TRLCurrency

# Register TRLCurrency in _QuantExt:
_QuantExt.TRLCurrency_swigregister(TRLCurrency)

class TRYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TRYCurrency_swiginit(self, _QuantExt.new_TRYCurrency())
    __swig_destroy__ = _QuantExt.delete_TRYCurrency

# Register TRYCurrency in _QuantExt:
_QuantExt.TRYCurrency_swigregister(TRYCurrency)

class TTDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TTDCurrency_swiginit(self, _QuantExt.new_TTDCurrency())
    __swig_destroy__ = _QuantExt.delete_TTDCurrency

# Register TTDCurrency in _QuantExt:
_QuantExt.TTDCurrency_swigregister(TTDCurrency)

class TWDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TWDCurrency_swiginit(self, _QuantExt.new_TWDCurrency())
    __swig_destroy__ = _QuantExt.delete_TWDCurrency

# Register TWDCurrency in _QuantExt:
_QuantExt.TWDCurrency_swigregister(TWDCurrency)

class USDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.USDCurrency_swiginit(self, _QuantExt.new_USDCurrency())
    __swig_destroy__ = _QuantExt.delete_USDCurrency

# Register USDCurrency in _QuantExt:
_QuantExt.USDCurrency_swigregister(USDCurrency)

class VEBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.VEBCurrency_swiginit(self, _QuantExt.new_VEBCurrency())
    __swig_destroy__ = _QuantExt.delete_VEBCurrency

# Register VEBCurrency in _QuantExt:
_QuantExt.VEBCurrency_swigregister(VEBCurrency)

class VNDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.VNDCurrency_swiginit(self, _QuantExt.new_VNDCurrency())
    __swig_destroy__ = _QuantExt.delete_VNDCurrency

# Register VNDCurrency in _QuantExt:
_QuantExt.VNDCurrency_swigregister(VNDCurrency)

class ZARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZARCurrency_swiginit(self, _QuantExt.new_ZARCurrency())
    __swig_destroy__ = _QuantExt.delete_ZARCurrency

# Register ZARCurrency in _QuantExt:
_QuantExt.ZARCurrency_swigregister(ZARCurrency)

class LinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.LinearInterpolation_swiginit(self, _QuantExt.new_LinearInterpolation(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.LinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_LinearInterpolation

# Register LinearInterpolation in _QuantExt:
_QuantExt.LinearInterpolation_swigregister(LinearInterpolation)

class LogLinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.LogLinearInterpolation_swiginit(self, _QuantExt.new_LogLinearInterpolation(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.LogLinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_LogLinearInterpolation

# Register LogLinearInterpolation in _QuantExt:
_QuantExt.LogLinearInterpolation_swigregister(LogLinearInterpolation)

class BackwardFlatInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.BackwardFlatInterpolation_swiginit(self, _QuantExt.new_BackwardFlatInterpolation(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.BackwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_BackwardFlatInterpolation

# Register BackwardFlatInterpolation in _QuantExt:
_QuantExt.BackwardFlatInterpolation_swigregister(BackwardFlatInterpolation)

class ForwardFlatInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.ForwardFlatInterpolation_swiginit(self, _QuantExt.new_ForwardFlatInterpolation(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.ForwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_ForwardFlatInterpolation

# Register ForwardFlatInterpolation in _QuantExt:
_QuantExt.ForwardFlatInterpolation_swigregister(ForwardFlatInterpolation)

class CubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.CubicNaturalSpline_swiginit(self, _QuantExt.new_CubicNaturalSpline(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.CubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.CubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.CubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.CubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_CubicNaturalSpline

# Register CubicNaturalSpline in _QuantExt:
_QuantExt.CubicNaturalSpline_swigregister(CubicNaturalSpline)

class LogCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.LogCubicNaturalSpline_swiginit(self, _QuantExt.new_LogCubicNaturalSpline(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.LogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_LogCubicNaturalSpline

# Register LogCubicNaturalSpline in _QuantExt:
_QuantExt.LogCubicNaturalSpline_swigregister(LogCubicNaturalSpline)

class MonotonicCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.MonotonicCubicNaturalSpline_swiginit(self, _QuantExt.new_MonotonicCubicNaturalSpline(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.MonotonicCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_MonotonicCubicNaturalSpline

# Register MonotonicCubicNaturalSpline in _QuantExt:
_QuantExt.MonotonicCubicNaturalSpline_swigregister(MonotonicCubicNaturalSpline)

class MonotonicLogCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.MonotonicLogCubicNaturalSpline_swiginit(self, _QuantExt.new_MonotonicLogCubicNaturalSpline(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_MonotonicLogCubicNaturalSpline

# Register MonotonicLogCubicNaturalSpline in _QuantExt:
_QuantExt.MonotonicLogCubicNaturalSpline_swigregister(MonotonicLogCubicNaturalSpline)

class KrugerCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.KrugerCubic_swiginit(self, _QuantExt.new_KrugerCubic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.KrugerCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_KrugerCubic

# Register KrugerCubic in _QuantExt:
_QuantExt.KrugerCubic_swigregister(KrugerCubic)

class KrugerLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.KrugerLogCubic_swiginit(self, _QuantExt.new_KrugerLogCubic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.KrugerLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.KrugerLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_KrugerLogCubic

# Register KrugerLogCubic in _QuantExt:
_QuantExt.KrugerLogCubic_swigregister(KrugerLogCubic)

class FritschButlandCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.FritschButlandCubic_swiginit(self, _QuantExt.new_FritschButlandCubic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_FritschButlandCubic

# Register FritschButlandCubic in _QuantExt:
_QuantExt.FritschButlandCubic_swigregister(FritschButlandCubic)

class FritschButlandLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.FritschButlandLogCubic_swiginit(self, _QuantExt.new_FritschButlandLogCubic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.FritschButlandLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_FritschButlandLogCubic

# Register FritschButlandLogCubic in _QuantExt:
_QuantExt.FritschButlandLogCubic_swigregister(FritschButlandLogCubic)

class Parabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.Parabolic_swiginit(self, _QuantExt.new_Parabolic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.Parabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.Parabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.Parabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.Parabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_Parabolic

# Register Parabolic in _QuantExt:
_QuantExt.Parabolic_swigregister(Parabolic)

class LogParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.LogParabolic_swiginit(self, _QuantExt.new_LogParabolic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.LogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.LogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_LogParabolic

# Register LogParabolic in _QuantExt:
_QuantExt.LogParabolic_swigregister(LogParabolic)

class MonotonicParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.MonotonicParabolic_swiginit(self, _QuantExt.new_MonotonicParabolic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.MonotonicParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_MonotonicParabolic

# Register MonotonicParabolic in _QuantExt:
_QuantExt.MonotonicParabolic_swigregister(MonotonicParabolic)

class MonotonicLogParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array"):
        _QuantExt.MonotonicLogParabolic_swiginit(self, _QuantExt.new_MonotonicLogParabolic(x, y))

    def __call__(self, x: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x: "Real", extrapolate: "bool"=False) -> "Real":
        return _QuantExt.MonotonicLogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantExt.delete_MonotonicLogParabolic

# Register MonotonicLogParabolic in _QuantExt:
_QuantExt.MonotonicLogParabolic_swigregister(MonotonicLogParabolic)

class BilinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array", m: "Matrix"):
        _QuantExt.BilinearInterpolation_swiginit(self, _QuantExt.new_BilinearInterpolation(x, y, m))

    def __call__(self, x: "Real", y: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.BilinearInterpolation___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_BilinearInterpolation

# Register BilinearInterpolation in _QuantExt:
_QuantExt.BilinearInterpolation_swigregister(BilinearInterpolation)

class BicubicSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "Array", y: "Array", m: "Matrix"):
        _QuantExt.BicubicSpline_swiginit(self, _QuantExt.new_BicubicSpline(x, y, m))

    def __call__(self, x: "Real", y: "Real", allowExtrapolation: "bool"=False) -> "Real":
        return _QuantExt.BicubicSpline___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _QuantExt.delete_BicubicSpline

# Register BicubicSpline in _QuantExt:
_QuantExt.BicubicSpline_swigregister(BicubicSpline)

class BackwardFlat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BackwardFlat_swiginit(self, _QuantExt.new_BackwardFlat())
    __swig_destroy__ = _QuantExt.delete_BackwardFlat

# Register BackwardFlat in _QuantExt:
_QuantExt.BackwardFlat_swigregister(BackwardFlat)

class ForwardFlat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ForwardFlat_swiginit(self, _QuantExt.new_ForwardFlat())
    __swig_destroy__ = _QuantExt.delete_ForwardFlat

# Register ForwardFlat in _QuantExt:
_QuantExt.ForwardFlat_swigregister(ForwardFlat)

class Linear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Linear_swiginit(self, _QuantExt.new_Linear())
    __swig_destroy__ = _QuantExt.delete_Linear

# Register Linear in _QuantExt:
_QuantExt.Linear_swigregister(Linear)

class LogLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.LogLinear_swiginit(self, _QuantExt.new_LogLinear())
    __swig_destroy__ = _QuantExt.delete_LogLinear

# Register LogLinear in _QuantExt:
_QuantExt.LogLinear_swigregister(LogLinear)

class Cubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Cubic_swiginit(self, _QuantExt.new_Cubic())
    __swig_destroy__ = _QuantExt.delete_Cubic

# Register Cubic in _QuantExt:
_QuantExt.Cubic_swigregister(Cubic)

class MonotonicCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MonotonicCubic_swiginit(self, _QuantExt.new_MonotonicCubic())
    __swig_destroy__ = _QuantExt.delete_MonotonicCubic

# Register MonotonicCubic in _QuantExt:
_QuantExt.MonotonicCubic_swigregister(MonotonicCubic)

class DefaultLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.DefaultLogCubic_swiginit(self, _QuantExt.new_DefaultLogCubic())
    __swig_destroy__ = _QuantExt.delete_DefaultLogCubic

# Register DefaultLogCubic in _QuantExt:
_QuantExt.DefaultLogCubic_swigregister(DefaultLogCubic)

class MonotonicLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MonotonicLogCubic_swiginit(self, _QuantExt.new_MonotonicLogCubic())
    __swig_destroy__ = _QuantExt.delete_MonotonicLogCubic

# Register MonotonicLogCubic in _QuantExt:
_QuantExt.MonotonicLogCubic_swigregister(MonotonicLogCubic)

class SplineCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SplineCubic_swiginit(self, _QuantExt.new_SplineCubic())
    __swig_destroy__ = _QuantExt.delete_SplineCubic

# Register SplineCubic in _QuantExt:
_QuantExt.SplineCubic_swigregister(SplineCubic)

class YieldTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "YieldTermStructure *":
        return _QuantExt.YieldTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.YieldTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YieldTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.YieldTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.YieldTermStructure_swiginit(self, _QuantExt.new_YieldTermStructure())
    __swig_destroy__ = _QuantExt.delete_YieldTermStructure

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.YieldTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.YieldTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.YieldTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.YieldTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.YieldTermStructure_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        return _QuantExt.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        return _QuantExt.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        return _QuantExt.YieldTermStructure_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.YieldTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.YieldTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.YieldTermStructure_allowsExtrapolation(self)

# Register YieldTermStructure in _QuantExt:
_QuantExt.YieldTermStructure_swigregister(YieldTermStructure)

class YieldTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YieldTermStructureHandle_swiginit(self, _QuantExt.new_YieldTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< YieldTermStructure >":
        return _QuantExt.YieldTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.YieldTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YieldTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_YieldTermStructureHandle

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.YieldTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.YieldTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.YieldTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.YieldTermStructureHandle_maxTime(self)

    def discount(self, *args) -> "DiscountFactor":
        return _QuantExt.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args) -> "InterestRate":
        return _QuantExt.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args) -> "InterestRate":
        return _QuantExt.YieldTermStructureHandle_forwardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.YieldTermStructureHandle_allowsExtrapolation(self)

# Register YieldTermStructureHandle in _QuantExt:
_QuantExt.YieldTermStructureHandle_swigregister(YieldTermStructureHandle)

class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableYieldTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableYieldTermStructureHandle(*args))

    def linkTo(self, arg2: "YieldTermStructure") -> "void":
        return _QuantExt.RelinkableYieldTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableYieldTermStructureHandle

# Register RelinkableYieldTermStructureHandle in _QuantExt:
_QuantExt.RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)

class ImpliedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", referenceDate: "Date"):
        _QuantExt.ImpliedTermStructure_swiginit(self, _QuantExt.new_ImpliedTermStructure(curveHandle, referenceDate))
    __swig_destroy__ = _QuantExt.delete_ImpliedTermStructure

# Register ImpliedTermStructure in _QuantExt:
_QuantExt.ImpliedTermStructure_swigregister(ImpliedTermStructure)

class ZeroSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZeroSpreadedTermStructure_swiginit(self, _QuantExt.new_ZeroSpreadedTermStructure(*args))
    __swig_destroy__ = _QuantExt.delete_ZeroSpreadedTermStructure

# Register ZeroSpreadedTermStructure in _QuantExt:
_QuantExt.ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)

class ForwardSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle: "YieldTermStructureHandle", spreadHandle: "QuoteHandle"):
        _QuantExt.ForwardSpreadedTermStructure_swiginit(self, _QuantExt.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _QuantExt.delete_ForwardSpreadedTermStructure

# Register ForwardSpreadedTermStructure in _QuantExt:
_QuantExt.ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)

class SpreadedLinearZeroInterpolatedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SpreadedLinearZeroInterpolatedTermStructure_swiginit(self, _QuantExt.new_SpreadedLinearZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _QuantExt.delete_SpreadedLinearZeroInterpolatedTermStructure

# Register SpreadedLinearZeroInterpolatedTermStructure in _QuantExt:
_QuantExt.SpreadedLinearZeroInterpolatedTermStructure_swigregister(SpreadedLinearZeroInterpolatedTermStructure)

class SpreadedBackwardFlatZeroInterpolatedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SpreadedBackwardFlatZeroInterpolatedTermStructure_swiginit(self, _QuantExt.new_SpreadedBackwardFlatZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _QuantExt.delete_SpreadedBackwardFlatZeroInterpolatedTermStructure

# Register SpreadedBackwardFlatZeroInterpolatedTermStructure in _QuantExt:
_QuantExt.SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister(SpreadedBackwardFlatZeroInterpolatedTermStructure)

class FlatForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FlatForward_swiginit(self, _QuantExt.new_FlatForward(*args))
    __swig_destroy__ = _QuantExt.delete_FlatForward

# Register FlatForward in _QuantExt:
_QuantExt.FlatForward_swigregister(FlatForward)

class RealTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RealTimeSeries_swiginit(self, _QuantExt.new_RealTimeSeries(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > >":
        return _QuantExt.RealTimeSeries_dates(self)

    def values(self) -> "std::vector< double,std::allocator< double > >":
        return _QuantExt.RealTimeSeries_values(self)

    def __len__(self) -> "Size":
        return _QuantExt.RealTimeSeries___len__(self)

    def __getitem__(self, d: "Date") -> "double":
        return _QuantExt.RealTimeSeries___getitem__(self, d)

    def __setitem__(self, d: "Date", value: "double const &") -> "void":
        return _QuantExt.RealTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _QuantExt.delete_RealTimeSeries

# Register RealTimeSeries in _QuantExt:
_QuantExt.RealTimeSeries_swigregister(RealTimeSeries)

class IntervalPriceTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.IntervalPriceTimeSeries_swiginit(self, _QuantExt.new_IntervalPriceTimeSeries(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > >":
        return _QuantExt.IntervalPriceTimeSeries_dates(self)

    def values(self) -> "std::vector< IntervalPrice,std::allocator< IntervalPrice > >":
        return _QuantExt.IntervalPriceTimeSeries_values(self)

    def __len__(self) -> "Size":
        return _QuantExt.IntervalPriceTimeSeries___len__(self)

    def __getitem__(self, d: "Date") -> "IntervalPrice":
        return _QuantExt.IntervalPriceTimeSeries___getitem__(self, d)

    def __setitem__(self, d: "Date", value: "IntervalPrice") -> "void":
        return _QuantExt.IntervalPriceTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _QuantExt.delete_IntervalPriceTimeSeries

# Register IntervalPriceTimeSeries in _QuantExt:
_QuantExt.IntervalPriceTimeSeries_swigregister(IntervalPriceTimeSeries)

class IntervalPriceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.IntervalPriceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.IntervalPriceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.IntervalPriceVector___bool__(self)

    def __len__(self) -> "std::vector< IntervalPrice >::size_type":
        return _QuantExt.IntervalPriceVector___len__(self)

    def __getslice__(self, i: "std::vector< IntervalPrice >::difference_type", j: "std::vector< IntervalPrice >::difference_type") -> "std::vector< IntervalPrice,std::allocator< IntervalPrice > > *":
        return _QuantExt.IntervalPriceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.IntervalPriceVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< IntervalPrice >::difference_type", j: "std::vector< IntervalPrice >::difference_type") -> "void":
        return _QuantExt.IntervalPriceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.IntervalPriceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< IntervalPrice >::value_type const &":
        return _QuantExt.IntervalPriceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.IntervalPriceVector___setitem__(self, *args)

    def pop(self) -> "std::vector< IntervalPrice >::value_type":
        return _QuantExt.IntervalPriceVector_pop(self)

    def append(self, x: "IntervalPrice") -> "void":
        return _QuantExt.IntervalPriceVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.IntervalPriceVector_empty(self)

    def size(self) -> "std::vector< IntervalPrice >::size_type":
        return _QuantExt.IntervalPriceVector_size(self)

    def swap(self, v: "IntervalPriceVector") -> "void":
        return _QuantExt.IntervalPriceVector_swap(self, v)

    def begin(self) -> "std::vector< IntervalPrice >::iterator":
        return _QuantExt.IntervalPriceVector_begin(self)

    def end(self) -> "std::vector< IntervalPrice >::iterator":
        return _QuantExt.IntervalPriceVector_end(self)

    def rbegin(self) -> "std::vector< IntervalPrice >::reverse_iterator":
        return _QuantExt.IntervalPriceVector_rbegin(self)

    def rend(self) -> "std::vector< IntervalPrice >::reverse_iterator":
        return _QuantExt.IntervalPriceVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.IntervalPriceVector_clear(self)

    def get_allocator(self) -> "std::vector< IntervalPrice >::allocator_type":
        return _QuantExt.IntervalPriceVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.IntervalPriceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< IntervalPrice >::iterator":
        return _QuantExt.IntervalPriceVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.IntervalPriceVector_swiginit(self, _QuantExt.new_IntervalPriceVector(*args))

    def push_back(self, x: "IntervalPrice") -> "void":
        return _QuantExt.IntervalPriceVector_push_back(self, x)

    def front(self) -> "std::vector< IntervalPrice >::value_type const &":
        return _QuantExt.IntervalPriceVector_front(self)

    def back(self) -> "std::vector< IntervalPrice >::value_type const &":
        return _QuantExt.IntervalPriceVector_back(self)

    def assign(self, n: "std::vector< IntervalPrice >::size_type", x: "IntervalPrice") -> "void":
        return _QuantExt.IntervalPriceVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.IntervalPriceVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.IntervalPriceVector_insert(self, *args)

    def reserve(self, n: "std::vector< IntervalPrice >::size_type") -> "void":
        return _QuantExt.IntervalPriceVector_reserve(self, n)

    def capacity(self) -> "std::vector< IntervalPrice >::size_type":
        return _QuantExt.IntervalPriceVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_IntervalPriceVector

# Register IntervalPriceVector in _QuantExt:
_QuantExt.IntervalPriceVector_swigregister(IntervalPriceVector)

class IntervalPrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Open = _QuantExt.IntervalPrice_Open
    Close = _QuantExt.IntervalPrice_Close
    High = _QuantExt.IntervalPrice_High
    Low = _QuantExt.IntervalPrice_Low

    def __init__(self, arg2: "Real", arg3: "Real", arg4: "Real", arg5: "Real"):
        _QuantExt.IntervalPrice_swiginit(self, _QuantExt.new_IntervalPrice(arg2, arg3, arg4, arg5))

    def setValue(self, arg2: "Real", arg3: "IntervalPrice::Type") -> "void":
        return _QuantExt.IntervalPrice_setValue(self, arg2, arg3)

    def setValues(self, arg2: "Real", arg3: "Real", arg4: "Real", arg5: "Real") -> "void":
        return _QuantExt.IntervalPrice_setValues(self, arg2, arg3, arg4, arg5)

    def value(self, t: "IntervalPrice::Type") -> "Real":
        return _QuantExt.IntervalPrice_value(self, t)

    def open(self) -> "Real":
        return _QuantExt.IntervalPrice_open(self)

    def close(self) -> "Real":
        return _QuantExt.IntervalPrice_close(self)

    def high(self) -> "Real":
        return _QuantExt.IntervalPrice_high(self)

    def low(self) -> "Real":
        return _QuantExt.IntervalPrice_low(self)

    @staticmethod
    def makeSeries(d: "DateVector", open: "DoubleVector", close: "DoubleVector", high: "DoubleVector", low: "DoubleVector") -> "TimeSeries< IntervalPrice >":
        return _QuantExt.IntervalPrice_makeSeries(d, open, close, high, low)

    @staticmethod
    def extractValues(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.IntervalPrice_extractValues(arg1, t)

    @staticmethod
    def extractComponent(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "TimeSeries< Real >":
        return _QuantExt.IntervalPrice_extractComponent(arg1, t)
    __swig_destroy__ = _QuantExt.delete_IntervalPrice

# Register IntervalPrice in _QuantExt:
_QuantExt.IntervalPrice_swigregister(IntervalPrice)

def IntervalPrice_makeSeries(d: "DateVector", open: "DoubleVector", close: "DoubleVector", high: "DoubleVector", low: "DoubleVector") -> "TimeSeries< IntervalPrice >":
    return _QuantExt.IntervalPrice_makeSeries(d, open, close, high, low)

def IntervalPrice_extractValues(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "std::vector< Real,std::allocator< Real > >":
    return _QuantExt.IntervalPrice_extractValues(arg1, t)

def IntervalPrice_extractComponent(arg1: "IntervalPriceTimeSeries", t: "IntervalPrice::Type") -> "TimeSeries< Real >":
    return _QuantExt.IntervalPrice_extractComponent(arg1, t)

class IndexManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "IndexManager &":
        return _QuantExt.IndexManager_instance()

    def setHistory(self, name: "std::string const &", fixings: "RealTimeSeries") -> "void":
        return _QuantExt.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name: "std::string const &") -> "TimeSeries< Real > const &":
        return _QuantExt.IndexManager_getHistory(self, name)

    def hasHistory(self, name: "std::string const &") -> "bool":
        return _QuantExt.IndexManager_hasHistory(self, name)

    def histories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _QuantExt.IndexManager_histories(self)

    def clearHistory(self, name: "std::string const &") -> "void":
        return _QuantExt.IndexManager_clearHistory(self, name)

    def clearHistories(self) -> "void":
        return _QuantExt.IndexManager_clearHistories(self)
    __swig_destroy__ = _QuantExt.delete_IndexManager

# Register IndexManager in _QuantExt:
_QuantExt.IndexManager_swigregister(IndexManager)

def IndexManager_instance() -> "IndexManager &":
    return _QuantExt.IndexManager_instance()

class Index(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Index *":
        return _QuantExt.Index___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Index___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Index___bool__(self)

    def addFixings(self, fixingDates: "DateVector", fixings: "DoubleVector", forceOverwrite: "bool"=False) -> "void":
        return _QuantExt.Index_addFixings(self, fixingDates, fixings, forceOverwrite)

    def __str__(self) -> "std::string":
        return _QuantExt.Index___str__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.Index_asObservable(self)

    def __init__(self):
        _QuantExt.Index_swiginit(self, _QuantExt.new_Index())
    __swig_destroy__ = _QuantExt.delete_Index

    def name(self) -> "std::string":
        return _QuantExt.Index_name(self)

    def fixingCalendar(self) -> "Calendar":
        return _QuantExt.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate: "Date") -> "bool":
        return _QuantExt.Index_isValidFixingDate(self, fixingDate)

    def fixing(self, fixingDate: "Date", forecastTodaysFixing: "bool"=False) -> "Real":
        return _QuantExt.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def addFixing(self, fixingDate: "Date", fixing: "Rate", forceOverwrite: "bool"=False) -> "void":
        return _QuantExt.Index_addFixing(self, fixingDate, fixing, forceOverwrite)

    def timeSeries(self) -> "TimeSeries< Real > const &":
        return _QuantExt.Index_timeSeries(self)

    def clearFixings(self) -> "void":
        return _QuantExt.Index_clearFixings(self)

# Register Index in _QuantExt:
_QuantExt.Index_swigregister(Index)

class InterestRateIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self) -> "std::string":
        return _QuantExt.InterestRateIndex_familyName(self)

    def tenor(self) -> "Period":
        return _QuantExt.InterestRateIndex_tenor(self)

    def fixingDays(self) -> "Natural":
        return _QuantExt.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate: "Date") -> "Date":
        return _QuantExt.InterestRateIndex_fixingDate(self, valueDate)

    def currency(self) -> "Currency":
        return _QuantExt.InterestRateIndex_currency(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.InterestRateIndex_dayCounter(self)

    def maturityDate(self, valueDate: "Date") -> "Date":
        return _QuantExt.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate: "Date") -> "Date":
        return _QuantExt.InterestRateIndex_valueDate(self, fixingDate)
    __swig_destroy__ = _QuantExt.delete_InterestRateIndex

# Register InterestRateIndex in _QuantExt:
_QuantExt.InterestRateIndex_swigregister(InterestRateIndex)

class IborIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.IborIndex_swiginit(self, _QuantExt.new_IborIndex(*args))

    def businessDayConvention(self) -> "BusinessDayConvention":
        return _QuantExt.IborIndex_businessDayConvention(self)

    def endOfMonth(self) -> "bool":
        return _QuantExt.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.IborIndex_forwardingTermStructure(self)

    def clone(self, h: "YieldTermStructureHandle") -> "IborIndexPtr":
        return _QuantExt.IborIndex_clone(self, h)
    __swig_destroy__ = _QuantExt.delete_IborIndex

# Register IborIndex in _QuantExt:
_QuantExt.IborIndex_swigregister(IborIndex)


def as_iborindex(index: "InterestRateIndex") -> "IborIndexPtr":
    return _QuantExt.as_iborindex(index)
class OvernightIndex(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.OvernightIndex_swiginit(self, _QuantExt.new_OvernightIndex(*args))
    __swig_destroy__ = _QuantExt.delete_OvernightIndex

# Register OvernightIndex in _QuantExt:
_QuantExt.OvernightIndex_swigregister(OvernightIndex)

class Libor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Libor_swiginit(self, _QuantExt.new_Libor(*args))
    __swig_destroy__ = _QuantExt.delete_Libor

# Register Libor in _QuantExt:
_QuantExt.Libor_swigregister(Libor)

class SwapIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwapIndex_swiginit(self, _QuantExt.new_SwapIndex(*args))

    def fixedLegTenor(self) -> "Period":
        return _QuantExt.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self) -> "BusinessDayConvention":
        return _QuantExt.SwapIndex_fixedLegConvention(self)

    def iborIndex(self) -> "IborIndexPtr":
        return _QuantExt.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.SwapIndex_forwardingTermStructure(self)

    def discountingTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.SwapIndex_discountingTermStructure(self)

    def clone(self, *args) -> "SwapIndexPtr":
        return _QuantExt.SwapIndex_clone(self, *args)
    __swig_destroy__ = _QuantExt.delete_SwapIndex

# Register SwapIndex in _QuantExt:
_QuantExt.SwapIndex_swigregister(SwapIndex)


def as_swap_index(index: "InterestRateIndex") -> "SwapIndexPtr":
    return _QuantExt.as_swap_index(index)
class SwapSpreadIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, familyName: "std::string const &", swapIndex1: "SwapIndex", swapIndex2: "SwapIndex", gearing1: "Real const"=1.0, gearing2: "Real const"=-1.0):
        _QuantExt.SwapSpreadIndex_swiginit(self, _QuantExt.new_SwapSpreadIndex(familyName, swapIndex1, swapIndex2, gearing1, gearing2))

    def forecastFixing(self, fixingDate: "Date") -> "Rate":
        return _QuantExt.SwapSpreadIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate: "Date") -> "Rate":
        return _QuantExt.SwapSpreadIndex_pastFixing(self, fixingDate)

    def swapIndex1(self) -> "SwapIndexPtr":
        return _QuantExt.SwapSpreadIndex_swapIndex1(self)

    def swapIndex2(self) -> "SwapIndexPtr":
        return _QuantExt.SwapSpreadIndex_swapIndex2(self)

    def gearing1(self) -> "Real":
        return _QuantExt.SwapSpreadIndex_gearing1(self)

    def gearing2(self) -> "Real":
        return _QuantExt.SwapSpreadIndex_gearing2(self)
    __swig_destroy__ = _QuantExt.delete_SwapSpreadIndex

# Register SwapSpreadIndex in _QuantExt:
_QuantExt.SwapSpreadIndex_swigregister(SwapSpreadIndex)

class AUDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AUDLibor_swiginit(self, _QuantExt.new_AUDLibor(*args))
    __swig_destroy__ = _QuantExt.delete_AUDLibor

# Register AUDLibor in _QuantExt:
_QuantExt.AUDLibor_swigregister(AUDLibor)

class CADLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CADLibor_swiginit(self, _QuantExt.new_CADLibor(*args))
    __swig_destroy__ = _QuantExt.delete_CADLibor

# Register CADLibor in _QuantExt:
_QuantExt.CADLibor_swigregister(CADLibor)

class Cdor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Cdor_swiginit(self, _QuantExt.new_Cdor(*args))
    __swig_destroy__ = _QuantExt.delete_Cdor

# Register Cdor in _QuantExt:
_QuantExt.Cdor_swigregister(Cdor)

class CHFLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CHFLibor_swiginit(self, _QuantExt.new_CHFLibor(*args))
    __swig_destroy__ = _QuantExt.delete_CHFLibor

# Register CHFLibor in _QuantExt:
_QuantExt.CHFLibor_swigregister(CHFLibor)

class DKKLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DKKLibor_swiginit(self, _QuantExt.new_DKKLibor(*args))
    __swig_destroy__ = _QuantExt.delete_DKKLibor

# Register DKKLibor in _QuantExt:
_QuantExt.DKKLibor_swigregister(DKKLibor)

class Bbsw(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw_swiginit(self, _QuantExt.new_Bbsw(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw

# Register Bbsw in _QuantExt:
_QuantExt.Bbsw_swigregister(Bbsw)

class Bbsw1M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw1M_swiginit(self, _QuantExt.new_Bbsw1M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw1M

# Register Bbsw1M in _QuantExt:
_QuantExt.Bbsw1M_swigregister(Bbsw1M)

class Bbsw2M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw2M_swiginit(self, _QuantExt.new_Bbsw2M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw2M

# Register Bbsw2M in _QuantExt:
_QuantExt.Bbsw2M_swigregister(Bbsw2M)

class Bbsw3M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw3M_swiginit(self, _QuantExt.new_Bbsw3M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw3M

# Register Bbsw3M in _QuantExt:
_QuantExt.Bbsw3M_swigregister(Bbsw3M)

class Bbsw4M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw4M_swiginit(self, _QuantExt.new_Bbsw4M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw4M

# Register Bbsw4M in _QuantExt:
_QuantExt.Bbsw4M_swigregister(Bbsw4M)

class Bbsw5M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw5M_swiginit(self, _QuantExt.new_Bbsw5M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw5M

# Register Bbsw5M in _QuantExt:
_QuantExt.Bbsw5M_swigregister(Bbsw5M)

class Bbsw6M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bbsw6M_swiginit(self, _QuantExt.new_Bbsw6M(*args))
    __swig_destroy__ = _QuantExt.delete_Bbsw6M

# Register Bbsw6M in _QuantExt:
_QuantExt.Bbsw6M_swigregister(Bbsw6M)

class Bkbm(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm_swiginit(self, _QuantExt.new_Bkbm(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm

# Register Bkbm in _QuantExt:
_QuantExt.Bkbm_swigregister(Bkbm)

class Bkbm1M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm1M_swiginit(self, _QuantExt.new_Bkbm1M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm1M

# Register Bkbm1M in _QuantExt:
_QuantExt.Bkbm1M_swigregister(Bkbm1M)

class Bkbm2M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm2M_swiginit(self, _QuantExt.new_Bkbm2M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm2M

# Register Bkbm2M in _QuantExt:
_QuantExt.Bkbm2M_swigregister(Bkbm2M)

class Bkbm3M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm3M_swiginit(self, _QuantExt.new_Bkbm3M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm3M

# Register Bkbm3M in _QuantExt:
_QuantExt.Bkbm3M_swigregister(Bkbm3M)

class Bkbm4M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm4M_swiginit(self, _QuantExt.new_Bkbm4M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm4M

# Register Bkbm4M in _QuantExt:
_QuantExt.Bkbm4M_swigregister(Bkbm4M)

class Bkbm5M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm5M_swiginit(self, _QuantExt.new_Bkbm5M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm5M

# Register Bkbm5M in _QuantExt:
_QuantExt.Bkbm5M_swigregister(Bkbm5M)

class Bkbm6M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bkbm6M_swiginit(self, _QuantExt.new_Bkbm6M(*args))
    __swig_destroy__ = _QuantExt.delete_Bkbm6M

# Register Bkbm6M in _QuantExt:
_QuantExt.Bkbm6M_swigregister(Bkbm6M)

class Euribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor_swiginit(self, _QuantExt.new_Euribor(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor

# Register Euribor in _QuantExt:
_QuantExt.Euribor_swigregister(Euribor)

class EuriborSW(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EuriborSW_swiginit(self, _QuantExt.new_EuriborSW(*args))
    __swig_destroy__ = _QuantExt.delete_EuriborSW

# Register EuriborSW in _QuantExt:
_QuantExt.EuriborSW_swigregister(EuriborSW)

class Euribor2W(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor2W_swiginit(self, _QuantExt.new_Euribor2W(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor2W

# Register Euribor2W in _QuantExt:
_QuantExt.Euribor2W_swigregister(Euribor2W)

class Euribor3W(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor3W_swiginit(self, _QuantExt.new_Euribor3W(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor3W

# Register Euribor3W in _QuantExt:
_QuantExt.Euribor3W_swigregister(Euribor3W)

class Euribor1M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor1M_swiginit(self, _QuantExt.new_Euribor1M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor1M

# Register Euribor1M in _QuantExt:
_QuantExt.Euribor1M_swigregister(Euribor1M)

class Euribor2M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor2M_swiginit(self, _QuantExt.new_Euribor2M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor2M

# Register Euribor2M in _QuantExt:
_QuantExt.Euribor2M_swigregister(Euribor2M)

class Euribor3M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor3M_swiginit(self, _QuantExt.new_Euribor3M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor3M

# Register Euribor3M in _QuantExt:
_QuantExt.Euribor3M_swigregister(Euribor3M)

class Euribor4M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor4M_swiginit(self, _QuantExt.new_Euribor4M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor4M

# Register Euribor4M in _QuantExt:
_QuantExt.Euribor4M_swigregister(Euribor4M)

class Euribor5M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor5M_swiginit(self, _QuantExt.new_Euribor5M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor5M

# Register Euribor5M in _QuantExt:
_QuantExt.Euribor5M_swigregister(Euribor5M)

class Euribor6M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor6M_swiginit(self, _QuantExt.new_Euribor6M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor6M

# Register Euribor6M in _QuantExt:
_QuantExt.Euribor6M_swigregister(Euribor6M)

class Euribor7M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor7M_swiginit(self, _QuantExt.new_Euribor7M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor7M

# Register Euribor7M in _QuantExt:
_QuantExt.Euribor7M_swigregister(Euribor7M)

class Euribor8M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor8M_swiginit(self, _QuantExt.new_Euribor8M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor8M

# Register Euribor8M in _QuantExt:
_QuantExt.Euribor8M_swigregister(Euribor8M)

class Euribor9M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor9M_swiginit(self, _QuantExt.new_Euribor9M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor9M

# Register Euribor9M in _QuantExt:
_QuantExt.Euribor9M_swigregister(Euribor9M)

class Euribor10M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor10M_swiginit(self, _QuantExt.new_Euribor10M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor10M

# Register Euribor10M in _QuantExt:
_QuantExt.Euribor10M_swigregister(Euribor10M)

class Euribor11M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor11M_swiginit(self, _QuantExt.new_Euribor11M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor11M

# Register Euribor11M in _QuantExt:
_QuantExt.Euribor11M_swigregister(Euribor11M)

class Euribor1Y(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor1Y_swiginit(self, _QuantExt.new_Euribor1Y(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor1Y

# Register Euribor1Y in _QuantExt:
_QuantExt.Euribor1Y_swigregister(Euribor1Y)

class Euribor365(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_swiginit(self, _QuantExt.new_Euribor365(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365

# Register Euribor365 in _QuantExt:
_QuantExt.Euribor365_swigregister(Euribor365)

class Euribor365_SW(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_SW_swiginit(self, _QuantExt.new_Euribor365_SW(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_SW

# Register Euribor365_SW in _QuantExt:
_QuantExt.Euribor365_SW_swigregister(Euribor365_SW)

class Euribor365_2W(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_2W_swiginit(self, _QuantExt.new_Euribor365_2W(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_2W

# Register Euribor365_2W in _QuantExt:
_QuantExt.Euribor365_2W_swigregister(Euribor365_2W)

class Euribor365_3W(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_3W_swiginit(self, _QuantExt.new_Euribor365_3W(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_3W

# Register Euribor365_3W in _QuantExt:
_QuantExt.Euribor365_3W_swigregister(Euribor365_3W)

class Euribor365_1M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_1M_swiginit(self, _QuantExt.new_Euribor365_1M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_1M

# Register Euribor365_1M in _QuantExt:
_QuantExt.Euribor365_1M_swigregister(Euribor365_1M)

class Euribor365_2M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_2M_swiginit(self, _QuantExt.new_Euribor365_2M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_2M

# Register Euribor365_2M in _QuantExt:
_QuantExt.Euribor365_2M_swigregister(Euribor365_2M)

class Euribor365_3M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_3M_swiginit(self, _QuantExt.new_Euribor365_3M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_3M

# Register Euribor365_3M in _QuantExt:
_QuantExt.Euribor365_3M_swigregister(Euribor365_3M)

class Euribor365_4M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_4M_swiginit(self, _QuantExt.new_Euribor365_4M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_4M

# Register Euribor365_4M in _QuantExt:
_QuantExt.Euribor365_4M_swigregister(Euribor365_4M)

class Euribor365_5M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_5M_swiginit(self, _QuantExt.new_Euribor365_5M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_5M

# Register Euribor365_5M in _QuantExt:
_QuantExt.Euribor365_5M_swigregister(Euribor365_5M)

class Euribor365_6M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_6M_swiginit(self, _QuantExt.new_Euribor365_6M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_6M

# Register Euribor365_6M in _QuantExt:
_QuantExt.Euribor365_6M_swigregister(Euribor365_6M)

class Euribor365_7M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_7M_swiginit(self, _QuantExt.new_Euribor365_7M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_7M

# Register Euribor365_7M in _QuantExt:
_QuantExt.Euribor365_7M_swigregister(Euribor365_7M)

class Euribor365_8M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_8M_swiginit(self, _QuantExt.new_Euribor365_8M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_8M

# Register Euribor365_8M in _QuantExt:
_QuantExt.Euribor365_8M_swigregister(Euribor365_8M)

class Euribor365_9M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_9M_swiginit(self, _QuantExt.new_Euribor365_9M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_9M

# Register Euribor365_9M in _QuantExt:
_QuantExt.Euribor365_9M_swigregister(Euribor365_9M)

class Euribor365_10M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_10M_swiginit(self, _QuantExt.new_Euribor365_10M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_10M

# Register Euribor365_10M in _QuantExt:
_QuantExt.Euribor365_10M_swigregister(Euribor365_10M)

class Euribor365_11M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_11M_swiginit(self, _QuantExt.new_Euribor365_11M(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_11M

# Register Euribor365_11M in _QuantExt:
_QuantExt.Euribor365_11M_swigregister(Euribor365_11M)

class Euribor365_1Y(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Euribor365_1Y_swiginit(self, _QuantExt.new_Euribor365_1Y(*args))
    __swig_destroy__ = _QuantExt.delete_Euribor365_1Y

# Register Euribor365_1Y in _QuantExt:
_QuantExt.Euribor365_1Y_swigregister(Euribor365_1Y)

class EURLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor_swiginit(self, _QuantExt.new_EURLibor(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor

# Register EURLibor in _QuantExt:
_QuantExt.EURLibor_swigregister(EURLibor)

class EURLiborSW(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLiborSW_swiginit(self, _QuantExt.new_EURLiborSW(*args))
    __swig_destroy__ = _QuantExt.delete_EURLiborSW

# Register EURLiborSW in _QuantExt:
_QuantExt.EURLiborSW_swigregister(EURLiborSW)

class EURLibor2W(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor2W_swiginit(self, _QuantExt.new_EURLibor2W(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor2W

# Register EURLibor2W in _QuantExt:
_QuantExt.EURLibor2W_swigregister(EURLibor2W)

class EURLibor1M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor1M_swiginit(self, _QuantExt.new_EURLibor1M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor1M

# Register EURLibor1M in _QuantExt:
_QuantExt.EURLibor1M_swigregister(EURLibor1M)

class EURLibor2M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor2M_swiginit(self, _QuantExt.new_EURLibor2M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor2M

# Register EURLibor2M in _QuantExt:
_QuantExt.EURLibor2M_swigregister(EURLibor2M)

class EURLibor3M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor3M_swiginit(self, _QuantExt.new_EURLibor3M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor3M

# Register EURLibor3M in _QuantExt:
_QuantExt.EURLibor3M_swigregister(EURLibor3M)

class EURLibor4M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor4M_swiginit(self, _QuantExt.new_EURLibor4M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor4M

# Register EURLibor4M in _QuantExt:
_QuantExt.EURLibor4M_swigregister(EURLibor4M)

class EURLibor5M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor5M_swiginit(self, _QuantExt.new_EURLibor5M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor5M

# Register EURLibor5M in _QuantExt:
_QuantExt.EURLibor5M_swigregister(EURLibor5M)

class EURLibor6M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor6M_swiginit(self, _QuantExt.new_EURLibor6M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor6M

# Register EURLibor6M in _QuantExt:
_QuantExt.EURLibor6M_swigregister(EURLibor6M)

class EURLibor7M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor7M_swiginit(self, _QuantExt.new_EURLibor7M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor7M

# Register EURLibor7M in _QuantExt:
_QuantExt.EURLibor7M_swigregister(EURLibor7M)

class EURLibor8M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor8M_swiginit(self, _QuantExt.new_EURLibor8M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor8M

# Register EURLibor8M in _QuantExt:
_QuantExt.EURLibor8M_swigregister(EURLibor8M)

class EURLibor9M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor9M_swiginit(self, _QuantExt.new_EURLibor9M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor9M

# Register EURLibor9M in _QuantExt:
_QuantExt.EURLibor9M_swigregister(EURLibor9M)

class EURLibor10M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor10M_swiginit(self, _QuantExt.new_EURLibor10M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor10M

# Register EURLibor10M in _QuantExt:
_QuantExt.EURLibor10M_swigregister(EURLibor10M)

class EURLibor11M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor11M_swiginit(self, _QuantExt.new_EURLibor11M(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor11M

# Register EURLibor11M in _QuantExt:
_QuantExt.EURLibor11M_swigregister(EURLibor11M)

class EURLibor1Y(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EURLibor1Y_swiginit(self, _QuantExt.new_EURLibor1Y(*args))
    __swig_destroy__ = _QuantExt.delete_EURLibor1Y

# Register EURLibor1Y in _QuantExt:
_QuantExt.EURLibor1Y_swigregister(EURLibor1Y)

class GBPLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.GBPLibor_swiginit(self, _QuantExt.new_GBPLibor(*args))
    __swig_destroy__ = _QuantExt.delete_GBPLibor

# Register GBPLibor in _QuantExt:
_QuantExt.GBPLibor_swigregister(GBPLibor)

class Jibar(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Jibar_swiginit(self, _QuantExt.new_Jibar(*args))
    __swig_destroy__ = _QuantExt.delete_Jibar

# Register Jibar in _QuantExt:
_QuantExt.Jibar_swigregister(Jibar)

class JPYLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.JPYLibor_swiginit(self, _QuantExt.new_JPYLibor(*args))
    __swig_destroy__ = _QuantExt.delete_JPYLibor

# Register JPYLibor in _QuantExt:
_QuantExt.JPYLibor_swigregister(JPYLibor)

class NZDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NZDLibor_swiginit(self, _QuantExt.new_NZDLibor(*args))
    __swig_destroy__ = _QuantExt.delete_NZDLibor

# Register NZDLibor in _QuantExt:
_QuantExt.NZDLibor_swigregister(NZDLibor)

class SEKLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SEKLibor_swiginit(self, _QuantExt.new_SEKLibor(*args))
    __swig_destroy__ = _QuantExt.delete_SEKLibor

# Register SEKLibor in _QuantExt:
_QuantExt.SEKLibor_swigregister(SEKLibor)

class Tibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Tibor_swiginit(self, _QuantExt.new_Tibor(*args))
    __swig_destroy__ = _QuantExt.delete_Tibor

# Register Tibor in _QuantExt:
_QuantExt.Tibor_swigregister(Tibor)

class THBFIX(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.THBFIX_swiginit(self, _QuantExt.new_THBFIX(*args))
    __swig_destroy__ = _QuantExt.delete_THBFIX

# Register THBFIX in _QuantExt:
_QuantExt.THBFIX_swigregister(THBFIX)

class TRLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TRLibor_swiginit(self, _QuantExt.new_TRLibor(*args))
    __swig_destroy__ = _QuantExt.delete_TRLibor

# Register TRLibor in _QuantExt:
_QuantExt.TRLibor_swigregister(TRLibor)

class USDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.USDLibor_swiginit(self, _QuantExt.new_USDLibor(*args))
    __swig_destroy__ = _QuantExt.delete_USDLibor

# Register USDLibor in _QuantExt:
_QuantExt.USDLibor_swigregister(USDLibor)

class Zibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Zibor_swiginit(self, _QuantExt.new_Zibor(*args))
    __swig_destroy__ = _QuantExt.delete_Zibor

# Register Zibor in _QuantExt:
_QuantExt.Zibor_swigregister(Zibor)

class Aonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Aonia_swiginit(self, _QuantExt.new_Aonia(*args))
    __swig_destroy__ = _QuantExt.delete_Aonia

# Register Aonia in _QuantExt:
_QuantExt.Aonia_swigregister(Aonia)

class Eonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Eonia_swiginit(self, _QuantExt.new_Eonia(*args))
    __swig_destroy__ = _QuantExt.delete_Eonia

# Register Eonia in _QuantExt:
_QuantExt.Eonia_swigregister(Eonia)

class Sonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Sonia_swiginit(self, _QuantExt.new_Sonia(*args))
    __swig_destroy__ = _QuantExt.delete_Sonia

# Register Sonia in _QuantExt:
_QuantExt.Sonia_swigregister(Sonia)

class FedFunds(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FedFunds_swiginit(self, _QuantExt.new_FedFunds(*args))
    __swig_destroy__ = _QuantExt.delete_FedFunds

# Register FedFunds in _QuantExt:
_QuantExt.FedFunds_swigregister(FedFunds)

class Nzocr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Nzocr_swiginit(self, _QuantExt.new_Nzocr(*args))
    __swig_destroy__ = _QuantExt.delete_Nzocr

# Register Nzocr in _QuantExt:
_QuantExt.Nzocr_swigregister(Nzocr)

class EuriborSwapIsdaFixA(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EuriborSwapIsdaFixA_swiginit(self, _QuantExt.new_EuriborSwapIsdaFixA(*args))
    __swig_destroy__ = _QuantExt.delete_EuriborSwapIsdaFixA

# Register EuriborSwapIsdaFixA in _QuantExt:
_QuantExt.EuriborSwapIsdaFixA_swigregister(EuriborSwapIsdaFixA)

class EuriborSwapIsdaFixB(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EuriborSwapIsdaFixB_swiginit(self, _QuantExt.new_EuriborSwapIsdaFixB(*args))
    __swig_destroy__ = _QuantExt.delete_EuriborSwapIsdaFixB

# Register EuriborSwapIsdaFixB in _QuantExt:
_QuantExt.EuriborSwapIsdaFixB_swigregister(EuriborSwapIsdaFixB)

class EuriborSwapIfrFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EuriborSwapIfrFix_swiginit(self, _QuantExt.new_EuriborSwapIfrFix(*args))
    __swig_destroy__ = _QuantExt.delete_EuriborSwapIfrFix

# Register EuriborSwapIfrFix in _QuantExt:
_QuantExt.EuriborSwapIfrFix_swigregister(EuriborSwapIfrFix)

class EurLiborSwapIsdaFixA(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EurLiborSwapIsdaFixA_swiginit(self, _QuantExt.new_EurLiborSwapIsdaFixA(*args))
    __swig_destroy__ = _QuantExt.delete_EurLiborSwapIsdaFixA

# Register EurLiborSwapIsdaFixA in _QuantExt:
_QuantExt.EurLiborSwapIsdaFixA_swigregister(EurLiborSwapIsdaFixA)

class EurLiborSwapIsdaFixB(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EurLiborSwapIsdaFixB_swiginit(self, _QuantExt.new_EurLiborSwapIsdaFixB(*args))
    __swig_destroy__ = _QuantExt.delete_EurLiborSwapIsdaFixB

# Register EurLiborSwapIsdaFixB in _QuantExt:
_QuantExt.EurLiborSwapIsdaFixB_swigregister(EurLiborSwapIsdaFixB)

class EurLiborSwapIfrFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EurLiborSwapIfrFix_swiginit(self, _QuantExt.new_EurLiborSwapIfrFix(*args))
    __swig_destroy__ = _QuantExt.delete_EurLiborSwapIfrFix

# Register EurLiborSwapIfrFix in _QuantExt:
_QuantExt.EurLiborSwapIfrFix_swigregister(EurLiborSwapIfrFix)

class ChfLiborSwapIsdaFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ChfLiborSwapIsdaFix_swiginit(self, _QuantExt.new_ChfLiborSwapIsdaFix(*args))
    __swig_destroy__ = _QuantExt.delete_ChfLiborSwapIsdaFix

# Register ChfLiborSwapIsdaFix in _QuantExt:
_QuantExt.ChfLiborSwapIsdaFix_swigregister(ChfLiborSwapIsdaFix)

class GbpLiborSwapIsdaFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.GbpLiborSwapIsdaFix_swiginit(self, _QuantExt.new_GbpLiborSwapIsdaFix(*args))
    __swig_destroy__ = _QuantExt.delete_GbpLiborSwapIsdaFix

# Register GbpLiborSwapIsdaFix in _QuantExt:
_QuantExt.GbpLiborSwapIsdaFix_swigregister(GbpLiborSwapIsdaFix)

class JpyLiborSwapIsdaFixAm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.JpyLiborSwapIsdaFixAm_swiginit(self, _QuantExt.new_JpyLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _QuantExt.delete_JpyLiborSwapIsdaFixAm

# Register JpyLiborSwapIsdaFixAm in _QuantExt:
_QuantExt.JpyLiborSwapIsdaFixAm_swigregister(JpyLiborSwapIsdaFixAm)

class JpyLiborSwapIsdaFixPm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.JpyLiborSwapIsdaFixPm_swiginit(self, _QuantExt.new_JpyLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _QuantExt.delete_JpyLiborSwapIsdaFixPm

# Register JpyLiborSwapIsdaFixPm in _QuantExt:
_QuantExt.JpyLiborSwapIsdaFixPm_swigregister(JpyLiborSwapIsdaFixPm)

class UsdLiborSwapIsdaFixAm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.UsdLiborSwapIsdaFixAm_swiginit(self, _QuantExt.new_UsdLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _QuantExt.delete_UsdLiborSwapIsdaFixAm

# Register UsdLiborSwapIsdaFixAm in _QuantExt:
_QuantExt.UsdLiborSwapIsdaFixAm_swigregister(UsdLiborSwapIsdaFixAm)

class UsdLiborSwapIsdaFixPm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.UsdLiborSwapIsdaFixPm_swiginit(self, _QuantExt.new_UsdLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _QuantExt.delete_UsdLiborSwapIsdaFixPm

# Register UsdLiborSwapIsdaFixPm in _QuantExt:
_QuantExt.UsdLiborSwapIsdaFixPm_swigregister(UsdLiborSwapIsdaFixPm)

class Bibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor_swiginit(self, _QuantExt.new_Bibor(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor

# Register Bibor in _QuantExt:
_QuantExt.Bibor_swigregister(Bibor)

class BiborSW(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BiborSW_swiginit(self, _QuantExt.new_BiborSW(*args))
    __swig_destroy__ = _QuantExt.delete_BiborSW

# Register BiborSW in _QuantExt:
_QuantExt.BiborSW_swigregister(BiborSW)

class Bibor1M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor1M_swiginit(self, _QuantExt.new_Bibor1M(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor1M

# Register Bibor1M in _QuantExt:
_QuantExt.Bibor1M_swigregister(Bibor1M)

class Bibor2M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor2M_swiginit(self, _QuantExt.new_Bibor2M(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor2M

# Register Bibor2M in _QuantExt:
_QuantExt.Bibor2M_swigregister(Bibor2M)

class Bibor3M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor3M_swiginit(self, _QuantExt.new_Bibor3M(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor3M

# Register Bibor3M in _QuantExt:
_QuantExt.Bibor3M_swigregister(Bibor3M)

class Bibor6M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor6M_swiginit(self, _QuantExt.new_Bibor6M(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor6M

# Register Bibor6M in _QuantExt:
_QuantExt.Bibor6M_swigregister(Bibor6M)

class Bibor9M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor9M_swiginit(self, _QuantExt.new_Bibor9M(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor9M

# Register Bibor9M in _QuantExt:
_QuantExt.Bibor9M_swigregister(Bibor9M)

class Bibor1Y(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bibor1Y_swiginit(self, _QuantExt.new_Bibor1Y(*args))
    __swig_destroy__ = _QuantExt.delete_Bibor1Y

# Register Bibor1Y in _QuantExt:
_QuantExt.Bibor1Y_swigregister(Bibor1Y)

class Brent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.Brent_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.Brent_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.Brent_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.Brent_solve(self, *args)

    def __init__(self):
        _QuantExt.Brent_swiginit(self, _QuantExt.new_Brent())
    __swig_destroy__ = _QuantExt.delete_Brent

# Register Brent in _QuantExt:
_QuantExt.Brent_swigregister(Brent)

class Bisection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.Bisection_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.Bisection_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.Bisection_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.Bisection_solve(self, *args)

    def __init__(self):
        _QuantExt.Bisection_swiginit(self, _QuantExt.new_Bisection())
    __swig_destroy__ = _QuantExt.delete_Bisection

# Register Bisection in _QuantExt:
_QuantExt.Bisection_swigregister(Bisection)

class FalsePosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.FalsePosition_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.FalsePosition_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.FalsePosition_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.FalsePosition_solve(self, *args)

    def __init__(self):
        _QuantExt.FalsePosition_swiginit(self, _QuantExt.new_FalsePosition())
    __swig_destroy__ = _QuantExt.delete_FalsePosition

# Register FalsePosition in _QuantExt:
_QuantExt.FalsePosition_swigregister(FalsePosition)

class Ridder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.Ridder_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.Ridder_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.Ridder_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.Ridder_solve(self, *args)

    def __init__(self):
        _QuantExt.Ridder_swiginit(self, _QuantExt.new_Ridder())
    __swig_destroy__ = _QuantExt.delete_Ridder

# Register Ridder in _QuantExt:
_QuantExt.Ridder_swigregister(Ridder)

class Secant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.Secant_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.Secant_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.Secant_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.Secant_solve(self, *args)

    def __init__(self):
        _QuantExt.Secant_swiginit(self, _QuantExt.new_Secant())
    __swig_destroy__ = _QuantExt.delete_Secant

# Register Secant in _QuantExt:
_QuantExt.Secant_swigregister(Secant)

class Newton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.Newton_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.Newton_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.Newton_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.Newton_solve(self, *args)

    def __init__(self):
        _QuantExt.Newton_swiginit(self, _QuantExt.new_Newton())
    __swig_destroy__ = _QuantExt.delete_Newton

# Register Newton in _QuantExt:
_QuantExt.Newton_swigregister(Newton)

class NewtonSafe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations: "Size") -> "void":
        return _QuantExt.NewtonSafe_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound: "Real") -> "void":
        return _QuantExt.NewtonSafe_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound: "Real") -> "void":
        return _QuantExt.NewtonSafe_setUpperBound(self, upperBound)

    def solve(self, *args) -> "Real":
        return _QuantExt.NewtonSafe_solve(self, *args)

    def __init__(self):
        _QuantExt.NewtonSafe_swiginit(self, _QuantExt.new_NewtonSafe())
    __swig_destroy__ = _QuantExt.delete_NewtonSafe

# Register NewtonSafe in _QuantExt:
_QuantExt.NewtonSafe_swigregister(NewtonSafe)

class Constraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantExt.delete_Constraint

# Register Constraint in _QuantExt:
_QuantExt.Constraint_swigregister(Constraint)

class BoundaryConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower: "Real", upper: "Real"):
        _QuantExt.BoundaryConstraint_swiginit(self, _QuantExt.new_BoundaryConstraint(lower, upper))
    __swig_destroy__ = _QuantExt.delete_BoundaryConstraint

# Register BoundaryConstraint in _QuantExt:
_QuantExt.BoundaryConstraint_swigregister(BoundaryConstraint)

class NoConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NoConstraint_swiginit(self, _QuantExt.new_NoConstraint())
    __swig_destroy__ = _QuantExt.delete_NoConstraint

# Register NoConstraint in _QuantExt:
_QuantExt.NoConstraint_swigregister(NoConstraint)

class PositiveConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PositiveConstraint_swiginit(self, _QuantExt.new_PositiveConstraint())
    __swig_destroy__ = _QuantExt.delete_PositiveConstraint

# Register PositiveConstraint in _QuantExt:
_QuantExt.PositiveConstraint_swigregister(PositiveConstraint)

class CompositeConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c1: "Constraint", c2: "Constraint"):
        _QuantExt.CompositeConstraint_swiginit(self, _QuantExt.new_CompositeConstraint(c1, c2))
    __swig_destroy__ = _QuantExt.delete_CompositeConstraint

# Register CompositeConstraint in _QuantExt:
_QuantExt.CompositeConstraint_swigregister(CompositeConstraint)

class NonhomogeneousBoundaryConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l: "Array", u: "Array"):
        _QuantExt.NonhomogeneousBoundaryConstraint_swiginit(self, _QuantExt.new_NonhomogeneousBoundaryConstraint(l, u))
    __swig_destroy__ = _QuantExt.delete_NonhomogeneousBoundaryConstraint

# Register NonhomogeneousBoundaryConstraint in _QuantExt:
_QuantExt.NonhomogeneousBoundaryConstraint_swigregister(NonhomogeneousBoundaryConstraint)

class EndCriteria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoCriteria = _QuantExt.EndCriteria_NoCriteria
    MaxIterations = _QuantExt.EndCriteria_MaxIterations
    StationaryPoint = _QuantExt.EndCriteria_StationaryPoint
    StationaryFunctionValue = _QuantExt.EndCriteria_StationaryFunctionValue
    StationaryFunctionAccuracy = _QuantExt.EndCriteria_StationaryFunctionAccuracy
    ZeroGradientNorm = _QuantExt.EndCriteria_ZeroGradientNorm
    Unknown = _QuantExt.EndCriteria_Unknown

    def __init__(self, maxIteration: "Size", maxStationaryStateIterations: "Size", rootEpsilon: "Real", functionEpsilon: "Real", gradientNormEpsilon: "Real"):
        _QuantExt.EndCriteria_swiginit(self, _QuantExt.new_EndCriteria(maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon))

    def __call__(self, iteration: "Size", statState: "Size &", positiveOptimization: "bool const", fold: "Real const", normgold: "Real const", fnew: "Real const", normgnewx: "Real const", ecType: "EndCriteria::Type &") -> "bool":
        return _QuantExt.EndCriteria___call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType)
    __swig_destroy__ = _QuantExt.delete_EndCriteria

# Register EndCriteria in _QuantExt:
_QuantExt.EndCriteria_swigregister(EndCriteria)

class OptimizationMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantExt.delete_OptimizationMethod

# Register OptimizationMethod in _QuantExt:
_QuantExt.OptimizationMethod_swigregister(OptimizationMethod)

class ConjugateGradient(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ConjugateGradient_swiginit(self, _QuantExt.new_ConjugateGradient())
    __swig_destroy__ = _QuantExt.delete_ConjugateGradient

# Register ConjugateGradient in _QuantExt:
_QuantExt.ConjugateGradient_swigregister(ConjugateGradient)

class Simplex(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter: "Real"):
        _QuantExt.Simplex_swiginit(self, _QuantExt.new_Simplex(lambda_parameter))
    __swig_destroy__ = _QuantExt.delete_Simplex

# Register Simplex in _QuantExt:
_QuantExt.Simplex_swigregister(Simplex)

class SteepestDescent(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.SteepestDescent_swiginit(self, _QuantExt.new_SteepestDescent())
    __swig_destroy__ = _QuantExt.delete_SteepestDescent

# Register SteepestDescent in _QuantExt:
_QuantExt.SteepestDescent_swigregister(SteepestDescent)

class BFGS(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BFGS_swiginit(self, _QuantExt.new_BFGS())
    __swig_destroy__ = _QuantExt.delete_BFGS

# Register BFGS in _QuantExt:
_QuantExt.BFGS_swigregister(BFGS)

class LevenbergMarquardt(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsfcn: "Real"=1.0e-8, xtol: "Real"=1.0e-8, gtol: "Real"=1.0e-8):
        _QuantExt.LevenbergMarquardt_swiginit(self, _QuantExt.new_LevenbergMarquardt(epsfcn, xtol, gtol))
    __swig_destroy__ = _QuantExt.delete_LevenbergMarquardt

# Register LevenbergMarquardt in _QuantExt:
_QuantExt.LevenbergMarquardt_swigregister(LevenbergMarquardt)

class DifferentialEvolution(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.DifferentialEvolution_swiginit(self, _QuantExt.new_DifferentialEvolution())
    __swig_destroy__ = _QuantExt.delete_DifferentialEvolution

# Register DifferentialEvolution in _QuantExt:
_QuantExt.DifferentialEvolution_swigregister(DifferentialEvolution)

class SamplerGaussian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "unsigned long"=0):
        _QuantExt.SamplerGaussian_swiginit(self, _QuantExt.new_SamplerGaussian(seed))
    __swig_destroy__ = _QuantExt.delete_SamplerGaussian

# Register SamplerGaussian in _QuantExt:
_QuantExt.SamplerGaussian_swigregister(SamplerGaussian)

class SamplerLogNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "unsigned long"=0):
        _QuantExt.SamplerLogNormal_swiginit(self, _QuantExt.new_SamplerLogNormal(seed))
    __swig_destroy__ = _QuantExt.delete_SamplerLogNormal

# Register SamplerLogNormal in _QuantExt:
_QuantExt.SamplerLogNormal_swigregister(SamplerLogNormal)

class SamplerMirrorGaussian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower: "Array", upper: "Array", seed: "unsigned long"=0):
        _QuantExt.SamplerMirrorGaussian_swiginit(self, _QuantExt.new_SamplerMirrorGaussian(lower, upper, seed))
    __swig_destroy__ = _QuantExt.delete_SamplerMirrorGaussian

# Register SamplerMirrorGaussian in _QuantExt:
_QuantExt.SamplerMirrorGaussian_swigregister(SamplerMirrorGaussian)

class ProbabilityBoltzmannDownhill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "unsigned long"=0):
        _QuantExt.ProbabilityBoltzmannDownhill_swiginit(self, _QuantExt.new_ProbabilityBoltzmannDownhill(seed))
    __swig_destroy__ = _QuantExt.delete_ProbabilityBoltzmannDownhill

# Register ProbabilityBoltzmannDownhill in _QuantExt:
_QuantExt.ProbabilityBoltzmannDownhill_swigregister(ProbabilityBoltzmannDownhill)

class TemperatureExponential(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialTemp: "Real", dimension: "Size", power: "Real"=0.95):
        _QuantExt.TemperatureExponential_swiginit(self, _QuantExt.new_TemperatureExponential(initialTemp, dimension, power))
    __swig_destroy__ = _QuantExt.delete_TemperatureExponential

# Register TemperatureExponential in _QuantExt:
_QuantExt.TemperatureExponential_swigregister(TemperatureExponential)

class ReannealingTrivial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ReannealingTrivial_swiginit(self, _QuantExt.new_ReannealingTrivial())
    __swig_destroy__ = _QuantExt.delete_ReannealingTrivial

# Register ReannealingTrivial in _QuantExt:
_QuantExt.ReannealingTrivial_swigregister(ReannealingTrivial)

class GaussianSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _QuantExt.GaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantExt.GaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantExt.GaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _QuantExt.GaussianSimulatedAnnealing_swiginit(self, _QuantExt.new_GaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _QuantExt.delete_GaussianSimulatedAnnealing

# Register GaussianSimulatedAnnealing in _QuantExt:
_QuantExt.GaussianSimulatedAnnealing_swigregister(GaussianSimulatedAnnealing)

class MirrorGaussianSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _QuantExt.MirrorGaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantExt.MirrorGaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantExt.MirrorGaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _QuantExt.MirrorGaussianSimulatedAnnealing_swiginit(self, _QuantExt.new_MirrorGaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _QuantExt.delete_MirrorGaussianSimulatedAnnealing

# Register MirrorGaussianSimulatedAnnealing in _QuantExt:
_QuantExt.MirrorGaussianSimulatedAnnealing_swigregister(MirrorGaussianSimulatedAnnealing)

class LogNormalSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _QuantExt.LogNormalSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantExt.LogNormalSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantExt.LogNormalSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _QuantExt.LogNormalSimulatedAnnealing_swiginit(self, _QuantExt.new_LogNormalSimulatedAnnealing(*args))
    __swig_destroy__ = _QuantExt.delete_LogNormalSimulatedAnnealing

# Register LogNormalSimulatedAnnealing in _QuantExt:
_QuantExt.LogNormalSimulatedAnnealing_swigregister(LogNormalSimulatedAnnealing)

class Optimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, function: "PyObject *", c: "Constraint", m: "OptimizationMethod", e: "EndCriteria", iv: "Array") -> "Array":
        return _QuantExt.Optimizer_solve(self, function, c, m, e, iv)

    def __init__(self):
        _QuantExt.Optimizer_swiginit(self, _QuantExt.new_Optimizer())
    __swig_destroy__ = _QuantExt.delete_Optimizer

# Register Optimizer in _QuantExt:
_QuantExt.Optimizer_swigregister(Optimizer)

ShiftedLognormal = _QuantExt.ShiftedLognormal
Normal = _QuantExt.Normal
class BlackVolTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "BlackVolTermStructure *":
        return _QuantExt.BlackVolTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.BlackVolTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.BlackVolTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.BlackVolTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.BlackVolTermStructure_swiginit(self, _QuantExt.new_BlackVolTermStructure())
    __swig_destroy__ = _QuantExt.delete_BlackVolTermStructure

    def referenceDate(self) -> "Date":
        return _QuantExt.BlackVolTermStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.BlackVolTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.BlackVolTermStructure_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.BlackVolTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.BlackVolTermStructure_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.BlackVolTermStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.BlackVolTermStructure_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        return _QuantExt.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        return _QuantExt.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        return _QuantExt.BlackVolTermStructure_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.BlackVolTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.BlackVolTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.BlackVolTermStructure_allowsExtrapolation(self)

# Register BlackVolTermStructure in _QuantExt:
_QuantExt.BlackVolTermStructure_swigregister(BlackVolTermStructure)

class BlackVolTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BlackVolTermStructureHandle_swiginit(self, _QuantExt.new_BlackVolTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< BlackVolTermStructure >":
        return _QuantExt.BlackVolTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.BlackVolTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.BlackVolTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_BlackVolTermStructureHandle

    def referenceDate(self) -> "Date":
        return _QuantExt.BlackVolTermStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.BlackVolTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.BlackVolTermStructureHandle_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.BlackVolTermStructureHandle_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.BlackVolTermStructureHandle_maxStrike(self)

    def blackVol(self, *args) -> "Volatility":
        return _QuantExt.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args) -> "Volatility":
        return _QuantExt.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args) -> "Real":
        return _QuantExt.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.BlackVolTermStructureHandle_allowsExtrapolation(self)

# Register BlackVolTermStructureHandle in _QuantExt:
_QuantExt.BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)

class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableBlackVolTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableBlackVolTermStructureHandle(*args))

    def linkTo(self, arg2: "BlackVolTermStructure") -> "void":
        return _QuantExt.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableBlackVolTermStructureHandle

# Register RelinkableBlackVolTermStructureHandle in _QuantExt:
_QuantExt.RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)

class LocalVolTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "LocalVolTermStructure *":
        return _QuantExt.LocalVolTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.LocalVolTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.LocalVolTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.LocalVolTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.LocalVolTermStructure_swiginit(self, _QuantExt.new_LocalVolTermStructure())
    __swig_destroy__ = _QuantExt.delete_LocalVolTermStructure

    def referenceDate(self) -> "Date":
        return _QuantExt.LocalVolTermStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.LocalVolTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.LocalVolTermStructure_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.LocalVolTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.LocalVolTermStructure_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.LocalVolTermStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.LocalVolTermStructure_maxStrike(self)

    def localVol(self, *args) -> "Volatility":
        return _QuantExt.LocalVolTermStructure_localVol(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.LocalVolTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.LocalVolTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.LocalVolTermStructure_allowsExtrapolation(self)

# Register LocalVolTermStructure in _QuantExt:
_QuantExt.LocalVolTermStructure_swigregister(LocalVolTermStructure)

class LocalVolTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LocalVolTermStructureHandle_swiginit(self, _QuantExt.new_LocalVolTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< LocalVolTermStructure >":
        return _QuantExt.LocalVolTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.LocalVolTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.LocalVolTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.LocalVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_LocalVolTermStructureHandle

    def referenceDate(self) -> "Date":
        return _QuantExt.LocalVolTermStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.LocalVolTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.LocalVolTermStructureHandle_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.LocalVolTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.LocalVolTermStructureHandle_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.LocalVolTermStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.LocalVolTermStructureHandle_maxStrike(self)

    def localVol(self, *args) -> "Volatility":
        return _QuantExt.LocalVolTermStructureHandle_localVol(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.LocalVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.LocalVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.LocalVolTermStructureHandle_allowsExtrapolation(self)

# Register LocalVolTermStructureHandle in _QuantExt:
_QuantExt.LocalVolTermStructureHandle_swigregister(LocalVolTermStructureHandle)

class RelinkableLocalVolTermStructureHandle(LocalVolTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableLocalVolTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableLocalVolTermStructureHandle(*args))

    def linkTo(self, arg2: "LocalVolTermStructure") -> "void":
        return _QuantExt.RelinkableLocalVolTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableLocalVolTermStructureHandle

# Register RelinkableLocalVolTermStructureHandle in _QuantExt:
_QuantExt.RelinkableLocalVolTermStructureHandle_swigregister(RelinkableLocalVolTermStructureHandle)

class OptionletVolatilityStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "OptionletVolatilityStructure *":
        return _QuantExt.OptionletVolatilityStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.OptionletVolatilityStructure_asObservable(self)

    def __init__(self):
        _QuantExt.OptionletVolatilityStructure_swiginit(self, _QuantExt.new_OptionletVolatilityStructure())
    __swig_destroy__ = _QuantExt.delete_OptionletVolatilityStructure

    def referenceDate(self) -> "Date":
        return _QuantExt.OptionletVolatilityStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.OptionletVolatilityStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.OptionletVolatilityStructure_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.OptionletVolatilityStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.OptionletVolatilityStructure_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.OptionletVolatilityStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.OptionletVolatilityStructure_maxStrike(self)

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.OptionletVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.OptionletVolatilityStructure_blackVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.OptionletVolatilityStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.OptionletVolatilityStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructure_allowsExtrapolation(self)

# Register OptionletVolatilityStructure in _QuantExt:
_QuantExt.OptionletVolatilityStructure_swigregister(OptionletVolatilityStructure)

class OptionletVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.OptionletVolatilityStructureHandle_swiginit(self, _QuantExt.new_OptionletVolatilityStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< OptionletVolatilityStructure >":
        return _QuantExt.OptionletVolatilityStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.OptionletVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_OptionletVolatilityStructureHandle

    def referenceDate(self) -> "Date":
        return _QuantExt.OptionletVolatilityStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.OptionletVolatilityStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.OptionletVolatilityStructureHandle_calendar(self)

    def maxDate(self) -> "Date":
        return _QuantExt.OptionletVolatilityStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.OptionletVolatilityStructureHandle_maxTime(self)

    def minStrike(self) -> "Real":
        return _QuantExt.OptionletVolatilityStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.OptionletVolatilityStructureHandle_maxStrike(self)

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.OptionletVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.OptionletVolatilityStructureHandle_blackVariance(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.OptionletVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.OptionletVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.OptionletVolatilityStructureHandle_allowsExtrapolation(self)

# Register OptionletVolatilityStructureHandle in _QuantExt:
_QuantExt.OptionletVolatilityStructureHandle_swigregister(OptionletVolatilityStructureHandle)

class RelinkableOptionletVolatilityStructureHandle(OptionletVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableOptionletVolatilityStructureHandle_swiginit(self, _QuantExt.new_RelinkableOptionletVolatilityStructureHandle(*args))

    def linkTo(self, arg2: "OptionletVolatilityStructure") -> "void":
        return _QuantExt.RelinkableOptionletVolatilityStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableOptionletVolatilityStructureHandle

# Register RelinkableOptionletVolatilityStructureHandle in _QuantExt:
_QuantExt.RelinkableOptionletVolatilityStructureHandle_swigregister(RelinkableOptionletVolatilityStructureHandle)

class SwaptionVolatilityStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "SwaptionVolatilityStructure *":
        return _QuantExt.SwaptionVolatilityStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.SwaptionVolatilityStructure_asObservable(self)

    def __init__(self):
        _QuantExt.SwaptionVolatilityStructure_swiginit(self, _QuantExt.new_SwaptionVolatilityStructure())
    __swig_destroy__ = _QuantExt.delete_SwaptionVolatilityStructure

    def referenceDate(self) -> "Date":
        return _QuantExt.SwaptionVolatilityStructure_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.SwaptionVolatilityStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.SwaptionVolatilityStructure_calendar(self)

    def maxSwapTenor(self) -> "Period":
        return _QuantExt.SwaptionVolatilityStructure_maxSwapTenor(self)

    def maxSwapLength(self) -> "Time":
        return _QuantExt.SwaptionVolatilityStructure_maxSwapLength(self)

    def minStrike(self) -> "Real":
        return _QuantExt.SwaptionVolatilityStructure_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.SwaptionVolatilityStructure_maxStrike(self)

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.SwaptionVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.SwaptionVolatilityStructure_blackVariance(self, *args)

    def optionDateFromTenor(self, p: "Period") -> "Date":
        return _QuantExt.SwaptionVolatilityStructure_optionDateFromTenor(self, p)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.SwaptionVolatilityStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.SwaptionVolatilityStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructure_allowsExtrapolation(self)

# Register SwaptionVolatilityStructure in _QuantExt:
_QuantExt.SwaptionVolatilityStructure_swigregister(SwaptionVolatilityStructure)

class SwaptionVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwaptionVolatilityStructureHandle_swiginit(self, _QuantExt.new_SwaptionVolatilityStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< SwaptionVolatilityStructure >":
        return _QuantExt.SwaptionVolatilityStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.SwaptionVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_SwaptionVolatilityStructureHandle

    def referenceDate(self) -> "Date":
        return _QuantExt.SwaptionVolatilityStructureHandle_referenceDate(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.SwaptionVolatilityStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.SwaptionVolatilityStructureHandle_calendar(self)

    def maxSwapTenor(self) -> "Period":
        return _QuantExt.SwaptionVolatilityStructureHandle_maxSwapTenor(self)

    def maxSwapLength(self) -> "Time":
        return _QuantExt.SwaptionVolatilityStructureHandle_maxSwapLength(self)

    def minStrike(self) -> "Real":
        return _QuantExt.SwaptionVolatilityStructureHandle_minStrike(self)

    def maxStrike(self) -> "Real":
        return _QuantExt.SwaptionVolatilityStructureHandle_maxStrike(self)

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.SwaptionVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args) -> "Real":
        return _QuantExt.SwaptionVolatilityStructureHandle_blackVariance(self, *args)

    def optionDateFromTenor(self, p: "Period") -> "Date":
        return _QuantExt.SwaptionVolatilityStructureHandle_optionDateFromTenor(self, p)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.SwaptionVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.SwaptionVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.SwaptionVolatilityStructureHandle_allowsExtrapolation(self)

# Register SwaptionVolatilityStructureHandle in _QuantExt:
_QuantExt.SwaptionVolatilityStructureHandle_swigregister(SwaptionVolatilityStructureHandle)

class RelinkableSwaptionVolatilityStructureHandle(SwaptionVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableSwaptionVolatilityStructureHandle_swiginit(self, _QuantExt.new_RelinkableSwaptionVolatilityStructureHandle(*args))

    def linkTo(self, arg2: "SwaptionVolatilityStructure") -> "void":
        return _QuantExt.RelinkableSwaptionVolatilityStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableSwaptionVolatilityStructureHandle

# Register RelinkableSwaptionVolatilityStructureHandle in _QuantExt:
_QuantExt.RelinkableSwaptionVolatilityStructureHandle_swigregister(RelinkableSwaptionVolatilityStructureHandle)

class BlackConstantVol(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BlackConstantVol_swiginit(self, _QuantExt.new_BlackConstantVol(*args))
    __swig_destroy__ = _QuantExt.delete_BlackConstantVol

# Register BlackConstantVol in _QuantExt:
_QuantExt.BlackConstantVol_swigregister(BlackConstantVol)

class BlackVarianceCurve(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate: "Date", dates: "DateVector", volatilities: "DoubleVector", dayCounter: "DayCounter", forceMonotoneVariance: "bool"=True):
        _QuantExt.BlackVarianceCurve_swiginit(self, _QuantExt.new_BlackVarianceCurve(referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance))
    __swig_destroy__ = _QuantExt.delete_BlackVarianceCurve

# Register BlackVarianceCurve in _QuantExt:
_QuantExt.BlackVarianceCurve_swigregister(BlackVarianceCurve)

class BlackVarianceSurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.BlackVarianceSurface_swiginit(self, _QuantExt.new_BlackVarianceSurface(*args, **kwargs))

    def setInterpolation(self, *args) -> "void":
        return _QuantExt.BlackVarianceSurface_setInterpolation(self, *args)
    ConstantExtrapolation = _QuantExt.BlackVarianceSurface_ConstantExtrapolation
    InterpolatorDefaultExtrapolation = _QuantExt.BlackVarianceSurface_InterpolatorDefaultExtrapolation
    __swig_destroy__ = _QuantExt.delete_BlackVarianceSurface

# Register BlackVarianceSurface in _QuantExt:
_QuantExt.BlackVarianceSurface_swigregister(BlackVarianceSurface)

class LocalConstantVol(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LocalConstantVol_swiginit(self, _QuantExt.new_LocalConstantVol(*args))
    __swig_destroy__ = _QuantExt.delete_LocalConstantVol

# Register LocalConstantVol in _QuantExt:
_QuantExt.LocalConstantVol_swigregister(LocalConstantVol)

class LocalVolSurface(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LocalVolSurface_swiginit(self, _QuantExt.new_LocalVolSurface(*args))
    __swig_destroy__ = _QuantExt.delete_LocalVolSurface

# Register LocalVolSurface in _QuantExt:
_QuantExt.LocalVolSurface_swigregister(LocalVolSurface)

class ConstantOptionletVolatility(OptionletVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ConstantOptionletVolatility_swiginit(self, _QuantExt.new_ConstantOptionletVolatility(*args))
    __swig_destroy__ = _QuantExt.delete_ConstantOptionletVolatility

# Register ConstantOptionletVolatility in _QuantExt:
_QuantExt.ConstantOptionletVolatility_swigregister(ConstantOptionletVolatility)

class ConstantSwaptionVolatility(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ConstantSwaptionVolatility_swiginit(self, _QuantExt.new_ConstantSwaptionVolatility(*args))
    __swig_destroy__ = _QuantExt.delete_ConstantSwaptionVolatility

# Register ConstantSwaptionVolatility in _QuantExt:
_QuantExt.ConstantSwaptionVolatility_swigregister(ConstantSwaptionVolatility)

class SwaptionVolatilityMatrix(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwaptionVolatilityMatrix_swiginit(self, _QuantExt.new_SwaptionVolatilityMatrix(*args))
    __swig_destroy__ = _QuantExt.delete_SwaptionVolatilityMatrix

# Register SwaptionVolatilityMatrix in _QuantExt:
_QuantExt.SwaptionVolatilityMatrix_swigregister(SwaptionVolatilityMatrix)

class SwaptionVolCube1(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwaptionVolCube1_swiginit(self, _QuantExt.new_SwaptionVolCube1(*args))

    def sparseSabrParameters(self) -> "Matrix":
        return _QuantExt.SwaptionVolCube1_sparseSabrParameters(self)

    def denseSabrParameters(self) -> "Matrix":
        return _QuantExt.SwaptionVolCube1_denseSabrParameters(self)

    def marketVolCube(self) -> "Matrix":
        return _QuantExt.SwaptionVolCube1_marketVolCube(self)

    def volCubeAtmCalibrated(self) -> "Matrix":
        return _QuantExt.SwaptionVolCube1_volCubeAtmCalibrated(self)
    __swig_destroy__ = _QuantExt.delete_SwaptionVolCube1

# Register SwaptionVolCube1 in _QuantExt:
_QuantExt.SwaptionVolCube1_swigregister(SwaptionVolCube1)

class SwaptionVolCube2(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure: "SwaptionVolatilityStructureHandle", optionTenors: "PeriodVector", swapTenors: "PeriodVector", strikeSpreads: "DoubleVector", volSpreads: "QuoteHandleVectorVector", swapIndexBase: "SwapIndex", shortSwapIndexBase: "SwapIndex", vegaWeightedSmileFit: "bool"):
        _QuantExt.SwaptionVolCube2_swiginit(self, _QuantExt.new_SwaptionVolCube2(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndexBase, shortSwapIndexBase, vegaWeightedSmileFit))
    __swig_destroy__ = _QuantExt.delete_SwaptionVolCube2

# Register SwaptionVolCube2 in _QuantExt:
_QuantExt.SwaptionVolCube2_swigregister(SwaptionVolCube2)

class SmileSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "SmileSection *":
        return _QuantExt.SmileSection___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.SmileSection___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.SmileSection___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.SmileSection_asObservable(self)

    def __init__(self):
        _QuantExt.SmileSection_swiginit(self, _QuantExt.new_SmileSection())
    __swig_destroy__ = _QuantExt.delete_SmileSection

    def variance(self, strike: "Rate") -> "Real":
        return _QuantExt.SmileSection_variance(self, strike)

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.SmileSection_volatility(self, *args)

    def exerciseDate(self) -> "Date const &":
        return _QuantExt.SmileSection_exerciseDate(self)

    def volatilityType(self) -> "VolatilityType":
        return _QuantExt.SmileSection_volatilityType(self)

    def shift(self) -> "Rate":
        return _QuantExt.SmileSection_shift(self)

    def referenceDate(self) -> "Date const &":
        return _QuantExt.SmileSection_referenceDate(self)

    def exerciseTime(self) -> "Time":
        return _QuantExt.SmileSection_exerciseTime(self)

    def dayCounter(self) -> "DayCounter const &":
        return _QuantExt.SmileSection_dayCounter(self)

    def optionPrice(self, *args) -> "Real":
        return _QuantExt.SmileSection_optionPrice(self, *args)

    def digitalOptionPrice(self, *args) -> "Real":
        return _QuantExt.SmileSection_digitalOptionPrice(self, *args)

    def vega(self, strike: "Rate", discount: "Real"=1.0) -> "Real":
        return _QuantExt.SmileSection_vega(self, strike, discount)

    def density(self, strike: "Rate", discount: "Real"=1.0, gap: "Real"=1.0E-4) -> "Real":
        return _QuantExt.SmileSection_density(self, strike, discount, gap)

# Register SmileSection in _QuantExt:
_QuantExt.SmileSection_swigregister(SmileSection)

class FlatSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FlatSmileSection_swiginit(self, _QuantExt.new_FlatSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_FlatSmileSection

# Register FlatSmileSection in _QuantExt:
_QuantExt.FlatSmileSection_swigregister(FlatSmileSection)

class LinearInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LinearInterpolatedSmileSection_swiginit(self, _QuantExt.new_LinearInterpolatedSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_LinearInterpolatedSmileSection

# Register LinearInterpolatedSmileSection in _QuantExt:
_QuantExt.LinearInterpolatedSmileSection_swigregister(LinearInterpolatedSmileSection)

class CubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CubicInterpolatedSmileSection_swiginit(self, _QuantExt.new_CubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_CubicInterpolatedSmileSection

# Register CubicInterpolatedSmileSection in _QuantExt:
_QuantExt.CubicInterpolatedSmileSection_swigregister(CubicInterpolatedSmileSection)

class MonotonicCubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.MonotonicCubicInterpolatedSmileSection_swiginit(self, _QuantExt.new_MonotonicCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_MonotonicCubicInterpolatedSmileSection

# Register MonotonicCubicInterpolatedSmileSection in _QuantExt:
_QuantExt.MonotonicCubicInterpolatedSmileSection_swigregister(MonotonicCubicInterpolatedSmileSection)

class SplineCubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SplineCubicInterpolatedSmileSection_swiginit(self, _QuantExt.new_SplineCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_SplineCubicInterpolatedSmileSection

# Register SplineCubicInterpolatedSmileSection in _QuantExt:
_QuantExt.SplineCubicInterpolatedSmileSection_swigregister(SplineCubicInterpolatedSmileSection)

class SabrSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SabrSmileSection_swiginit(self, _QuantExt.new_SabrSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_SabrSmileSection

# Register SabrSmileSection in _QuantExt:
_QuantExt.SabrSmileSection_swigregister(SabrSmileSection)

class KahaleSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.KahaleSmileSection_swiginit(self, _QuantExt.new_KahaleSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_KahaleSmileSection

# Register KahaleSmileSection in _QuantExt:
_QuantExt.KahaleSmileSection_swigregister(KahaleSmileSection)

class ZabrShortMaturityLognormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZabrShortMaturityLognormal_swiginit(self, _QuantExt.new_ZabrShortMaturityLognormal())
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityLognormal

# Register ZabrShortMaturityLognormal in _QuantExt:
_QuantExt.ZabrShortMaturityLognormal_swigregister(ZabrShortMaturityLognormal)

class ZabrShortMaturityNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZabrShortMaturityNormal_swiginit(self, _QuantExt.new_ZabrShortMaturityNormal())
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityNormal

# Register ZabrShortMaturityNormal in _QuantExt:
_QuantExt.ZabrShortMaturityNormal_swigregister(ZabrShortMaturityNormal)

class ZabrLocalVolatility(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZabrLocalVolatility_swiginit(self, _QuantExt.new_ZabrLocalVolatility())
    __swig_destroy__ = _QuantExt.delete_ZabrLocalVolatility

# Register ZabrLocalVolatility in _QuantExt:
_QuantExt.ZabrLocalVolatility_swigregister(ZabrLocalVolatility)

class ZabrFullFd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZabrFullFd_swiginit(self, _QuantExt.new_ZabrFullFd())
    __swig_destroy__ = _QuantExt.delete_ZabrFullFd

# Register ZabrFullFd in _QuantExt:
_QuantExt.ZabrFullFd_swigregister(ZabrFullFd)

class ZabrShortMaturityLognormalSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrShortMaturityLognormalSmileSection_swiginit(self, _QuantExt.new_ZabrShortMaturityLognormalSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityLognormalSmileSection

# Register ZabrShortMaturityLognormalSmileSection in _QuantExt:
_QuantExt.ZabrShortMaturityLognormalSmileSection_swigregister(ZabrShortMaturityLognormalSmileSection)

class ZabrShortMaturityNormalSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrShortMaturityNormalSmileSection_swiginit(self, _QuantExt.new_ZabrShortMaturityNormalSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityNormalSmileSection

# Register ZabrShortMaturityNormalSmileSection in _QuantExt:
_QuantExt.ZabrShortMaturityNormalSmileSection_swigregister(ZabrShortMaturityNormalSmileSection)

class ZabrLocalVolatilitySmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrLocalVolatilitySmileSection_swiginit(self, _QuantExt.new_ZabrLocalVolatilitySmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_ZabrLocalVolatilitySmileSection

# Register ZabrLocalVolatilitySmileSection in _QuantExt:
_QuantExt.ZabrLocalVolatilitySmileSection_swigregister(ZabrLocalVolatilitySmileSection)

class ZabrFullFdSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrFullFdSmileSection_swiginit(self, _QuantExt.new_ZabrFullFdSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_ZabrFullFdSmileSection

# Register ZabrFullFdSmileSection in _QuantExt:
_QuantExt.ZabrFullFdSmileSection_swigregister(ZabrFullFdSmileSection)

class ZabrShortMaturityLognormalInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_swiginit(self, _QuantExt.new_ZabrShortMaturityLognormalInterpolatedSmileSection(*args))

    def alpha(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_beta(self)

    def nu(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_nu(self)

    def rho(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_rho(self)

    def rmsError(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_rmsError(self)

    def maxError(self) -> "Real":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityLognormalInterpolatedSmileSection

# Register ZabrShortMaturityLognormalInterpolatedSmileSection in _QuantExt:
_QuantExt.ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister(ZabrShortMaturityLognormalInterpolatedSmileSection)

class ZabrShortMaturityNormalInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_swiginit(self, _QuantExt.new_ZabrShortMaturityNormalInterpolatedSmileSection(*args))

    def alpha(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_beta(self)

    def nu(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_nu(self)

    def rho(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_rho(self)

    def rmsError(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_rmsError(self)

    def maxError(self) -> "Real":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantExt.delete_ZabrShortMaturityNormalInterpolatedSmileSection

# Register ZabrShortMaturityNormalInterpolatedSmileSection in _QuantExt:
_QuantExt.ZabrShortMaturityNormalInterpolatedSmileSection_swigregister(ZabrShortMaturityNormalInterpolatedSmileSection)

class ZabrLocalVolatilityInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_swiginit(self, _QuantExt.new_ZabrLocalVolatilityInterpolatedSmileSection(*args))

    def alpha(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_beta(self)

    def nu(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_nu(self)

    def rho(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_rho(self)

    def rmsError(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_rmsError(self)

    def maxError(self) -> "Real":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_maxError(self)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantExt.delete_ZabrLocalVolatilityInterpolatedSmileSection

# Register ZabrLocalVolatilityInterpolatedSmileSection in _QuantExt:
_QuantExt.ZabrLocalVolatilityInterpolatedSmileSection_swigregister(ZabrLocalVolatilityInterpolatedSmileSection)

class ZabrFullFdInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZabrFullFdInterpolatedSmileSection_swiginit(self, _QuantExt.new_ZabrFullFdInterpolatedSmileSection(*args))

    def alpha(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_beta(self)

    def nu(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_nu(self)

    def rho(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_rho(self)

    def rmsError(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_rmsError(self)

    def maxError(self) -> "Real":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_maxError(self)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ZabrFullFdInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantExt.delete_ZabrFullFdInterpolatedSmileSection

# Register ZabrFullFdInterpolatedSmileSection in _QuantExt:
_QuantExt.ZabrFullFdInterpolatedSmileSection_swigregister(ZabrFullFdInterpolatedSmileSection)

class NoArbSabrSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NoArbSabrSmileSection_swiginit(self, _QuantExt.new_NoArbSabrSmileSection(*args))
    __swig_destroy__ = _QuantExt.delete_NoArbSabrSmileSection

# Register NoArbSabrSmileSection in _QuantExt:
_QuantExt.NoArbSabrSmileSection_swigregister(NoArbSabrSmileSection)

class NoArbSabrInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NoArbSabrInterpolatedSmileSection_swiginit(self, _QuantExt.new_NoArbSabrInterpolatedSmileSection(*args))

    def alpha(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_beta(self)

    def nu(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_nu(self)

    def rho(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_rho(self)

    def rmsError(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_rmsError(self)

    def maxError(self) -> "Real":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_maxError(self)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.NoArbSabrInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantExt.delete_NoArbSabrInterpolatedSmileSection

# Register NoArbSabrInterpolatedSmileSection in _QuantExt:
_QuantExt.NoArbSabrInterpolatedSmileSection_swigregister(NoArbSabrInterpolatedSmileSection)

class StochasticProcess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "StochasticProcess *":
        return _QuantExt.StochasticProcess___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.StochasticProcess___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.StochasticProcess___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.StochasticProcess_asObservable(self)

    def __init__(self):
        _QuantExt.StochasticProcess_swiginit(self, _QuantExt.new_StochasticProcess())
    __swig_destroy__ = _QuantExt.delete_StochasticProcess

    def size(self) -> "Size":
        return _QuantExt.StochasticProcess_size(self)

    def factors(self) -> "Size":
        return _QuantExt.StochasticProcess_factors(self)

    def initialValues(self) -> "Array":
        return _QuantExt.StochasticProcess_initialValues(self)

    def drift(self, t: "Time", x: "Array") -> "Array":
        return _QuantExt.StochasticProcess_drift(self, t, x)

    def diffusion(self, t: "Time", x: "Array") -> "Matrix":
        return _QuantExt.StochasticProcess_diffusion(self, t, x)

    def expectation(self, t0: "Time", x0: "Array", dt: "Time") -> "Array":
        return _QuantExt.StochasticProcess_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0: "Time", x0: "Array", dt: "Time") -> "Matrix":
        return _QuantExt.StochasticProcess_stdDeviation(self, t0, x0, dt)

    def covariance(self, t0: "Time", x0: "Array", dt: "Time") -> "Matrix":
        return _QuantExt.StochasticProcess_covariance(self, t0, x0, dt)

    def evolve(self, t0: "Time", x0: "Array", dt: "Time", dw: "Array") -> "Array":
        return _QuantExt.StochasticProcess_evolve(self, t0, x0, dt, dw)

# Register StochasticProcess in _QuantExt:
_QuantExt.StochasticProcess_swigregister(StochasticProcess)

class StochasticProcessVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.StochasticProcessVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.StochasticProcessVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.StochasticProcessVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::size_type":
        return _QuantExt.StochasticProcessVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< StochasticProcess > >::difference_type", j: "std::vector< boost::shared_ptr< StochasticProcess > >::difference_type") -> "std::vector< boost::shared_ptr< StochasticProcess >,std::allocator< boost::shared_ptr< StochasticProcess > > > *":
        return _QuantExt.StochasticProcessVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.StochasticProcessVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< StochasticProcess > >::difference_type", j: "std::vector< boost::shared_ptr< StochasticProcess > >::difference_type") -> "void":
        return _QuantExt.StochasticProcessVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.StochasticProcessVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< StochasticProcess > >::value_type const &":
        return _QuantExt.StochasticProcessVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.StochasticProcessVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::value_type":
        return _QuantExt.StochasticProcessVector_pop(self)

    def append(self, x: "StochasticProcess") -> "void":
        return _QuantExt.StochasticProcessVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.StochasticProcessVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::size_type":
        return _QuantExt.StochasticProcessVector_size(self)

    def swap(self, v: "StochasticProcessVector") -> "void":
        return _QuantExt.StochasticProcessVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::iterator":
        return _QuantExt.StochasticProcessVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::iterator":
        return _QuantExt.StochasticProcessVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::reverse_iterator":
        return _QuantExt.StochasticProcessVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::reverse_iterator":
        return _QuantExt.StochasticProcessVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.StochasticProcessVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::allocator_type":
        return _QuantExt.StochasticProcessVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.StochasticProcessVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< StochasticProcess > >::iterator":
        return _QuantExt.StochasticProcessVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.StochasticProcessVector_swiginit(self, _QuantExt.new_StochasticProcessVector(*args))

    def push_back(self, x: "StochasticProcess") -> "void":
        return _QuantExt.StochasticProcessVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::value_type const &":
        return _QuantExt.StochasticProcessVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::value_type const &":
        return _QuantExt.StochasticProcessVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< StochasticProcess > >::size_type", x: "StochasticProcess") -> "void":
        return _QuantExt.StochasticProcessVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.StochasticProcessVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.StochasticProcessVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< StochasticProcess > >::size_type") -> "void":
        return _QuantExt.StochasticProcessVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< StochasticProcess > >::size_type":
        return _QuantExt.StochasticProcessVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_StochasticProcessVector

# Register StochasticProcessVector in _QuantExt:
_QuantExt.StochasticProcessVector_swigregister(StochasticProcessVector)

class StochasticProcess1D(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def x0(self) -> "Real":
        return _QuantExt.StochasticProcess1D_x0(self)

    def drift(self, t: "Time", x: "Real") -> "Real":
        return _QuantExt.StochasticProcess1D_drift(self, t, x)

    def diffusion(self, t: "Time", x: "Real") -> "Real":
        return _QuantExt.StochasticProcess1D_diffusion(self, t, x)

    def expectation(self, t0: "Time", x0: "Real", dt: "Time") -> "Real":
        return _QuantExt.StochasticProcess1D_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0: "Time", x0: "Real", dt: "Time") -> "Real":
        return _QuantExt.StochasticProcess1D_stdDeviation(self, t0, x0, dt)

    def variance(self, t0: "Time", x0: "Real", dt: "Time") -> "Real":
        return _QuantExt.StochasticProcess1D_variance(self, t0, x0, dt)

    def evolve(self, t0: "Time", x0: "Real", dt: "Time", dw: "Real") -> "Real":
        return _QuantExt.StochasticProcess1D_evolve(self, t0, x0, dt, dw)

    def apply(self, x0: "Real", dx: "Real") -> "Real":
        return _QuantExt.StochasticProcess1D_apply(self, x0, dx)
    __swig_destroy__ = _QuantExt.delete_StochasticProcess1D

# Register StochasticProcess1D in _QuantExt:
_QuantExt.StochasticProcess1D_swigregister(StochasticProcess1D)

class GeneralizedBlackScholesProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", dividendTS: "YieldTermStructureHandle", riskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle"):
        _QuantExt.GeneralizedBlackScholesProcess_swiginit(self, _QuantExt.new_GeneralizedBlackScholesProcess(s0, dividendTS, riskFreeTS, volTS))

    def stateVariable(self) -> "Handle< Quote >":
        return _QuantExt.GeneralizedBlackScholesProcess_stateVariable(self)

    def dividendYield(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.GeneralizedBlackScholesProcess_dividendYield(self)

    def riskFreeRate(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.GeneralizedBlackScholesProcess_riskFreeRate(self)

    def blackVolatility(self) -> "Handle< BlackVolTermStructure >":
        return _QuantExt.GeneralizedBlackScholesProcess_blackVolatility(self)
    __swig_destroy__ = _QuantExt.delete_GeneralizedBlackScholesProcess

# Register GeneralizedBlackScholesProcess in _QuantExt:
_QuantExt.GeneralizedBlackScholesProcess_swigregister(GeneralizedBlackScholesProcess)

class BlackScholesProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", riskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle"):
        _QuantExt.BlackScholesProcess_swiginit(self, _QuantExt.new_BlackScholesProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _QuantExt.delete_BlackScholesProcess

# Register BlackScholesProcess in _QuantExt:
_QuantExt.BlackScholesProcess_swigregister(BlackScholesProcess)

class BlackScholesMertonProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", dividendTS: "YieldTermStructureHandle", riskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle"):
        _QuantExt.BlackScholesMertonProcess_swiginit(self, _QuantExt.new_BlackScholesMertonProcess(s0, dividendTS, riskFreeTS, volTS))
    __swig_destroy__ = _QuantExt.delete_BlackScholesMertonProcess

# Register BlackScholesMertonProcess in _QuantExt:
_QuantExt.BlackScholesMertonProcess_swigregister(BlackScholesMertonProcess)

class BlackProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", riskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle"):
        _QuantExt.BlackProcess_swiginit(self, _QuantExt.new_BlackProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _QuantExt.delete_BlackProcess

# Register BlackProcess in _QuantExt:
_QuantExt.BlackProcess_swigregister(BlackProcess)

class GarmanKohlagenProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", foreignRiskFreeTS: "YieldTermStructureHandle", domesticRiskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle"):
        _QuantExt.GarmanKohlagenProcess_swiginit(self, _QuantExt.new_GarmanKohlagenProcess(s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS))
    __swig_destroy__ = _QuantExt.delete_GarmanKohlagenProcess

# Register GarmanKohlagenProcess in _QuantExt:
_QuantExt.GarmanKohlagenProcess_swigregister(GarmanKohlagenProcess)

class Merton76Process(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stateVariable: "QuoteHandle", dividendTS: "YieldTermStructureHandle", riskFreeTS: "YieldTermStructureHandle", volTS: "BlackVolTermStructureHandle", jumpIntensity: "QuoteHandle", meanLogJump: "QuoteHandle", jumpVolatility: "QuoteHandle"):
        _QuantExt.Merton76Process_swiginit(self, _QuantExt.new_Merton76Process(stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility))
    __swig_destroy__ = _QuantExt.delete_Merton76Process

# Register Merton76Process in _QuantExt:
_QuantExt.Merton76Process_swigregister(Merton76Process)

class StochasticProcessArray(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, array: "StochasticProcessVector", correlation: "Matrix"):
        _QuantExt.StochasticProcessArray_swiginit(self, _QuantExt.new_StochasticProcessArray(array, correlation))
    __swig_destroy__ = _QuantExt.delete_StochasticProcessArray

# Register StochasticProcessArray in _QuantExt:
_QuantExt.StochasticProcessArray_swigregister(StochasticProcessArray)

class GeometricBrownianMotionProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialValue: "Real", mu: "Real", sigma: "Real"):
        _QuantExt.GeometricBrownianMotionProcess_swiginit(self, _QuantExt.new_GeometricBrownianMotionProcess(initialValue, mu, sigma))
    __swig_destroy__ = _QuantExt.delete_GeometricBrownianMotionProcess

# Register GeometricBrownianMotionProcess in _QuantExt:
_QuantExt.GeometricBrownianMotionProcess_swigregister(GeometricBrownianMotionProcess)

class VarianceGammaProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0: "QuoteHandle", dividendYield: "YieldTermStructureHandle", riskFreeRate: "YieldTermStructureHandle", sigma: "Real", nu: "Real", theta: "Real"):
        _QuantExt.VarianceGammaProcess_swiginit(self, _QuantExt.new_VarianceGammaProcess(s0, dividendYield, riskFreeRate, sigma, nu, theta))
    __swig_destroy__ = _QuantExt.delete_VarianceGammaProcess

# Register VarianceGammaProcess in _QuantExt:
_QuantExt.VarianceGammaProcess_swigregister(VarianceGammaProcess)

class HestonProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS: "YieldTermStructureHandle", dividendTS: "YieldTermStructureHandle", s0: "QuoteHandle", v0: "Real", kappa: "Real", theta: "Real", sigma: "Real", rho: "Real"):
        _QuantExt.HestonProcess_swiginit(self, _QuantExt.new_HestonProcess(riskFreeTS, dividendTS, s0, v0, kappa, theta, sigma, rho))

    def s0(self) -> "Handle< Quote >":
        return _QuantExt.HestonProcess_s0(self)

    def dividendYield(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.HestonProcess_dividendYield(self)

    def riskFreeRate(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.HestonProcess_riskFreeRate(self)
    __swig_destroy__ = _QuantExt.delete_HestonProcess

# Register HestonProcess in _QuantExt:
_QuantExt.HestonProcess_swigregister(HestonProcess)

class BatesProcess(HestonProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate: "YieldTermStructureHandle", dividendYield: "YieldTermStructureHandle", s0: "QuoteHandle", v0: "Real", kappa: "Real", theta: "Real", sigma: "Real", rho: "Real", lambda_parameter: "Real", nu: "Real", delta: "Real"):
        _QuantExt.BatesProcess_swiginit(self, _QuantExt.new_BatesProcess(riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, lambda_parameter, nu, delta))
    __swig_destroy__ = _QuantExt.delete_BatesProcess

# Register BatesProcess in _QuantExt:
_QuantExt.BatesProcess_swigregister(BatesProcess)

class HullWhiteProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS: "YieldTermStructureHandle", a: "Real", sigma: "Real"):
        _QuantExt.HullWhiteProcess_swiginit(self, _QuantExt.new_HullWhiteProcess(riskFreeTS, a, sigma))
    __swig_destroy__ = _QuantExt.delete_HullWhiteProcess

# Register HullWhiteProcess in _QuantExt:
_QuantExt.HullWhiteProcess_swigregister(HullWhiteProcess)

class HullWhiteForwardProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS: "YieldTermStructureHandle", a: "Real", sigma: "Real"):
        _QuantExt.HullWhiteForwardProcess_swiginit(self, _QuantExt.new_HullWhiteForwardProcess(riskFreeTS, a, sigma))

    def alpha(self, t: "Time") -> "Real":
        return _QuantExt.HullWhiteForwardProcess_alpha(self, t)

    def M_T(self, s: "Real", t: "Real", T: "Real") -> "Real":
        return _QuantExt.HullWhiteForwardProcess_M_T(self, s, t, T)

    def B(self, t: "Time", T: "Time") -> "Real":
        return _QuantExt.HullWhiteForwardProcess_B(self, t, T)

    def setForwardMeasureTime(self, t: "Time") -> "void":
        return _QuantExt.HullWhiteForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _QuantExt.delete_HullWhiteForwardProcess

# Register HullWhiteForwardProcess in _QuantExt:
_QuantExt.HullWhiteForwardProcess_swigregister(HullWhiteForwardProcess)

class GsrProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, times: "Array", vols: "Array", reversions: "Array", T: "Real const"=60.0):
        _QuantExt.GsrProcess_swiginit(self, _QuantExt.new_GsrProcess(times, vols, reversions, T))

    def sigma(self, t: "Time") -> "Real":
        return _QuantExt.GsrProcess_sigma(self, t)

    def reversion(self, t: "Time") -> "Real":
        return _QuantExt.GsrProcess_reversion(self, t)

    def y(self, t: "Time") -> "Real":
        return _QuantExt.GsrProcess_y(self, t)

    def G(self, t: "Time", T: "Time", x: "Real") -> "Real":
        return _QuantExt.GsrProcess_G(self, t, T, x)

    def setForwardMeasureTime(self, t: "Time") -> "void":
        return _QuantExt.GsrProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _QuantExt.delete_GsrProcess

# Register GsrProcess in _QuantExt:
_QuantExt.GsrProcess_swigregister(GsrProcess)


def as_gsr_process(proc: "StochasticProcess") -> "GsrProcessPtr":
    return _QuantExt.as_gsr_process(proc)
class ExtendedOrnsteinUhlenbeckProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, speed: "Real", sigma: "Volatility", x0: "Real", function: "PyObject *", intEps: "Real"=1e-4):
        _QuantExt.ExtendedOrnsteinUhlenbeckProcess_swiginit(self, _QuantExt.new_ExtendedOrnsteinUhlenbeckProcess(speed, sigma, x0, function, intEps))
    __swig_destroy__ = _QuantExt.delete_ExtendedOrnsteinUhlenbeckProcess

# Register ExtendedOrnsteinUhlenbeckProcess in _QuantExt:
_QuantExt.ExtendedOrnsteinUhlenbeckProcess_swigregister(ExtendedOrnsteinUhlenbeckProcess)

class ExtOUWithJumpsProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "ExtendedOrnsteinUhlenbeckProcess", Y0: "Real", beta: "Real", jumpIntensity: "Real", eta: "Real"):
        _QuantExt.ExtOUWithJumpsProcess_swiginit(self, _QuantExt.new_ExtOUWithJumpsProcess(process, Y0, beta, jumpIntensity, eta))
    __swig_destroy__ = _QuantExt.delete_ExtOUWithJumpsProcess

# Register ExtOUWithJumpsProcess in _QuantExt:
_QuantExt.ExtOUWithJumpsProcess_swigregister(ExtOUWithJumpsProcess)

class KlugeExtOUProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho: "Real", kluge: "ExtOUWithJumpsProcess", extOU: "ExtendedOrnsteinUhlenbeckProcess"):
        _QuantExt.KlugeExtOUProcess_swiginit(self, _QuantExt.new_KlugeExtOUProcess(rho, kluge, extOU))
    __swig_destroy__ = _QuantExt.delete_KlugeExtOUProcess

# Register KlugeExtOUProcess in _QuantExt:
_QuantExt.KlugeExtOUProcess_swigregister(KlugeExtOUProcess)

class PricingEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "PricingEngine *":
        return _QuantExt.PricingEngine___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.PricingEngine___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.PricingEngine___bool__(self)

    def __init__(self):
        _QuantExt.PricingEngine_swiginit(self, _QuantExt.new_PricingEngine())
    __swig_destroy__ = _QuantExt.delete_PricingEngine

# Register PricingEngine in _QuantExt:
_QuantExt.PricingEngine_swigregister(PricingEngine)

class Instrument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Instrument *":
        return _QuantExt.Instrument___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Instrument___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Instrument___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.Instrument_asObservable(self)

    def __init__(self):
        _QuantExt.Instrument_swiginit(self, _QuantExt.new_Instrument())
    __swig_destroy__ = _QuantExt.delete_Instrument

    def NPV(self) -> "Real":
        return _QuantExt.Instrument_NPV(self)

    def errorEstimate(self) -> "Real":
        return _QuantExt.Instrument_errorEstimate(self)

    def isExpired(self) -> "bool":
        return _QuantExt.Instrument_isExpired(self)

    def setPricingEngine(self, arg2: "PricingEngine") -> "void":
        return _QuantExt.Instrument_setPricingEngine(self, arg2)

    def recalculate(self) -> "void":
        return _QuantExt.Instrument_recalculate(self)

    def freeze(self) -> "void":
        return _QuantExt.Instrument_freeze(self)

    def unfreeze(self) -> "void":
        return _QuantExt.Instrument_unfreeze(self)

# Register Instrument in _QuantExt:
_QuantExt.Instrument_swigregister(Instrument)

class InstrumentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.InstrumentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.InstrumentVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _QuantExt.InstrumentVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "std::vector< boost::shared_ptr< Instrument >,std::allocator< boost::shared_ptr< Instrument > > > *":
        return _QuantExt.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Instrument > >::difference_type", j: "std::vector< boost::shared_ptr< Instrument > >::difference_type") -> "void":
        return _QuantExt.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _QuantExt.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.InstrumentVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type":
        return _QuantExt.InstrumentVector_pop(self)

    def append(self, x: "Instrument") -> "void":
        return _QuantExt.InstrumentVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.InstrumentVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _QuantExt.InstrumentVector_size(self)

    def swap(self, v: "InstrumentVector") -> "void":
        return _QuantExt.InstrumentVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _QuantExt.InstrumentVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _QuantExt.InstrumentVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        return _QuantExt.InstrumentVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Instrument > >::reverse_iterator":
        return _QuantExt.InstrumentVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.InstrumentVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Instrument > >::allocator_type":
        return _QuantExt.InstrumentVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.InstrumentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Instrument > >::iterator":
        return _QuantExt.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.InstrumentVector_swiginit(self, _QuantExt.new_InstrumentVector(*args))

    def push_back(self, x: "Instrument") -> "void":
        return _QuantExt.InstrumentVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _QuantExt.InstrumentVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Instrument > >::value_type const &":
        return _QuantExt.InstrumentVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type", x: "Instrument") -> "void":
        return _QuantExt.InstrumentVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.InstrumentVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.InstrumentVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Instrument > >::size_type") -> "void":
        return _QuantExt.InstrumentVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Instrument > >::size_type":
        return _QuantExt.InstrumentVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_InstrumentVector

# Register InstrumentVector in _QuantExt:
_QuantExt.InstrumentVector_swigregister(InstrumentVector)

class Stock(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote: "QuoteHandle"):
        _QuantExt.Stock_swiginit(self, _QuantExt.new_Stock(quote))
    __swig_destroy__ = _QuantExt.delete_Stock

# Register Stock in _QuantExt:
_QuantExt.Stock_swigregister(Stock)

class CompositeInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CompositeInstrument_swiginit(self, _QuantExt.new_CompositeInstrument())

    def add(self, instrument: "Instrument", multiplier: "Real"=1.0) -> "void":
        return _QuantExt.CompositeInstrument_add(self, instrument, multiplier)

    def subtract(self, instrument: "Instrument", multiplier: "Real"=1.0) -> "void":
        return _QuantExt.CompositeInstrument_subtract(self, instrument, multiplier)
    __swig_destroy__ = _QuantExt.delete_CompositeInstrument

# Register CompositeInstrument in _QuantExt:
_QuantExt.CompositeInstrument_swigregister(CompositeInstrument)

class DateGeneration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Backward = _QuantExt.DateGeneration_Backward
    Forward = _QuantExt.DateGeneration_Forward
    Zero = _QuantExt.DateGeneration_Zero
    ThirdWednesday = _QuantExt.DateGeneration_ThirdWednesday
    Twentieth = _QuantExt.DateGeneration_Twentieth
    TwentiethIMM = _QuantExt.DateGeneration_TwentiethIMM
    OldCDS = _QuantExt.DateGeneration_OldCDS
    CDS = _QuantExt.DateGeneration_CDS
    CDS2015 = _QuantExt.DateGeneration_CDS2015

    def __init__(self):
        _QuantExt.DateGeneration_swiginit(self, _QuantExt.new_DateGeneration())
    __swig_destroy__ = _QuantExt.delete_DateGeneration

# Register DateGeneration in _QuantExt:
_QuantExt.DateGeneration_swigregister(DateGeneration)

class Schedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Schedule_swiginit(self, _QuantExt.new_Schedule(*args))

    def __len__(self) -> "Size":
        return _QuantExt.Schedule___len__(self)

    def isRegular(self, i: "Size") -> "bool":
        return _QuantExt.Schedule_isRegular(self, i)

    def until(self, truncationDate: "Date") -> "Schedule":
        return _QuantExt.Schedule_until(self, truncationDate)

    def __getitem__(self, i: "Integer") -> "Date":
        return _QuantExt.Schedule___getitem__(self, i)
    __swig_destroy__ = _QuantExt.delete_Schedule

# Register Schedule in _QuantExt:
_QuantExt.Schedule_swigregister(Schedule)

class _MakeSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt._MakeSchedule_swiginit(self, _QuantExt.new__MakeSchedule())

    def fromDate(self, effectiveDate: "Date") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_fromDate(self, effectiveDate)

    def to(self, terminationDate: "Date") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_to(self, terminationDate)

    def withTenor(self, arg2: "Period") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withTenor(self, arg2)

    def withFrequency(self, arg2: "Frequency") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withFrequency(self, arg2)

    def withCalendar(self, arg2: "Calendar") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withCalendar(self, arg2)

    def withConvention(self, arg2: "BusinessDayConvention") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withConvention(self, arg2)

    def withTerminationDateConvention(self, arg2: "BusinessDayConvention") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withTerminationDateConvention(self, arg2)

    def withRule(self, arg2: "DateGeneration::Rule") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withRule(self, arg2)

    def forwards(self) -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_forwards(self)

    def backwards(self) -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_backwards(self)

    def endOfMonth(self, flag: "bool"=True) -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_endOfMonth(self, flag)

    def withFirstDate(self, d: "Date") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withFirstDate(self, d)

    def withNextToLastDate(self, d: "Date") -> "MakeSchedule &":
        return _QuantExt._MakeSchedule_withNextToLastDate(self, d)

    def schedule(self) -> "Schedule":
        return _QuantExt._MakeSchedule_schedule(self)
    __swig_destroy__ = _QuantExt.delete__MakeSchedule

# Register _MakeSchedule in _QuantExt:
_QuantExt._MakeSchedule_swigregister(_MakeSchedule)


def MakeSchedule(effectiveDate=None,terminationDate=None,tenor=None,
    frequency=None,calendar=None,convention=None,terminalDateConvention=None,
    rule=None,forwards=False,backwards=False,
    endOfMonth=None,firstDate=None,nextToLastDate=None):
    ms = _MakeSchedule()
    if effectiveDate is not None:
        ms.fromDate(effectiveDate)
    if terminationDate is not None:
        ms.to(terminationDate)
    if tenor is not None:
        ms.withTenor(tenor)
    if frequency is not None:
        ms.withFrequency(frequency)
    if calendar is not None:
        ms.withCalendar(calendar)
    if convention is not None:
        ms.withConvention(convention)
    if terminalDateConvention is not None:
        ms.withTerminationDateConvention(terminalDateConvention)
    if rule is not None:
        ms.withRule(rule)
    if forwards:
        ms.forwards()
    if backwards:
        ms.backwards()
    if endOfMonth is not None:
        ms.endOfMonth(endOfMonth)
    if firstDate is not None:
        ms.withFirstDate(firstDate)
    if nextToLastDate is not None:
        ms.withNextToLastDate(nextToLastDate)
    return ms.schedule()

class CashFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CashFlow *":
        return _QuantExt.CashFlow___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CashFlow___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CashFlow___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.CashFlow_asObservable(self)

    def __init__(self):
        _QuantExt.CashFlow_swiginit(self, _QuantExt.new_CashFlow())
    __swig_destroy__ = _QuantExt.delete_CashFlow

    def amount(self) -> "Real":
        return _QuantExt.CashFlow_amount(self)

    def date(self) -> "Date":
        return _QuantExt.CashFlow_date(self)

# Register CashFlow in _QuantExt:
_QuantExt.CashFlow_swigregister(CashFlow)

class Leg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.Leg___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Leg___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _QuantExt.Leg___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > > *":
        return _QuantExt.Leg___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.Leg___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< CashFlow > >::difference_type", j: "std::vector< boost::shared_ptr< CashFlow > >::difference_type") -> "void":
        return _QuantExt.Leg___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.Leg___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _QuantExt.Leg___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.Leg___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type":
        return _QuantExt.Leg_pop(self)

    def append(self, x: "CashFlow") -> "void":
        return _QuantExt.Leg_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.Leg_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _QuantExt.Leg_size(self)

    def swap(self, v: "Leg") -> "void":
        return _QuantExt.Leg_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _QuantExt.Leg_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _QuantExt.Leg_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        return _QuantExt.Leg_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< CashFlow > >::reverse_iterator":
        return _QuantExt.Leg_rend(self)

    def clear(self) -> "void":
        return _QuantExt.Leg_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< CashFlow > >::allocator_type":
        return _QuantExt.Leg_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.Leg_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< CashFlow > >::iterator":
        return _QuantExt.Leg_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.Leg_swiginit(self, _QuantExt.new_Leg(*args))

    def push_back(self, x: "CashFlow") -> "void":
        return _QuantExt.Leg_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _QuantExt.Leg_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< CashFlow > >::value_type const &":
        return _QuantExt.Leg_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type", x: "CashFlow") -> "void":
        return _QuantExt.Leg_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.Leg_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.Leg_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< CashFlow > >::size_type") -> "void":
        return _QuantExt.Leg_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< CashFlow > >::size_type":
        return _QuantExt.Leg_capacity(self)
    __swig_destroy__ = _QuantExt.delete_Leg

# Register Leg in _QuantExt:
_QuantExt.Leg_swigregister(Leg)

class SimpleCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        _QuantExt.SimpleCashFlow_swiginit(self, _QuantExt.new_SimpleCashFlow(amount, date))
    __swig_destroy__ = _QuantExt.delete_SimpleCashFlow

# Register SimpleCashFlow in _QuantExt:
_QuantExt.SimpleCashFlow_swigregister(SimpleCashFlow)

class Redemption(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        _QuantExt.Redemption_swiginit(self, _QuantExt.new_Redemption(amount, date))
    __swig_destroy__ = _QuantExt.delete_Redemption

# Register Redemption in _QuantExt:
_QuantExt.Redemption_swigregister(Redemption)

class AmortizingPayment(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        _QuantExt.AmortizingPayment_swiginit(self, _QuantExt.new_AmortizingPayment(amount, date))
    __swig_destroy__ = _QuantExt.delete_AmortizingPayment

# Register AmortizingPayment in _QuantExt:
_QuantExt.AmortizingPayment_swigregister(AmortizingPayment)

class Coupon(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self) -> "Real":
        return _QuantExt.Coupon_nominal(self)

    def accrualStartDate(self) -> "Date":
        return _QuantExt.Coupon_accrualStartDate(self)

    def accrualEndDate(self) -> "Date":
        return _QuantExt.Coupon_accrualEndDate(self)

    def referencePeriodStart(self) -> "Date":
        return _QuantExt.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self) -> "Date":
        return _QuantExt.Coupon_referencePeriodEnd(self)

    def exCouponDate(self) -> "Date":
        return _QuantExt.Coupon_exCouponDate(self)

    def rate(self) -> "Real":
        return _QuantExt.Coupon_rate(self)

    def accrualPeriod(self) -> "Time":
        return _QuantExt.Coupon_accrualPeriod(self)

    def accrualDays(self) -> "BigInteger":
        return _QuantExt.Coupon_accrualDays(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.Coupon_dayCounter(self)

    def accruedAmount(self, date: "Date") -> "Real":
        return _QuantExt.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _QuantExt.delete_Coupon

# Register Coupon in _QuantExt:
_QuantExt.Coupon_swigregister(Coupon)


def as_coupon(cf: "CashFlow") -> "CouponPtr":
    return _QuantExt.as_coupon(cf)
class FixedRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.FixedRateCoupon_swiginit(self, _QuantExt.new_FixedRateCoupon(*args, **kwargs))

    def interestRate(self) -> "InterestRate":
        return _QuantExt.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _QuantExt.delete_FixedRateCoupon

# Register FixedRateCoupon in _QuantExt:
_QuantExt.FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf: "CashFlow") -> "FixedRateCouponPtr":
    return _QuantExt.as_fixed_rate_coupon(cf)
class FloatingRateCouponPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "FloatingRateCouponPricer *":
        return _QuantExt.FloatingRateCouponPricer___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.FloatingRateCouponPricer___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.FloatingRateCouponPricer___bool__(self)

    def __init__(self):
        _QuantExt.FloatingRateCouponPricer_swiginit(self, _QuantExt.new_FloatingRateCouponPricer())
    __swig_destroy__ = _QuantExt.delete_FloatingRateCouponPricer

# Register FloatingRateCouponPricer in _QuantExt:
_QuantExt.FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)


def setCouponPricer(arg1: "Leg", arg2: "FloatingRateCouponPricer") -> "void":
    return _QuantExt.setCouponPricer(arg1, arg2)
class FloatingRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self) -> "Date":
        return _QuantExt.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self) -> "Integer":
        return _QuantExt.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self) -> "bool":
        return _QuantExt.FloatingRateCoupon_isInArrears(self)

    def gearing(self) -> "Real":
        return _QuantExt.FloatingRateCoupon_gearing(self)

    def spread(self) -> "Rate":
        return _QuantExt.FloatingRateCoupon_spread(self)

    def indexFixing(self) -> "Rate":
        return _QuantExt.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self) -> "Rate":
        return _QuantExt.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self) -> "Rate":
        return _QuantExt.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve: "YieldTermStructureHandle") -> "Real":
        return _QuantExt.FloatingRateCoupon_price(self, discountCurve)

    def index(self) -> "InterestRateIndexPtr":
        return _QuantExt.FloatingRateCoupon_index(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        return _QuantExt.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _QuantExt.delete_FloatingRateCoupon

# Register FloatingRateCoupon in _QuantExt:
_QuantExt.FloatingRateCoupon_swigregister(FloatingRateCoupon)


def as_floating_rate_coupon(cf: "CashFlow") -> "FloatingRateCouponPtr":
    return _QuantExt.as_floating_rate_coupon(cf)
class CappedFlooredCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.CappedFlooredCoupon_swiginit(self, _QuantExt.new_CappedFlooredCoupon(*args, **kwargs))

    def cap(self) -> "Rate":
        return _QuantExt.CappedFlooredCoupon_cap(self)

    def floor(self) -> "Rate":
        return _QuantExt.CappedFlooredCoupon_floor(self)

    def effectiveCap(self) -> "Rate":
        return _QuantExt.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self) -> "Rate":
        return _QuantExt.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self) -> "bool":
        return _QuantExt.CappedFlooredCoupon_isCapped(self)

    def isFloored(self) -> "bool":
        return _QuantExt.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        return _QuantExt.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _QuantExt.delete_CappedFlooredCoupon

# Register CappedFlooredCoupon in _QuantExt:
_QuantExt.CappedFlooredCoupon_swigregister(CappedFlooredCoupon)

class IborCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.IborCoupon_swiginit(self, _QuantExt.new_IborCoupon(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_IborCoupon

# Register IborCoupon in _QuantExt:
_QuantExt.IborCoupon_swigregister(IborCoupon)

class IborCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def capletVolatility(self) -> "Handle< OptionletVolatilityStructure >":
        return _QuantExt.IborCouponPricer_capletVolatility(self)

    def setCapletVolatility(self, *args) -> "void":
        return _QuantExt.IborCouponPricer_setCapletVolatility(self, *args)
    __swig_destroy__ = _QuantExt.delete_IborCouponPricer

# Register IborCouponPricer in _QuantExt:
_QuantExt.IborCouponPricer_swigregister(IborCouponPricer)

class BlackIborCouponPricer(IborCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BlackIborCouponPricer_swiginit(self, _QuantExt.new_BlackIborCouponPricer(*args))
    __swig_destroy__ = _QuantExt.delete_BlackIborCouponPricer

# Register BlackIborCouponPricer in _QuantExt:
_QuantExt.BlackIborCouponPricer_swigregister(BlackIborCouponPricer)

class CmsCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.CmsCoupon_swiginit(self, _QuantExt.new_CmsCoupon(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_CmsCoupon

# Register CmsCoupon in _QuantExt:
_QuantExt.CmsCoupon_swigregister(CmsCoupon)

class CmsSpreadCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.CmsSpreadCoupon_swiginit(self, _QuantExt.new_CmsSpreadCoupon(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_CmsSpreadCoupon

# Register CmsSpreadCoupon in _QuantExt:
_QuantExt.CmsSpreadCoupon_swigregister(CmsSpreadCoupon)

class CmsCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swaptionVolatility(self) -> "Handle< SwaptionVolatilityStructure >":
        return _QuantExt.CmsCouponPricer_swaptionVolatility(self)

    def setSwaptionVolatility(self, *args) -> "void":
        return _QuantExt.CmsCouponPricer_setSwaptionVolatility(self, *args)
    __swig_destroy__ = _QuantExt.delete_CmsCouponPricer

# Register CmsCouponPricer in _QuantExt:
_QuantExt.CmsCouponPricer_swigregister(CmsCouponPricer)

class GFunctionFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Standard = _QuantExt.GFunctionFactory_Standard
    ExactYield = _QuantExt.GFunctionFactory_ExactYield
    ParallelShifts = _QuantExt.GFunctionFactory_ParallelShifts
    NonParallelShifts = _QuantExt.GFunctionFactory_NonParallelShifts
    __swig_destroy__ = _QuantExt.delete_GFunctionFactory

# Register GFunctionFactory in _QuantExt:
_QuantExt.GFunctionFactory_swigregister(GFunctionFactory)

class AnalyticHaganPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v: "SwaptionVolatilityStructureHandle", model: "GFunctionFactory::YieldCurveModel", meanReversion: "QuoteHandle"):
        _QuantExt.AnalyticHaganPricer_swiginit(self, _QuantExt.new_AnalyticHaganPricer(v, model, meanReversion))
    __swig_destroy__ = _QuantExt.delete_AnalyticHaganPricer

# Register AnalyticHaganPricer in _QuantExt:
_QuantExt.AnalyticHaganPricer_swigregister(AnalyticHaganPricer)

class NumericHaganPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v: "SwaptionVolatilityStructureHandle", model: "GFunctionFactory::YieldCurveModel", meanReversion: "QuoteHandle", lowerLimit: "Rate"=0.0, upperLimit: "Rate"=1.0, precision: "Real"=1.0e-6):
        _QuantExt.NumericHaganPricer_swiginit(self, _QuantExt.new_NumericHaganPricer(v, model, meanReversion, lowerLimit, upperLimit, precision))
    __swig_destroy__ = _QuantExt.delete_NumericHaganPricer

# Register NumericHaganPricer in _QuantExt:
_QuantExt.NumericHaganPricer_swigregister(NumericHaganPricer)

class CappedFlooredCmsCoupon(CappedFlooredCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CappedFlooredCmsCoupon_swiginit(self, _QuantExt.new_CappedFlooredCmsCoupon(*args))
    __swig_destroy__ = _QuantExt.delete_CappedFlooredCmsCoupon

# Register CappedFlooredCmsCoupon in _QuantExt:
_QuantExt.CappedFlooredCmsCoupon_swigregister(CappedFlooredCmsCoupon)

class CappedFlooredCmsSpreadCoupon(CappedFlooredCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CappedFlooredCmsSpreadCoupon_swiginit(self, _QuantExt.new_CappedFlooredCmsSpreadCoupon(*args))
    __swig_destroy__ = _QuantExt.delete_CappedFlooredCmsSpreadCoupon

# Register CappedFlooredCmsSpreadCoupon in _QuantExt:
_QuantExt.CappedFlooredCmsSpreadCoupon_swigregister(CappedFlooredCmsSpreadCoupon)

class LinearTsrPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LinearTsrPricer_swiginit(self, _QuantExt.new_LinearTsrPricer(*args))
    __swig_destroy__ = _QuantExt.delete_LinearTsrPricer

# Register LinearTsrPricer in _QuantExt:
_QuantExt.LinearTsrPricer_swigregister(LinearTsrPricer)

class CmsSpreadCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correlation(self) -> "Handle< Quote >":
        return _QuantExt.CmsSpreadCouponPricer_correlation(self)

    def setCorrelation(self, *args) -> "void":
        return _QuantExt.CmsSpreadCouponPricer_setCorrelation(self, *args)
    __swig_destroy__ = _QuantExt.delete_CmsSpreadCouponPricer

# Register CmsSpreadCouponPricer in _QuantExt:
_QuantExt.CmsSpreadCouponPricer_swigregister(CmsSpreadCouponPricer)

class LognormalCmsSpreadPricer(CmsSpreadCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LognormalCmsSpreadPricer_swiginit(self, _QuantExt.new_LognormalCmsSpreadPricer(*args))

    def swapletPrice(self) -> "Real":
        return _QuantExt.LognormalCmsSpreadPricer_swapletPrice(self)

    def swapletRate(self) -> "Rate":
        return _QuantExt.LognormalCmsSpreadPricer_swapletRate(self)

    def capletPrice(self, effectiveCap: "Rate") -> "Real":
        return _QuantExt.LognormalCmsSpreadPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap: "Rate") -> "Rate":
        return _QuantExt.LognormalCmsSpreadPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor: "Rate") -> "Real":
        return _QuantExt.LognormalCmsSpreadPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor: "Rate") -> "Rate":
        return _QuantExt.LognormalCmsSpreadPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _QuantExt.delete_LognormalCmsSpreadPricer

# Register LognormalCmsSpreadPricer in _QuantExt:
_QuantExt.LognormalCmsSpreadPricer_swigregister(LognormalCmsSpreadPricer)


def FixedRateLeg(*args, **kwargs) -> "Leg":
    return _QuantExt.FixedRateLeg(*args, **kwargs)

def IborLeg(*args, **kwargs) -> "Leg":
    return _QuantExt.IborLeg(*args, **kwargs)

def CmsLeg(*args, **kwargs) -> "Leg":
    return _QuantExt.CmsLeg(*args, **kwargs)

def CmsZeroLeg(*args, **kwargs) -> "Leg":
    return _QuantExt.CmsZeroLeg(*args, **kwargs)

def CmsSpreadLeg(*args, **kwargs) -> "Leg":
    return _QuantExt.CmsSpreadLeg(*args, **kwargs)
class Duration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _QuantExt.Duration_Simple
    Macaulay = _QuantExt.Duration_Macaulay
    Modified = _QuantExt.Duration_Modified

    def __init__(self):
        _QuantExt.Duration_swiginit(self, _QuantExt.new_Duration())
    __swig_destroy__ = _QuantExt.delete_Duration

# Register Duration in _QuantExt:
_QuantExt.Duration_swigregister(Duration)

class CashFlows(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(arg1: "Leg") -> "Date":
        return _QuantExt.CashFlows_startDate(arg1)

    @staticmethod
    def maturityDate(arg1: "Leg") -> "Date":
        return _QuantExt.CashFlows_maturityDate(arg1)

    @staticmethod
    def previousCashFlowDate(*args) -> "Date":
        return _QuantExt.CashFlows_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args) -> "Date":
        return _QuantExt.CashFlows_nextCashFlowDate(*args)

    @staticmethod
    def nextCashFlowAmount(*args) -> "Real":
        return _QuantExt.CashFlows_nextCashFlowAmount(*args)

    @staticmethod
    def previousCashFlowAmount(*args) -> "Real":
        return _QuantExt.CashFlows_previousCashFlowAmount(*args)

    @staticmethod
    def npv(*args) -> "Real":
        return _QuantExt.CashFlows_npv(*args)

    @staticmethod
    def bps(*args) -> "Real":
        return _QuantExt.CashFlows_bps(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        return _QuantExt.CashFlows_atmRate(*args)

    @staticmethod
    def yieldRate(*args) -> "Rate":
        return _QuantExt.CashFlows_yieldRate(*args)

    @staticmethod
    def duration(*args) -> "Time":
        return _QuantExt.CashFlows_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        return _QuantExt.CashFlows_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        return _QuantExt.CashFlows_basisPointValue(*args)

    @staticmethod
    def zSpread(*args) -> "Spread":
        return _QuantExt.CashFlows_zSpread(*args)
    __swig_destroy__ = _QuantExt.delete_CashFlows

# Register CashFlows in _QuantExt:
_QuantExt.CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg1: "Leg") -> "Date":
    return _QuantExt.CashFlows_startDate(arg1)

def CashFlows_maturityDate(arg1: "Leg") -> "Date":
    return _QuantExt.CashFlows_maturityDate(arg1)

def CashFlows_previousCashFlowDate(*args) -> "Date":
    return _QuantExt.CashFlows_previousCashFlowDate(*args)

def CashFlows_nextCashFlowDate(*args) -> "Date":
    return _QuantExt.CashFlows_nextCashFlowDate(*args)

def CashFlows_nextCashFlowAmount(*args) -> "Real":
    return _QuantExt.CashFlows_nextCashFlowAmount(*args)

def CashFlows_previousCashFlowAmount(*args) -> "Real":
    return _QuantExt.CashFlows_previousCashFlowAmount(*args)

def CashFlows_npv(*args) -> "Real":
    return _QuantExt.CashFlows_npv(*args)

def CashFlows_bps(*args) -> "Real":
    return _QuantExt.CashFlows_bps(*args)

def CashFlows_atmRate(*args) -> "Rate":
    return _QuantExt.CashFlows_atmRate(*args)

def CashFlows_yieldRate(*args) -> "Rate":
    return _QuantExt.CashFlows_yieldRate(*args)

def CashFlows_duration(*args) -> "Time":
    return _QuantExt.CashFlows_duration(*args)

def CashFlows_convexity(*args) -> "Real":
    return _QuantExt.CashFlows_convexity(*args)

def CashFlows_basisPointValue(*args) -> "Real":
    return _QuantExt.CashFlows_basisPointValue(*args)

def CashFlows_zSpread(*args) -> "Spread":
    return _QuantExt.CashFlows_zSpread(*args)

class CalibrationHelperBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CalibrationHelperBase *":
        return _QuantExt.CalibrationHelperBase___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CalibrationHelperBase___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CalibrationHelperBase___bool__(self)

    def __init__(self):
        _QuantExt.CalibrationHelperBase_swiginit(self, _QuantExt.new_CalibrationHelperBase())
    __swig_destroy__ = _QuantExt.delete_CalibrationHelperBase

    def calibrationError(self) -> "Real":
        return _QuantExt.CalibrationHelperBase_calibrationError(self)

# Register CalibrationHelperBase in _QuantExt:
_QuantExt.CalibrationHelperBase_swigregister(CalibrationHelperBase)

class BlackCalibrationHelper(CalibrationHelperBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    RelativePriceError = _QuantExt.BlackCalibrationHelper_RelativePriceError
    PriceError = _QuantExt.BlackCalibrationHelper_PriceError
    ImpliedVolError = _QuantExt.BlackCalibrationHelper_ImpliedVolError

    def setPricingEngine(self, engine: "PricingEngine") -> "void":
        return _QuantExt.BlackCalibrationHelper_setPricingEngine(self, engine)

    def marketValue(self) -> "Real":
        return _QuantExt.BlackCalibrationHelper_marketValue(self)

    def modelValue(self) -> "Real":
        return _QuantExt.BlackCalibrationHelper_modelValue(self)

    def impliedVolatility(self, targetValue: "Real", accuracy: "Real", maxEvaluations: "Size", minVol: "Volatility", maxVol: "Volatility") -> "Volatility":
        return _QuantExt.BlackCalibrationHelper_impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol)

    def blackPrice(self, volatility: "Volatility") -> "Real":
        return _QuantExt.BlackCalibrationHelper_blackPrice(self, volatility)

    def volatility(self) -> "Handle< Quote >":
        return _QuantExt.BlackCalibrationHelper_volatility(self)

    def volatilityType(self) -> "VolatilityType":
        return _QuantExt.BlackCalibrationHelper_volatilityType(self)

    def swaptionExpiryDate(self) -> "Date":
        return _QuantExt.BlackCalibrationHelper_swaptionExpiryDate(self)

    def swaptionStrike(self) -> "Real":
        return _QuantExt.BlackCalibrationHelper_swaptionStrike(self)

    def swaptionNominal(self) -> "Real":
        return _QuantExt.BlackCalibrationHelper_swaptionNominal(self)

    def swaptionMaturityDate(self) -> "Date":
        return _QuantExt.BlackCalibrationHelper_swaptionMaturityDate(self)
    __swig_destroy__ = _QuantExt.delete_BlackCalibrationHelper

# Register BlackCalibrationHelper in _QuantExt:
_QuantExt.BlackCalibrationHelper_swigregister(BlackCalibrationHelper)


def CalibrationHelper(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (CalibrationHelper.__name__, BlackCalibrationHelper.__name__))
    return BlackCalibrationHelper(*args, **kwargs)


def as_black_helper(h: "CalibrationHelperBase") -> "BlackCalibrationHelperPtr":
    return _QuantExt.as_black_helper(h)
class SwaptionHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwaptionHelper_swiginit(self, _QuantExt.new_SwaptionHelper(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > >":
        return _QuantExt.SwaptionHelper_times(self)
    __swig_destroy__ = _QuantExt.delete_SwaptionHelper

# Register SwaptionHelper in _QuantExt:
_QuantExt.SwaptionHelper_swigregister(SwaptionHelper)

class CapHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CapHelper_swiginit(self, _QuantExt.new_CapHelper(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > >":
        return _QuantExt.CapHelper_times(self)
    __swig_destroy__ = _QuantExt.delete_CapHelper

# Register CapHelper in _QuantExt:
_QuantExt.CapHelper_swigregister(CapHelper)

class HestonModelHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.HestonModelHelper_swiginit(self, _QuantExt.new_HestonModelHelper(*args))
    __swig_destroy__ = _QuantExt.delete_HestonModelHelper

# Register HestonModelHelper in _QuantExt:
_QuantExt.HestonModelHelper_swigregister(HestonModelHelper)

class CalibrationHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.CalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.CalibrationHelperVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CalibrationHelperVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::size_type":
        return _QuantExt.CalibrationHelperVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::difference_type", j: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::difference_type") -> "std::vector< boost::shared_ptr< CalibrationHelperBase >,std::allocator< boost::shared_ptr< CalibrationHelperBase > > > *":
        return _QuantExt.CalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.CalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::difference_type", j: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::difference_type") -> "void":
        return _QuantExt.CalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.CalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::value_type const &":
        return _QuantExt.CalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.CalibrationHelperVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::value_type":
        return _QuantExt.CalibrationHelperVector_pop(self)

    def append(self, x: "CalibrationHelperBase") -> "void":
        return _QuantExt.CalibrationHelperVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.CalibrationHelperVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::size_type":
        return _QuantExt.CalibrationHelperVector_size(self)

    def swap(self, v: "CalibrationHelperVector") -> "void":
        return _QuantExt.CalibrationHelperVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::iterator":
        return _QuantExt.CalibrationHelperVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::iterator":
        return _QuantExt.CalibrationHelperVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::reverse_iterator":
        return _QuantExt.CalibrationHelperVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::reverse_iterator":
        return _QuantExt.CalibrationHelperVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.CalibrationHelperVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::allocator_type":
        return _QuantExt.CalibrationHelperVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.CalibrationHelperVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::iterator":
        return _QuantExt.CalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.CalibrationHelperVector_swiginit(self, _QuantExt.new_CalibrationHelperVector(*args))

    def push_back(self, x: "CalibrationHelperBase") -> "void":
        return _QuantExt.CalibrationHelperVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::value_type const &":
        return _QuantExt.CalibrationHelperVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::value_type const &":
        return _QuantExt.CalibrationHelperVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::size_type", x: "CalibrationHelperBase") -> "void":
        return _QuantExt.CalibrationHelperVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.CalibrationHelperVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.CalibrationHelperVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< CalibrationHelperBase > >::size_type") -> "void":
        return _QuantExt.CalibrationHelperVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< CalibrationHelperBase > >::size_type":
        return _QuantExt.CalibrationHelperVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_CalibrationHelperVector

# Register CalibrationHelperVector in _QuantExt:
_QuantExt.CalibrationHelperVector_swigregister(CalibrationHelperVector)

class CalibratedModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CalibratedModel *":
        return _QuantExt.CalibratedModel___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CalibratedModel___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CalibratedModel___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.CalibratedModel_asObservable(self)

    def __init__(self):
        _QuantExt.CalibratedModel_swiginit(self, _QuantExt.new_CalibratedModel())
    __swig_destroy__ = _QuantExt.delete_CalibratedModel

    def params(self) -> "Array":
        return _QuantExt.CalibratedModel_params(self)

    def calibrate(self, *args) -> "void":
        return _QuantExt.CalibratedModel_calibrate(self, *args)

    def setParams(self, params: "Array") -> "void":
        return _QuantExt.CalibratedModel_setParams(self, params)

    def value(self, params: "Array", arg3: "CalibrationHelperVector") -> "Real":
        return _QuantExt.CalibratedModel_value(self, params, arg3)

# Register CalibratedModel in _QuantExt:
_QuantExt.CalibratedModel_swigregister(CalibratedModel)

class CalibratedModelHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CalibratedModelHandle_swiginit(self, _QuantExt.new_CalibratedModelHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< CalibratedModel >":
        return _QuantExt.CalibratedModelHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CalibratedModelHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CalibratedModelHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.CalibratedModelHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_CalibratedModelHandle

    def params(self) -> "Array":
        return _QuantExt.CalibratedModelHandle_params(self)

    def calibrate(self, *args) -> "void":
        return _QuantExt.CalibratedModelHandle_calibrate(self, *args)

    def setParams(self, params: "Array") -> "void":
        return _QuantExt.CalibratedModelHandle_setParams(self, params)

    def value(self, params: "Array", arg3: "CalibrationHelperVector") -> "Real":
        return _QuantExt.CalibratedModelHandle_value(self, params, arg3)

# Register CalibratedModelHandle in _QuantExt:
_QuantExt.CalibratedModelHandle_swigregister(CalibratedModelHandle)

class RelinkableCalibratedModelHandle(CalibratedModelHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableCalibratedModelHandle_swiginit(self, _QuantExt.new_RelinkableCalibratedModelHandle(*args))

    def linkTo(self, arg2: "CalibratedModel") -> "void":
        return _QuantExt.RelinkableCalibratedModelHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableCalibratedModelHandle

# Register RelinkableCalibratedModelHandle in _QuantExt:
_QuantExt.RelinkableCalibratedModelHandle_swigregister(RelinkableCalibratedModelHandle)

class TimeGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TimeGrid_swiginit(self, _QuantExt.new_TimeGrid(*args))

    def __len__(self) -> "Size":
        return _QuantExt.TimeGrid___len__(self)

    def __getitem__(self, i: "Integer") -> "Time":
        return _QuantExt.TimeGrid___getitem__(self, i)

    def dt(self, i: "Integer") -> "Time":
        return _QuantExt.TimeGrid_dt(self, i)
    __swig_destroy__ = _QuantExt.delete_TimeGrid

# Register TimeGrid in _QuantExt:
_QuantExt.TimeGrid_swigregister(TimeGrid)

class Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Parameter_swiginit(self, _QuantExt.new_Parameter())

    def params(self) -> "Array const &":
        return _QuantExt.Parameter_params(self)

    def setParam(self, i: "Size", x: "Real") -> "void":
        return _QuantExt.Parameter_setParam(self, i, x)

    def testParams(self, params: "Array") -> "bool":
        return _QuantExt.Parameter_testParams(self, params)

    def size(self) -> "Size":
        return _QuantExt.Parameter_size(self)

    def __call__(self, t: "Time") -> "Real":
        return _QuantExt.Parameter___call__(self, t)

    def constraint(self) -> "Constraint const &":
        return _QuantExt.Parameter_constraint(self)
    __swig_destroy__ = _QuantExt.delete_Parameter

# Register Parameter in _QuantExt:
_QuantExt.Parameter_swigregister(Parameter)

class ConstantParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ConstantParameter_swiginit(self, _QuantExt.new_ConstantParameter(*args))
    __swig_destroy__ = _QuantExt.delete_ConstantParameter

# Register ConstantParameter in _QuantExt:
_QuantExt.ConstantParameter_swigregister(ConstantParameter)

class NullParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NullParameter_swiginit(self, _QuantExt.new_NullParameter())
    __swig_destroy__ = _QuantExt.delete_NullParameter

# Register NullParameter in _QuantExt:
_QuantExt.NullParameter_swigregister(NullParameter)

class PiecewiseConstantParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseConstantParameter_swiginit(self, _QuantExt.new_PiecewiseConstantParameter(*args))
    __swig_destroy__ = _QuantExt.delete_PiecewiseConstantParameter

# Register PiecewiseConstantParameter in _QuantExt:
_QuantExt.PiecewiseConstantParameter_swigregister(PiecewiseConstantParameter)

class Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _QuantExt.Option_Put
    Call = _QuantExt.Option_Call
    __swig_destroy__ = _QuantExt.delete_Option

# Register Option in _QuantExt:
_QuantExt.Option_swigregister(Option)

class Barrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DownIn = _QuantExt.Barrier_DownIn
    UpIn = _QuantExt.Barrier_UpIn
    DownOut = _QuantExt.Barrier_DownOut
    UpOut = _QuantExt.Barrier_UpOut

    def __init__(self):
        _QuantExt.Barrier_swiginit(self, _QuantExt.new_Barrier())
    __swig_destroy__ = _QuantExt.delete_Barrier

# Register Barrier in _QuantExt:
_QuantExt.Barrier_swigregister(Barrier)

class DoubleBarrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KnockIn = _QuantExt.DoubleBarrier_KnockIn
    KnockOut = _QuantExt.DoubleBarrier_KnockOut
    KIKO = _QuantExt.DoubleBarrier_KIKO
    KOKI = _QuantExt.DoubleBarrier_KOKI

    def __init__(self):
        _QuantExt.DoubleBarrier_swiginit(self, _QuantExt.new_DoubleBarrier())
    __swig_destroy__ = _QuantExt.delete_DoubleBarrier

# Register DoubleBarrier in _QuantExt:
_QuantExt.DoubleBarrier_swigregister(DoubleBarrier)

class Payoff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Payoff *":
        return _QuantExt.Payoff___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Payoff___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Payoff___bool__(self)

    def __init__(self):
        _QuantExt.Payoff_swiginit(self, _QuantExt.new_Payoff())
    __swig_destroy__ = _QuantExt.delete_Payoff

    def __call__(self, price: "Real") -> "Real":
        return _QuantExt.Payoff___call__(self, price)

# Register Payoff in _QuantExt:
_QuantExt.Payoff_swigregister(Payoff)

class VanillaOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.VanillaOption_swiginit(self, _QuantExt.new_VanillaOption(payoff, exercise))

    def priceCurve(self) -> "SampledCurve":
        return _QuantExt.VanillaOption_priceCurve(self)

    def impliedVolatility(self, targetValue: "Real", process: "GeneralizedBlackScholesProcess", accuracy: "Real"=1.0e-4, maxEvaluations: "Size"=100, minVol: "Volatility"=1.0e-4, maxVol: "Volatility"=4.0) -> "Volatility":
        return _QuantExt.VanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)

    def delta(self) -> "Real":
        return _QuantExt.VanillaOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.VanillaOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.VanillaOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.VanillaOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.VanillaOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.VanillaOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.VanillaOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.VanillaOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_VanillaOption

# Register VanillaOption in _QuantExt:
_QuantExt.VanillaOption_swigregister(VanillaOption)

class EuropeanOption(VanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.EuropeanOption_swiginit(self, _QuantExt.new_EuropeanOption(payoff, exercise))
    __swig_destroy__ = _QuantExt.delete_EuropeanOption

# Register EuropeanOption in _QuantExt:
_QuantExt.EuropeanOption_swigregister(EuropeanOption)

class ForwardVanillaOption(VanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness: "Real", resetDate: "Date", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.ForwardVanillaOption_swiginit(self, _QuantExt.new_ForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _QuantExt.delete_ForwardVanillaOption

# Register ForwardVanillaOption in _QuantExt:
_QuantExt.ForwardVanillaOption_swigregister(ForwardVanillaOption)

class QuantoVanillaOption(VanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.QuantoVanillaOption_swiginit(self, _QuantExt.new_QuantoVanillaOption(payoff, exercise))

    def qvega(self) -> "Real":
        return _QuantExt.QuantoVanillaOption_qvega(self)

    def qrho(self) -> "Real":
        return _QuantExt.QuantoVanillaOption_qrho(self)

    def qlambda(self) -> "Real":
        return _QuantExt.QuantoVanillaOption_qlambda(self)
    __swig_destroy__ = _QuantExt.delete_QuantoVanillaOption

# Register QuantoVanillaOption in _QuantExt:
_QuantExt.QuantoVanillaOption_swigregister(QuantoVanillaOption)

class QuantoForwardVanillaOption(QuantoVanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness: "Real", resetDate: "Date", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.QuantoForwardVanillaOption_swiginit(self, _QuantExt.new_QuantoForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _QuantExt.delete_QuantoForwardVanillaOption

# Register QuantoForwardVanillaOption in _QuantExt:
_QuantExt.QuantoForwardVanillaOption_swigregister(QuantoForwardVanillaOption)

class MultiAssetOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def delta(self) -> "Real":
        return _QuantExt.MultiAssetOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.MultiAssetOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.MultiAssetOption_theta(self)

    def vega(self) -> "Real":
        return _QuantExt.MultiAssetOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.MultiAssetOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.MultiAssetOption_dividendRho(self)

    def __init__(self):
        _QuantExt.MultiAssetOption_swiginit(self, _QuantExt.new_MultiAssetOption())
    __swig_destroy__ = _QuantExt.delete_MultiAssetOption

# Register MultiAssetOption in _QuantExt:
_QuantExt.MultiAssetOption_swigregister(MultiAssetOption)

class AnalyticEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticEuropeanEngine_swiginit(self, _QuantExt.new_AnalyticEuropeanEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticEuropeanEngine

# Register AnalyticEuropeanEngine in _QuantExt:
_QuantExt.AnalyticEuropeanEngine_swigregister(AnalyticEuropeanEngine)

class HestonModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "HestonProcess"):
        _QuantExt.HestonModel_swiginit(self, _QuantExt.new_HestonModel(process))

    def theta(self) -> "Real":
        return _QuantExt.HestonModel_theta(self)

    def kappa(self) -> "Real":
        return _QuantExt.HestonModel_kappa(self)

    def sigma(self) -> "Real":
        return _QuantExt.HestonModel_sigma(self)

    def rho(self) -> "Real":
        return _QuantExt.HestonModel_rho(self)

    def v0(self) -> "Real":
        return _QuantExt.HestonModel_v0(self)
    __swig_destroy__ = _QuantExt.delete_HestonModel

# Register HestonModel in _QuantExt:
_QuantExt.HestonModel_swigregister(HestonModel)

class PiecewiseTimeDependentHestonModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate: "YieldTermStructureHandle", dividendYield: "YieldTermStructureHandle", s0: "QuoteHandle", v0: "Real", theta: "Parameter", kappa: "Parameter", sigma: "Parameter", rho: "Parameter", timeGrid: "TimeGrid"):
        _QuantExt.PiecewiseTimeDependentHestonModel_swiginit(self, _QuantExt.new_PiecewiseTimeDependentHestonModel(riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid))

    def theta(self, t: "Time") -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_theta(self, t)

    def kappa(self, t: "Time") -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_kappa(self, t)

    def sigma(self, t: "Time") -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_sigma(self, t)

    def rho(self, t: "Time") -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_rho(self, t)

    def v0(self) -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_v0(self)

    def s0(self) -> "Real":
        return _QuantExt.PiecewiseTimeDependentHestonModel_s0(self)

    def timeGrid(self) -> "TimeGrid const &":
        return _QuantExt.PiecewiseTimeDependentHestonModel_timeGrid(self)

    def dividendYield(self) -> "Handle< YieldTermStructure > const &":
        return _QuantExt.PiecewiseTimeDependentHestonModel_dividendYield(self)

    def riskFreeRate(self) -> "Handle< YieldTermStructure > const &":
        return _QuantExt.PiecewiseTimeDependentHestonModel_riskFreeRate(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseTimeDependentHestonModel

# Register PiecewiseTimeDependentHestonModel in _QuantExt:
_QuantExt.PiecewiseTimeDependentHestonModel_swigregister(PiecewiseTimeDependentHestonModel)

class AnalyticHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AnalyticHestonEngine_swiginit(self, _QuantExt.new_AnalyticHestonEngine(*args))
    __swig_destroy__ = _QuantExt.delete_AnalyticHestonEngine

# Register AnalyticHestonEngine in _QuantExt:
_QuantExt.AnalyticHestonEngine_swigregister(AnalyticHestonEngine)

class COSHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "HestonModel", L: "Real"=16, N: "Size"=200):
        _QuantExt.COSHestonEngine_swiginit(self, _QuantExt.new_COSHestonEngine(model, L, N))
    __swig_destroy__ = _QuantExt.delete_COSHestonEngine

# Register COSHestonEngine in _QuantExt:
_QuantExt.COSHestonEngine_swigregister(COSHestonEngine)

class AnalyticPTDHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AnalyticPTDHestonEngine_swiginit(self, _QuantExt.new_AnalyticPTDHestonEngine(*args))
    __swig_destroy__ = _QuantExt.delete_AnalyticPTDHestonEngine

# Register AnalyticPTDHestonEngine in _QuantExt:
_QuantExt.AnalyticPTDHestonEngine_swigregister(AnalyticPTDHestonEngine)

class BatesModel(HestonModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "BatesProcess"):
        _QuantExt.BatesModel_swiginit(self, _QuantExt.new_BatesModel(process))

    def nu(self) -> "Real":
        return _QuantExt.BatesModel_nu(self)

    def delta(self) -> "Real":
        return _QuantExt.BatesModel_delta(self)

    def lambda_parameter(self) -> "Real":
        return _QuantExt.BatesModel_lambda_parameter(self)
    __swig_destroy__ = _QuantExt.delete_BatesModel

# Register BatesModel in _QuantExt:
_QuantExt.BatesModel_swigregister(BatesModel)

class BatesEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BatesEngine_swiginit(self, _QuantExt.new_BatesEngine(*args))
    __swig_destroy__ = _QuantExt.delete_BatesEngine

# Register BatesEngine in _QuantExt:
_QuantExt.BatesEngine_swigregister(BatesEngine)

class IntegralEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.IntegralEngine_swiginit(self, _QuantExt.new_IntegralEngine(process))
    __swig_destroy__ = _QuantExt.delete_IntegralEngine

# Register IntegralEngine in _QuantExt:
_QuantExt.IntegralEngine_swigregister(IntegralEngine)

class FDBermudanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDBermudanEngine_swiginit(self, _QuantExt.new_FDBermudanEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDBermudanEngine

# Register FDBermudanEngine in _QuantExt:
_QuantExt.FDBermudanEngine_swigregister(FDBermudanEngine)

class FDEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDEuropeanEngine_swiginit(self, _QuantExt.new_FDEuropeanEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDEuropeanEngine

# Register FDEuropeanEngine in _QuantExt:
_QuantExt.FDEuropeanEngine_swigregister(FDEuropeanEngine)

class BinomialVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", type: "std::string const &", steps: "Size"):
        _QuantExt.BinomialVanillaEngine_swiginit(self, _QuantExt.new_BinomialVanillaEngine(process, type, steps))
    __swig_destroy__ = _QuantExt.delete_BinomialVanillaEngine

# Register BinomialVanillaEngine in _QuantExt:
_QuantExt.BinomialVanillaEngine_swigregister(BinomialVanillaEngine)

class LsmBasisSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Monomial = _QuantExt.LsmBasisSystem_Monomial
    Laguerre = _QuantExt.LsmBasisSystem_Laguerre
    Hermite = _QuantExt.LsmBasisSystem_Hermite
    Hyperbolic = _QuantExt.LsmBasisSystem_Hyperbolic
    Legendre = _QuantExt.LsmBasisSystem_Legendre
    Chebyshev = _QuantExt.LsmBasisSystem_Chebyshev
    Chebyshev2nd = _QuantExt.LsmBasisSystem_Chebyshev2nd

    def __init__(self):
        _QuantExt.LsmBasisSystem_swiginit(self, _QuantExt.new_LsmBasisSystem())
    __swig_destroy__ = _QuantExt.delete_LsmBasisSystem

# Register LsmBasisSystem in _QuantExt:
_QuantExt.LsmBasisSystem_swigregister(LsmBasisSystem)

class MCEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCEuropeanEngine_swiginit(self, _QuantExt.new_MCEuropeanEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCEuropeanEngine

# Register MCEuropeanEngine in _QuantExt:
_QuantExt.MCEuropeanEngine_swigregister(MCEuropeanEngine)

class MCAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.MCAmericanEngine_Receiver
    Payer = _QuantExt.MCAmericanEngine_Payer

    def __init__(self, *args, **kwargs):
        _QuantExt.MCAmericanEngine_swiginit(self, _QuantExt.new_MCAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCAmericanEngine

# Register MCAmericanEngine in _QuantExt:
_QuantExt.MCAmericanEngine_swigregister(MCAmericanEngine)

class FDAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDAmericanEngine_swiginit(self, _QuantExt.new_FDAmericanEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDAmericanEngine

# Register FDAmericanEngine in _QuantExt:
_QuantExt.FDAmericanEngine_swigregister(FDAmericanEngine)

class FdBlackScholesVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", tGrid: "Size"=100, xGrid: "Size"=100, dampingSteps: "Size"=0):
        _QuantExt.FdBlackScholesVanillaEngine_swiginit(self, _QuantExt.new_FdBlackScholesVanillaEngine(process, tGrid, xGrid, dampingSteps))
    __swig_destroy__ = _QuantExt.delete_FdBlackScholesVanillaEngine

# Register FdBlackScholesVanillaEngine in _QuantExt:
_QuantExt.FdBlackScholesVanillaEngine_swigregister(FdBlackScholesVanillaEngine)

class FdBatesVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "BatesModel", tGrid: "Size"=100, xGrid: "Size"=100, vGrid: "Size"=50, dampingSteps: "Size"=0):
        _QuantExt.FdBatesVanillaEngine_swiginit(self, _QuantExt.new_FdBatesVanillaEngine(model, tGrid, xGrid, vGrid, dampingSteps))
    __swig_destroy__ = _QuantExt.delete_FdBatesVanillaEngine

# Register FdBatesVanillaEngine in _QuantExt:
_QuantExt.FdBatesVanillaEngine_swigregister(FdBatesVanillaEngine)

class ContinuousArithmeticAsianLevyEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", runningAverage: "QuoteHandle", startDate: "Date"):
        _QuantExt.ContinuousArithmeticAsianLevyEngine_swiginit(self, _QuantExt.new_ContinuousArithmeticAsianLevyEngine(process, runningAverage, startDate))
    __swig_destroy__ = _QuantExt.delete_ContinuousArithmeticAsianLevyEngine

# Register ContinuousArithmeticAsianLevyEngine in _QuantExt:
_QuantExt.ContinuousArithmeticAsianLevyEngine_swigregister(ContinuousArithmeticAsianLevyEngine)

class FdBlackScholesAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", tGrid: "Size", xGrid: "Size", aGrid: "Size"):
        _QuantExt.FdBlackScholesAsianEngine_swiginit(self, _QuantExt.new_FdBlackScholesAsianEngine(process, tGrid, xGrid, aGrid))
    __swig_destroy__ = _QuantExt.delete_FdBlackScholesAsianEngine

# Register FdBlackScholesAsianEngine in _QuantExt:
_QuantExt.FdBlackScholesAsianEngine_swigregister(FdBlackScholesAsianEngine)

class FDShoutEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDShoutEngine_swiginit(self, _QuantExt.new_FDShoutEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDShoutEngine

# Register FDShoutEngine in _QuantExt:
_QuantExt.FDShoutEngine_swigregister(FDShoutEngine)

class BaroneAdesiWhaleyEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.BaroneAdesiWhaleyEngine_swiginit(self, _QuantExt.new_BaroneAdesiWhaleyEngine(process))
    __swig_destroy__ = _QuantExt.delete_BaroneAdesiWhaleyEngine

# Register BaroneAdesiWhaleyEngine in _QuantExt:
_QuantExt.BaroneAdesiWhaleyEngine_swigregister(BaroneAdesiWhaleyEngine)

class BjerksundStenslandEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.BjerksundStenslandEngine_swiginit(self, _QuantExt.new_BjerksundStenslandEngine(process))
    __swig_destroy__ = _QuantExt.delete_BjerksundStenslandEngine

# Register BjerksundStenslandEngine in _QuantExt:
_QuantExt.BjerksundStenslandEngine_swigregister(BjerksundStenslandEngine)

class AnalyticDigitalAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDigitalAmericanEngine_swiginit(self, _QuantExt.new_AnalyticDigitalAmericanEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDigitalAmericanEngine

# Register AnalyticDigitalAmericanEngine in _QuantExt:
_QuantExt.AnalyticDigitalAmericanEngine_swigregister(AnalyticDigitalAmericanEngine)

class AnalyticDigitalAmericanKOEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDigitalAmericanKOEngine_swiginit(self, _QuantExt.new_AnalyticDigitalAmericanKOEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDigitalAmericanKOEngine

# Register AnalyticDigitalAmericanKOEngine in _QuantExt:
_QuantExt.AnalyticDigitalAmericanKOEngine_swigregister(AnalyticDigitalAmericanKOEngine)

class DividendVanillaOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", exercise: "Exercise", dividendDates: "DateVector", dividends: "DoubleVector"):
        _QuantExt.DividendVanillaOption_swiginit(self, _QuantExt.new_DividendVanillaOption(payoff, exercise, dividendDates, dividends))

    def priceCurve(self) -> "SampledCurve":
        return _QuantExt.DividendVanillaOption_priceCurve(self)

    def impliedVolatility(self, targetValue: "Real", process: "GeneralizedBlackScholesProcess", accuracy: "Real"=1.0e-4, maxEvaluations: "Size"=100, minVol: "Volatility"=1.0e-4, maxVol: "Volatility"=4.0) -> "Volatility":
        return _QuantExt.DividendVanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)

    def delta(self) -> "Real":
        return _QuantExt.DividendVanillaOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.DividendVanillaOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.DividendVanillaOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.DividendVanillaOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.DividendVanillaOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.DividendVanillaOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.DividendVanillaOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.DividendVanillaOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_DividendVanillaOption

# Register DividendVanillaOption in _QuantExt:
_QuantExt.DividendVanillaOption_swigregister(DividendVanillaOption)

class AnalyticDividendEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDividendEuropeanEngine_swiginit(self, _QuantExt.new_AnalyticDividendEuropeanEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDividendEuropeanEngine

# Register AnalyticDividendEuropeanEngine in _QuantExt:
_QuantExt.AnalyticDividendEuropeanEngine_swigregister(AnalyticDividendEuropeanEngine)

class FDDividendEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDDividendEuropeanEngine_swiginit(self, _QuantExt.new_FDDividendEuropeanEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDDividendEuropeanEngine

# Register FDDividendEuropeanEngine in _QuantExt:
_QuantExt.FDDividendEuropeanEngine_swigregister(FDDividendEuropeanEngine)

class FDDividendAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", timeSteps: "Size"=100, gridPoints: "Size"=100, timeDependent: "bool"=False):
        _QuantExt.FDDividendAmericanEngine_swiginit(self, _QuantExt.new_FDDividendAmericanEngine(process, timeSteps, gridPoints, timeDependent))
    __swig_destroy__ = _QuantExt.delete_FDDividendAmericanEngine

# Register FDDividendAmericanEngine in _QuantExt:
_QuantExt.FDDividendAmericanEngine_swigregister(FDDividendAmericanEngine)

class BarrierOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType: "Barrier::Type", barrier: "Real", rebate: "Real", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.BarrierOption_swiginit(self, _QuantExt.new_BarrierOption(barrierType, barrier, rebate, payoff, exercise))

    def priceCurve(self) -> "SampledCurve":
        return _QuantExt.BarrierOption_priceCurve(self)

    def impliedVolatility(self, targetValue: "Real", process: "GeneralizedBlackScholesProcess", accuracy: "Real"=1.0e-4, maxEvaluations: "Size"=100, minVol: "Volatility"=1.0e-4, maxVol: "Volatility"=4.0) -> "Volatility":
        return _QuantExt.BarrierOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)

    def delta(self) -> "Real":
        return _QuantExt.BarrierOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.BarrierOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.BarrierOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.BarrierOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.BarrierOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.BarrierOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.BarrierOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.BarrierOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_BarrierOption

# Register BarrierOption in _QuantExt:
_QuantExt.BarrierOption_swigregister(BarrierOption)

class AnalyticBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticBarrierEngine_swiginit(self, _QuantExt.new_AnalyticBarrierEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticBarrierEngine

# Register AnalyticBarrierEngine in _QuantExt:
_QuantExt.AnalyticBarrierEngine_swigregister(AnalyticBarrierEngine)

class MCBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCBarrierEngine_swiginit(self, _QuantExt.new_MCBarrierEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCBarrierEngine

# Register MCBarrierEngine in _QuantExt:
_QuantExt.MCBarrierEngine_swigregister(MCBarrierEngine)

class FdmSchemeDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HundsdorferType = _QuantExt.FdmSchemeDesc_HundsdorferType
    DouglasType = _QuantExt.FdmSchemeDesc_DouglasType
    CraigSneydType = _QuantExt.FdmSchemeDesc_CraigSneydType
    ModifiedCraigSneydType = _QuantExt.FdmSchemeDesc_ModifiedCraigSneydType
    ImplicitEulerType = _QuantExt.FdmSchemeDesc_ImplicitEulerType
    ExplicitEulerType = _QuantExt.FdmSchemeDesc_ExplicitEulerType

    def __init__(self, type: "FdmSchemeDesc::FdmSchemeType", theta: "Real", mu: "Real"):
        _QuantExt.FdmSchemeDesc_swiginit(self, _QuantExt.new_FdmSchemeDesc(type, theta, mu))
    type = property(_QuantExt.FdmSchemeDesc_type_get)
    theta = property(_QuantExt.FdmSchemeDesc_theta_get)
    mu = property(_QuantExt.FdmSchemeDesc_mu_get)

    @staticmethod
    def Douglas() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_Douglas()

    @staticmethod
    def ImplicitEuler() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_ImplicitEuler()

    @staticmethod
    def ExplicitEuler() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_ExplicitEuler()

    @staticmethod
    def CraigSneyd() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_CraigSneyd()

    @staticmethod
    def ModifiedCraigSneyd() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_ModifiedCraigSneyd()

    @staticmethod
    def Hundsdorfer() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_Hundsdorfer()

    @staticmethod
    def ModifiedHundsdorfer() -> "FdmSchemeDesc":
        return _QuantExt.FdmSchemeDesc_ModifiedHundsdorfer()
    __swig_destroy__ = _QuantExt.delete_FdmSchemeDesc

# Register FdmSchemeDesc in _QuantExt:
_QuantExt.FdmSchemeDesc_swigregister(FdmSchemeDesc)

def FdmSchemeDesc_Douglas() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_Douglas()

def FdmSchemeDesc_ImplicitEuler() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_ImplicitEuler()

def FdmSchemeDesc_ExplicitEuler() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_ExplicitEuler()

def FdmSchemeDesc_CraigSneyd() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_CraigSneyd()

def FdmSchemeDesc_ModifiedCraigSneyd() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_ModifiedCraigSneyd()

def FdmSchemeDesc_Hundsdorfer() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_Hundsdorfer()

def FdmSchemeDesc_ModifiedHundsdorfer() -> "FdmSchemeDesc":
    return _QuantExt.FdmSchemeDesc_ModifiedHundsdorfer()

class FdBlackScholesBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FdBlackScholesBarrierEngine_swiginit(self, _QuantExt.new_FdBlackScholesBarrierEngine(*args))
    __swig_destroy__ = _QuantExt.delete_FdBlackScholesBarrierEngine

# Register FdBlackScholesBarrierEngine in _QuantExt:
_QuantExt.FdBlackScholesBarrierEngine_swigregister(FdBlackScholesBarrierEngine)

class AnalyticBinaryBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticBinaryBarrierEngine_swiginit(self, _QuantExt.new_AnalyticBinaryBarrierEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticBinaryBarrierEngine

# Register AnalyticBinaryBarrierEngine in _QuantExt:
_QuantExt.AnalyticBinaryBarrierEngine_swigregister(AnalyticBinaryBarrierEngine)

class BinomialBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to 
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", type: "std::string const &", steps: "Size", max_steps: "Size"=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to 
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _QuantExt.BinomialBarrierEngine_swiginit(self, _QuantExt.new_BinomialBarrierEngine(process, type, steps, max_steps))
    __swig_destroy__ = _QuantExt.delete_BinomialBarrierEngine

# Register BinomialBarrierEngine in _QuantExt:
_QuantExt.BinomialBarrierEngine_swigregister(BinomialBarrierEngine)

class ForwardEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.ForwardEuropeanEngine_swiginit(self, _QuantExt.new_ForwardEuropeanEngine(process))
    __swig_destroy__ = _QuantExt.delete_ForwardEuropeanEngine

# Register ForwardEuropeanEngine in _QuantExt:
_QuantExt.ForwardEuropeanEngine_swigregister(ForwardEuropeanEngine)

class QuantoEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", foreignRiskFreeRate: "YieldTermStructureHandle", exchangeRateVolatility: "BlackVolTermStructureHandle", correlation: "QuoteHandle"):
        _QuantExt.QuantoEuropeanEngine_swiginit(self, _QuantExt.new_QuantoEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _QuantExt.delete_QuantoEuropeanEngine

# Register QuantoEuropeanEngine in _QuantExt:
_QuantExt.QuantoEuropeanEngine_swigregister(QuantoEuropeanEngine)

class QuantoForwardEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", foreignRiskFreeRate: "YieldTermStructureHandle", exchangeRateVolatility: "BlackVolTermStructureHandle", correlation: "QuoteHandle"):
        _QuantExt.QuantoForwardEuropeanEngine_swiginit(self, _QuantExt.new_QuantoForwardEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _QuantExt.delete_QuantoForwardEuropeanEngine

# Register QuantoForwardEuropeanEngine in _QuantExt:
_QuantExt.QuantoForwardEuropeanEngine_swigregister(QuantoForwardEuropeanEngine)

class BlackCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", forward: "Real", stdDev: "Real", discount: "Real"=1.0):
        _QuantExt.BlackCalculator_swiginit(self, _QuantExt.new_BlackCalculator(payoff, forward, stdDev, discount))

    def value(self) -> "Real":
        return _QuantExt.BlackCalculator_value(self)

    def deltaForward(self) -> "Real":
        return _QuantExt.BlackCalculator_deltaForward(self)

    def delta(self, spot: "Real") -> "Real":
        return _QuantExt.BlackCalculator_delta(self, spot)

    def elasticityForward(self) -> "Real":
        return _QuantExt.BlackCalculator_elasticityForward(self)

    def elasticity(self, spot: "Real") -> "Real":
        return _QuantExt.BlackCalculator_elasticity(self, spot)

    def gammaForward(self) -> "Real":
        return _QuantExt.BlackCalculator_gammaForward(self)

    def gamma(self, spot: "Real") -> "Real":
        return _QuantExt.BlackCalculator_gamma(self, spot)

    def theta(self, spot: "Real", maturity: "Time") -> "Real":
        return _QuantExt.BlackCalculator_theta(self, spot, maturity)

    def thetaPerDay(self, spot: "Real", maturity: "Time") -> "Real":
        return _QuantExt.BlackCalculator_thetaPerDay(self, spot, maturity)

    def vega(self, maturity: "Time") -> "Real":
        return _QuantExt.BlackCalculator_vega(self, maturity)

    def rho(self, maturity: "Time") -> "Real":
        return _QuantExt.BlackCalculator_rho(self, maturity)

    def dividendRho(self, maturity: "Time") -> "Real":
        return _QuantExt.BlackCalculator_dividendRho(self, maturity)

    def itmCashProbability(self) -> "Real":
        return _QuantExt.BlackCalculator_itmCashProbability(self)

    def itmAssetProbability(self) -> "Real":
        return _QuantExt.BlackCalculator_itmAssetProbability(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.BlackCalculator_strikeSensitivity(self)

    def alpha(self) -> "Real":
        return _QuantExt.BlackCalculator_alpha(self)

    def beta(self) -> "Real":
        return _QuantExt.BlackCalculator_beta(self)
    __swig_destroy__ = _QuantExt.delete_BlackCalculator

# Register BlackCalculator in _QuantExt:
_QuantExt.BlackCalculator_swigregister(BlackCalculator)

class Average(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Arithmetic = _QuantExt.Average_Arithmetic
    Geometric = _QuantExt.Average_Geometric

    def __init__(self):
        _QuantExt.Average_swiginit(self, _QuantExt.new_Average())
    __swig_destroy__ = _QuantExt.delete_Average

# Register Average in _QuantExt:
_QuantExt.Average_swigregister(Average)

class ContinuousAveragingAsianOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageType: "Average::Type", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.ContinuousAveragingAsianOption_swiginit(self, _QuantExt.new_ContinuousAveragingAsianOption(averageType, payoff, exercise))

    def delta(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.ContinuousAveragingAsianOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_ContinuousAveragingAsianOption

# Register ContinuousAveragingAsianOption in _QuantExt:
_QuantExt.ContinuousAveragingAsianOption_swigregister(ContinuousAveragingAsianOption)

class DiscreteAveragingAsianOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageType: "Average::Type", runningAccumulator: "Real", pastFixings: "Size", fixingDates: "DateVector", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.DiscreteAveragingAsianOption_swiginit(self, _QuantExt.new_DiscreteAveragingAsianOption(averageType, runningAccumulator, pastFixings, fixingDates, payoff, exercise))

    def delta(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.DiscreteAveragingAsianOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_DiscreteAveragingAsianOption

# Register DiscreteAveragingAsianOption in _QuantExt:
_QuantExt.DiscreteAveragingAsianOption_swigregister(DiscreteAveragingAsianOption)

class AnalyticContinuousGeometricAveragePriceAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticContinuousGeometricAveragePriceAsianEngine_swiginit(self, _QuantExt.new_AnalyticContinuousGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticContinuousGeometricAveragePriceAsianEngine

# Register AnalyticContinuousGeometricAveragePriceAsianEngine in _QuantExt:
_QuantExt.AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianEngine)

class AnalyticDiscreteGeometricAveragePriceAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDiscreteGeometricAveragePriceAsianEngine_swiginit(self, _QuantExt.new_AnalyticDiscreteGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDiscreteGeometricAveragePriceAsianEngine

# Register AnalyticDiscreteGeometricAveragePriceAsianEngine in _QuantExt:
_QuantExt.AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianEngine)

class AnalyticDiscreteGeometricAverageStrikeAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swiginit(self, _QuantExt.new_AnalyticDiscreteGeometricAverageStrikeAsianEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDiscreteGeometricAverageStrikeAsianEngine

# Register AnalyticDiscreteGeometricAverageStrikeAsianEngine in _QuantExt:
_QuantExt.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister(AnalyticDiscreteGeometricAverageStrikeAsianEngine)

class MCDiscreteArithmeticAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCDiscreteArithmeticAPEngine_swiginit(self, _QuantExt.new_MCDiscreteArithmeticAPEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCDiscreteArithmeticAPEngine

# Register MCDiscreteArithmeticAPEngine in _QuantExt:
_QuantExt.MCDiscreteArithmeticAPEngine_swigregister(MCDiscreteArithmeticAPEngine)

class MCDiscreteArithmeticASEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCDiscreteArithmeticASEngine_swiginit(self, _QuantExt.new_MCDiscreteArithmeticASEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCDiscreteArithmeticASEngine

# Register MCDiscreteArithmeticASEngine in _QuantExt:
_QuantExt.MCDiscreteArithmeticASEngine_swigregister(MCDiscreteArithmeticASEngine)

class MCDiscreteGeometricAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCDiscreteGeometricAPEngine_swiginit(self, _QuantExt.new_MCDiscreteGeometricAPEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCDiscreteGeometricAPEngine

# Register MCDiscreteGeometricAPEngine in _QuantExt:
_QuantExt.MCDiscreteGeometricAPEngine_swigregister(MCDiscreteGeometricAPEngine)

class VarianceGammaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "VarianceGammaProcess"):
        _QuantExt.VarianceGammaEngine_swiginit(self, _QuantExt.new_VarianceGammaEngine(process))
    __swig_destroy__ = _QuantExt.delete_VarianceGammaEngine

# Register VarianceGammaEngine in _QuantExt:
_QuantExt.VarianceGammaEngine_swigregister(VarianceGammaEngine)

class FFTVarianceGammaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "VarianceGammaProcess", logStrikeSpacing: "Real"=0.001):
        _QuantExt.FFTVarianceGammaEngine_swiginit(self, _QuantExt.new_FFTVarianceGammaEngine(process, logStrikeSpacing))

    def precalculate(self, optionList: "InstrumentVector") -> "void":
        return _QuantExt.FFTVarianceGammaEngine_precalculate(self, optionList)
    __swig_destroy__ = _QuantExt.delete_FFTVarianceGammaEngine

# Register FFTVarianceGammaEngine in _QuantExt:
_QuantExt.FFTVarianceGammaEngine_swigregister(FFTVarianceGammaEngine)

class DoubleBarrierOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType: "DoubleBarrier::Type", barrier_lo: "Real", barrier_hi: "Real", rebate: "Real", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.DoubleBarrierOption_swiginit(self, _QuantExt.new_DoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))

    def delta(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_delta(self)

    def gamma(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_gamma(self)

    def theta(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_theta(self)

    def thetaPerDay(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_thetaPerDay(self)

    def vega(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_vega(self)

    def rho(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_rho(self)

    def dividendRho(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_dividendRho(self)

    def strikeSensitivity(self) -> "Real":
        return _QuantExt.DoubleBarrierOption_strikeSensitivity(self)
    __swig_destroy__ = _QuantExt.delete_DoubleBarrierOption

# Register DoubleBarrierOption in _QuantExt:
_QuantExt.DoubleBarrierOption_swigregister(DoubleBarrierOption)

class QuantoDoubleBarrierOption(DoubleBarrierOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType: "DoubleBarrier::Type", barrier_lo: "Real", barrier_hi: "Real", rebate: "Real", payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.QuantoDoubleBarrierOption_swiginit(self, _QuantExt.new_QuantoDoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))

    def qvega(self) -> "Real":
        return _QuantExt.QuantoDoubleBarrierOption_qvega(self)

    def qrho(self) -> "Real":
        return _QuantExt.QuantoDoubleBarrierOption_qrho(self)

    def qlambda(self) -> "Real":
        return _QuantExt.QuantoDoubleBarrierOption_qlambda(self)
    __swig_destroy__ = _QuantExt.delete_QuantoDoubleBarrierOption

# Register QuantoDoubleBarrierOption in _QuantExt:
_QuantExt.QuantoDoubleBarrierOption_swigregister(QuantoDoubleBarrierOption)

class AnalyticDoubleBarrierEngine(PricingEngine):
    r"""Double barrier engine implementing Ikeda-Kunitomo series."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", series: "int"=5):
        r"""Double barrier engine implementing Ikeda-Kunitomo series."""
        _QuantExt.AnalyticDoubleBarrierEngine_swiginit(self, _QuantExt.new_AnalyticDoubleBarrierEngine(process, series))
    __swig_destroy__ = _QuantExt.delete_AnalyticDoubleBarrierEngine

# Register AnalyticDoubleBarrierEngine in _QuantExt:
_QuantExt.AnalyticDoubleBarrierEngine_swigregister(AnalyticDoubleBarrierEngine)

class WulinYongDoubleBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", series: "int"=5):
        _QuantExt.WulinYongDoubleBarrierEngine_swiginit(self, _QuantExt.new_WulinYongDoubleBarrierEngine(process, series))
    __swig_destroy__ = _QuantExt.delete_WulinYongDoubleBarrierEngine

# Register WulinYongDoubleBarrierEngine in _QuantExt:
_QuantExt.WulinYongDoubleBarrierEngine_swigregister(WulinYongDoubleBarrierEngine)

class DeltaVolQuote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "DeltaVolQuote *":
        return _QuantExt.DeltaVolQuote___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.DeltaVolQuote___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DeltaVolQuote___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.DeltaVolQuote_asObservable(self)
    Spot = _QuantExt.DeltaVolQuote_Spot
    Fwd = _QuantExt.DeltaVolQuote_Fwd
    PaSpot = _QuantExt.DeltaVolQuote_PaSpot
    PaFwd = _QuantExt.DeltaVolQuote_PaFwd
    AtmNull = _QuantExt.DeltaVolQuote_AtmNull
    AtmSpot = _QuantExt.DeltaVolQuote_AtmSpot
    AtmFwd = _QuantExt.DeltaVolQuote_AtmFwd
    AtmDeltaNeutral = _QuantExt.DeltaVolQuote_AtmDeltaNeutral
    AtmVegaMax = _QuantExt.DeltaVolQuote_AtmVegaMax
    AtmGammaMax = _QuantExt.DeltaVolQuote_AtmGammaMax
    AtmPutCall50 = _QuantExt.DeltaVolQuote_AtmPutCall50

    def __init__(self, *args):
        _QuantExt.DeltaVolQuote_swiginit(self, _QuantExt.new_DeltaVolQuote(*args))
    __swig_destroy__ = _QuantExt.delete_DeltaVolQuote

    def value(self) -> "Real":
        return _QuantExt.DeltaVolQuote_value(self)

# Register DeltaVolQuote in _QuantExt:
_QuantExt.DeltaVolQuote_swigregister(DeltaVolQuote)

class DeltaVolQuoteHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DeltaVolQuoteHandle_swiginit(self, _QuantExt.new_DeltaVolQuoteHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< DeltaVolQuote >":
        return _QuantExt.DeltaVolQuoteHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.DeltaVolQuoteHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DeltaVolQuoteHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.DeltaVolQuoteHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_DeltaVolQuoteHandle

    def value(self) -> "Real":
        return _QuantExt.DeltaVolQuoteHandle_value(self)

# Register DeltaVolQuoteHandle in _QuantExt:
_QuantExt.DeltaVolQuoteHandle_swigregister(DeltaVolQuoteHandle)

class RelinkableDeltaVolQuoteHandle(DeltaVolQuoteHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableDeltaVolQuoteHandle_swiginit(self, _QuantExt.new_RelinkableDeltaVolQuoteHandle(*args))

    def linkTo(self, arg2: "DeltaVolQuote") -> "void":
        return _QuantExt.RelinkableDeltaVolQuoteHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableDeltaVolQuoteHandle

# Register RelinkableDeltaVolQuoteHandle in _QuantExt:
_QuantExt.RelinkableDeltaVolQuoteHandle_swigregister(RelinkableDeltaVolQuoteHandle)

class VannaVolgaDoubleBarrierEngine(PricingEngine):
    r"""

    Vanna-Volga engine for double barrier options.
    Supports different double barrier engines, selected by the type parameters.
    Type values:
        ik or analytic:  Ikeda-Kunitomo standard engine (default)
        wo:              Wulin-Yong engine

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Vanna-Volga engine for double barrier options.
        Supports different double barrier engines, selected by the type parameters.
        Type values:
            ik or analytic:  Ikeda-Kunitomo standard engine (default)
            wo:              Wulin-Yong engine

        """
        _QuantExt.VannaVolgaDoubleBarrierEngine_swiginit(self, _QuantExt.new_VannaVolgaDoubleBarrierEngine(*args))
    __swig_destroy__ = _QuantExt.delete_VannaVolgaDoubleBarrierEngine

# Register VannaVolgaDoubleBarrierEngine in _QuantExt:
_QuantExt.VannaVolgaDoubleBarrierEngine_swigregister(VannaVolgaDoubleBarrierEngine)

class VannaVolgaBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol: "DeltaVolQuoteHandle", vol25Put: "DeltaVolQuoteHandle", vol25Call: "DeltaVolQuoteHandle", spotFX: "QuoteHandle", domesticTS: "YieldTermStructureHandle", foreignTS: "YieldTermStructureHandle", adaptVanDelta: "bool const"=False, bsPriceWithSmile: "Real const"=0.0):
        _QuantExt.VannaVolgaBarrierEngine_swiginit(self, _QuantExt.new_VannaVolgaBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile))
    __swig_destroy__ = _QuantExt.delete_VannaVolgaBarrierEngine

# Register VannaVolgaBarrierEngine in _QuantExt:
_QuantExt.VannaVolgaBarrierEngine_swigregister(VannaVolgaBarrierEngine)

class AnalyticDoubleBarrierBinaryEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess"):
        _QuantExt.AnalyticDoubleBarrierBinaryEngine_swiginit(self, _QuantExt.new_AnalyticDoubleBarrierBinaryEngine(process))
    __swig_destroy__ = _QuantExt.delete_AnalyticDoubleBarrierBinaryEngine

# Register AnalyticDoubleBarrierBinaryEngine in _QuantExt:
_QuantExt.AnalyticDoubleBarrierBinaryEngine_swigregister(AnalyticDoubleBarrierBinaryEngine)

class BinomialDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", type: "std::string const &", steps: "Size"):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _QuantExt.BinomialDoubleBarrierEngine_swiginit(self, _QuantExt.new_BinomialDoubleBarrierEngine(process, type, steps))
    __swig_destroy__ = _QuantExt.delete_BinomialDoubleBarrierEngine

# Register BinomialDoubleBarrierEngine in _QuantExt:
_QuantExt.BinomialDoubleBarrierEngine_swigregister(BinomialDoubleBarrierEngine)

class VanillaSwingOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", ex: "Exercise", minExerciseRights: "Size", maxExerciseRights: "Size"):
        _QuantExt.VanillaSwingOption_swiginit(self, _QuantExt.new_VanillaSwingOption(payoff, ex, minExerciseRights, maxExerciseRights))
    __swig_destroy__ = _QuantExt.delete_VanillaSwingOption

# Register VanillaSwingOption in _QuantExt:
_QuantExt.VanillaSwingOption_swigregister(VanillaSwingOption)

class FdSimpleBSSwingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FdSimpleBSSwingEngine_swiginit(self, _QuantExt.new_FdSimpleBSSwingEngine(*args))
    __swig_destroy__ = _QuantExt.delete_FdSimpleBSSwingEngine

# Register FdSimpleBSSwingEngine in _QuantExt:
_QuantExt.FdSimpleBSSwingEngine_swigregister(FdSimpleBSSwingEngine)

class FdSimpleExtOUJumpSwingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FdSimpleExtOUJumpSwingEngine_swiginit(self, _QuantExt.new_FdSimpleExtOUJumpSwingEngine(*args))
    __swig_destroy__ = _QuantExt.delete_FdSimpleExtOUJumpSwingEngine

# Register FdSimpleExtOUJumpSwingEngine in _QuantExt:
_QuantExt.FdSimpleExtOUJumpSwingEngine_swigregister(FdSimpleExtOUJumpSwingEngine)

class PlainVanillaPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real"):
        _QuantExt.PlainVanillaPayoff_swiginit(self, _QuantExt.new_PlainVanillaPayoff(type, strike))

    def optionType(self) -> "Option::Type":
        return _QuantExt.PlainVanillaPayoff_optionType(self)

    def strike(self) -> "Real":
        return _QuantExt.PlainVanillaPayoff_strike(self)
    __swig_destroy__ = _QuantExt.delete_PlainVanillaPayoff

# Register PlainVanillaPayoff in _QuantExt:
_QuantExt.PlainVanillaPayoff_swigregister(PlainVanillaPayoff)

class PercentageStrikePayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", moneyness: "Real"):
        _QuantExt.PercentageStrikePayoff_swiginit(self, _QuantExt.new_PercentageStrikePayoff(type, moneyness))
    __swig_destroy__ = _QuantExt.delete_PercentageStrikePayoff

# Register PercentageStrikePayoff in _QuantExt:
_QuantExt.PercentageStrikePayoff_swigregister(PercentageStrikePayoff)

class CashOrNothingPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real", payoff: "Real"):
        _QuantExt.CashOrNothingPayoff_swiginit(self, _QuantExt.new_CashOrNothingPayoff(type, strike, payoff))
    __swig_destroy__ = _QuantExt.delete_CashOrNothingPayoff

# Register CashOrNothingPayoff in _QuantExt:
_QuantExt.CashOrNothingPayoff_swigregister(CashOrNothingPayoff)

class AssetOrNothingPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real"):
        _QuantExt.AssetOrNothingPayoff_swiginit(self, _QuantExt.new_AssetOrNothingPayoff(type, strike))
    __swig_destroy__ = _QuantExt.delete_AssetOrNothingPayoff

# Register AssetOrNothingPayoff in _QuantExt:
_QuantExt.AssetOrNothingPayoff_swigregister(AssetOrNothingPayoff)

class SuperSharePayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real", increment: "Real"):
        _QuantExt.SuperSharePayoff_swiginit(self, _QuantExt.new_SuperSharePayoff(type, strike, increment))
    __swig_destroy__ = _QuantExt.delete_SuperSharePayoff

# Register SuperSharePayoff in _QuantExt:
_QuantExt.SuperSharePayoff_swigregister(SuperSharePayoff)

class GapPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real", strikePayoff: "Real"):
        _QuantExt.GapPayoff_swiginit(self, _QuantExt.new_GapPayoff(type, strike, strikePayoff))
    __swig_destroy__ = _QuantExt.delete_GapPayoff

# Register GapPayoff in _QuantExt:
_QuantExt.GapPayoff_swigregister(GapPayoff)

class VanillaForwardPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "Option::Type", strike: "Real"):
        _QuantExt.VanillaForwardPayoff_swiginit(self, _QuantExt.new_VanillaForwardPayoff(type, strike))
    __swig_destroy__ = _QuantExt.delete_VanillaForwardPayoff

# Register VanillaForwardPayoff in _QuantExt:
_QuantExt.VanillaForwardPayoff_swigregister(VanillaForwardPayoff)

class BasketPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BasketPayoff_swiginit(self, _QuantExt.new_BasketPayoff())
    __swig_destroy__ = _QuantExt.delete_BasketPayoff

# Register BasketPayoff in _QuantExt:
_QuantExt.BasketPayoff_swigregister(BasketPayoff)

class MinBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p: "Payoff"):
        _QuantExt.MinBasketPayoff_swiginit(self, _QuantExt.new_MinBasketPayoff(p))
    __swig_destroy__ = _QuantExt.delete_MinBasketPayoff

# Register MinBasketPayoff in _QuantExt:
_QuantExt.MinBasketPayoff_swigregister(MinBasketPayoff)

class MaxBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p: "Payoff"):
        _QuantExt.MaxBasketPayoff_swiginit(self, _QuantExt.new_MaxBasketPayoff(p))
    __swig_destroy__ = _QuantExt.delete_MaxBasketPayoff

# Register MaxBasketPayoff in _QuantExt:
_QuantExt.MaxBasketPayoff_swigregister(MaxBasketPayoff)

class AverageBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AverageBasketPayoff_swiginit(self, _QuantExt.new_AverageBasketPayoff(*args))
    __swig_destroy__ = _QuantExt.delete_AverageBasketPayoff

# Register AverageBasketPayoff in _QuantExt:
_QuantExt.AverageBasketPayoff_swigregister(AverageBasketPayoff)

class BasketOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff: "Payoff", exercise: "Exercise"):
        _QuantExt.BasketOption_swiginit(self, _QuantExt.new_BasketOption(payoff, exercise))
    __swig_destroy__ = _QuantExt.delete_BasketOption

# Register BasketOption in _QuantExt:
_QuantExt.BasketOption_swigregister(BasketOption)

class MCEuropeanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCEuropeanBasketEngine_swiginit(self, _QuantExt.new_MCEuropeanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCEuropeanBasketEngine

# Register MCEuropeanBasketEngine in _QuantExt:
_QuantExt.MCEuropeanBasketEngine_swigregister(MCEuropeanBasketEngine)

class MCAmericanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCAmericanBasketEngine_swiginit(self, _QuantExt.new_MCAmericanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCAmericanBasketEngine

# Register MCAmericanBasketEngine in _QuantExt:
_QuantExt.MCAmericanBasketEngine_swigregister(MCAmericanBasketEngine)

class StulzEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1: "GeneralizedBlackScholesProcess", process2: "GeneralizedBlackScholesProcess", correlation: "Real"):
        _QuantExt.StulzEngine_swiginit(self, _QuantExt.new_StulzEngine(process1, process2, correlation))
    __swig_destroy__ = _QuantExt.delete_StulzEngine

# Register StulzEngine in _QuantExt:
_QuantExt.StulzEngine_swigregister(StulzEngine)

class EverestOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional: "Real", guarantee: "Rate", exercise: "Exercise"):
        _QuantExt.EverestOption_swiginit(self, _QuantExt.new_EverestOption(notional, guarantee, exercise))
    __swig_destroy__ = _QuantExt.delete_EverestOption

# Register EverestOption in _QuantExt:
_QuantExt.EverestOption_swigregister(EverestOption)

class MCEverestEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCEverestEngine_swiginit(self, _QuantExt.new_MCEverestEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCEverestEngine

# Register MCEverestEngine in _QuantExt:
_QuantExt.MCEverestEngine_swigregister(MCEverestEngine)

class HimalayaOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fixingDates: "DateVector", strike: "Real"):
        _QuantExt.HimalayaOption_swiginit(self, _QuantExt.new_HimalayaOption(fixingDates, strike))
    __swig_destroy__ = _QuantExt.delete_HimalayaOption

# Register HimalayaOption in _QuantExt:
_QuantExt.HimalayaOption_swigregister(HimalayaOption)

class MCHimalayaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.MCHimalayaEngine_swiginit(self, _QuantExt.new_MCHimalayaEngine(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_MCHimalayaEngine

# Register MCHimalayaEngine in _QuantExt:
_QuantExt.MCHimalayaEngine_swigregister(MCHimalayaEngine)


def blackFormula(optionType: "Option::Type", strike: "Real", forward: "Real", stdDev: "Real", discount: "Real"=1.0, displacement: "Real"=0.0) -> "Real":
    return _QuantExt.blackFormula(optionType, strike, forward, stdDev, discount, displacement)

def blackFormulaImpliedStdDev(*args) -> "Real":
    return _QuantExt.blackFormulaImpliedStdDev(*args)

def blackFormulaCashItmProbability(optionType: "Option::Type", strike: "Real", forward: "Real", stdDev: "Real", displacement: "Real"=0.0) -> "Real":
    return _QuantExt.blackFormulaCashItmProbability(optionType, strike, forward, stdDev, displacement)

def bachelierBlackFormula(optionType: "Option::Type", strike: "Real", forward: "Real", stdDev: "Real", discount: "Real"=1.0) -> "Real":
    return _QuantExt.bachelierBlackFormula(optionType, strike, forward, stdDev, discount)

def bachelierBlackFormulaImpliedVol(optionType: "Option::Type", strike: "Real", forward: "Real", tte: "Real", bachelierPrice: "Real", discount: "Real"=1.0) -> "Real":
    return _QuantExt.bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount)
class BlackDeltaCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ot: "Option::Type", dt: "DeltaVolQuote::DeltaType", spot: "Real", dDiscount: "DiscountFactor", fDiscount: "DiscountFactor", stDev: "Real"):
        _QuantExt.BlackDeltaCalculator_swiginit(self, _QuantExt.new_BlackDeltaCalculator(ot, dt, spot, dDiscount, fDiscount, stDev))

    def deltaFromStrike(self, strike: "Real") -> "Real":
        return _QuantExt.BlackDeltaCalculator_deltaFromStrike(self, strike)

    def strikeFromDelta(self, delta: "Real") -> "Real":
        return _QuantExt.BlackDeltaCalculator_strikeFromDelta(self, delta)

    def atmStrike(self, atmT: "DeltaVolQuote::AtmType") -> "Real":
        return _QuantExt.BlackDeltaCalculator_atmStrike(self, atmT)
    __swig_destroy__ = _QuantExt.delete_BlackDeltaCalculator

# Register BlackDeltaCalculator in _QuantExt:
_QuantExt.BlackDeltaCalculator_swigregister(BlackDeltaCalculator)

class CallabilityPrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dirty = _QuantExt.CallabilityPrice_Dirty
    Clean = _QuantExt.CallabilityPrice_Clean

    def __init__(self, amount: "Real", type: "CallabilityPrice::Type"):
        _QuantExt.CallabilityPrice_swiginit(self, _QuantExt.new_CallabilityPrice(amount, type))

    def amount(self) -> "Real":
        return _QuantExt.CallabilityPrice_amount(self)

    def type(self) -> "CallabilityPrice::Type":
        return _QuantExt.CallabilityPrice_type(self)
    __swig_destroy__ = _QuantExt.delete_CallabilityPrice

# Register CallabilityPrice in _QuantExt:
_QuantExt.CallabilityPrice_swigregister(CallabilityPrice)

class Callability(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Callability *":
        return _QuantExt.Callability___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Callability___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Callability___bool__(self)

    def __init__(self, price: "CallabilityPrice", type: "Callability::Type", date: "Date"):
        _QuantExt.Callability_swiginit(self, _QuantExt.new_Callability(price, type, date))
    Call = _QuantExt.Callability_Call
    Put = _QuantExt.Callability_Put
    __swig_destroy__ = _QuantExt.delete_Callability

    def price(self) -> "CallabilityPrice const &":
        return _QuantExt.Callability_price(self)

    def type(self) -> "Callability::Type":
        return _QuantExt.Callability_type(self)

    def date(self) -> "Date":
        return _QuantExt.Callability_date(self)

# Register Callability in _QuantExt:
_QuantExt.Callability_swigregister(Callability)

class SoftCallability(Callability):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, price: "CallabilityPrice", date: "Date", trigger: "Real"):
        _QuantExt.SoftCallability_swiginit(self, _QuantExt.new_SoftCallability(price, date, trigger))
    __swig_destroy__ = _QuantExt.delete_SoftCallability

# Register SoftCallability in _QuantExt:
_QuantExt.SoftCallability_swigregister(SoftCallability)

class CallabilitySchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.CallabilitySchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.CallabilitySchedule___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CallabilitySchedule___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Callability > >::size_type":
        return _QuantExt.CallabilitySchedule___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Callability > >::difference_type", j: "std::vector< boost::shared_ptr< Callability > >::difference_type") -> "std::vector< boost::shared_ptr< Callability >,std::allocator< boost::shared_ptr< Callability > > > *":
        return _QuantExt.CallabilitySchedule___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.CallabilitySchedule___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Callability > >::difference_type", j: "std::vector< boost::shared_ptr< Callability > >::difference_type") -> "void":
        return _QuantExt.CallabilitySchedule___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.CallabilitySchedule___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Callability > >::value_type const &":
        return _QuantExt.CallabilitySchedule___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.CallabilitySchedule___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Callability > >::value_type":
        return _QuantExt.CallabilitySchedule_pop(self)

    def append(self, x: "Callability") -> "void":
        return _QuantExt.CallabilitySchedule_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.CallabilitySchedule_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Callability > >::size_type":
        return _QuantExt.CallabilitySchedule_size(self)

    def swap(self, v: "CallabilitySchedule") -> "void":
        return _QuantExt.CallabilitySchedule_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Callability > >::iterator":
        return _QuantExt.CallabilitySchedule_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Callability > >::iterator":
        return _QuantExt.CallabilitySchedule_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Callability > >::reverse_iterator":
        return _QuantExt.CallabilitySchedule_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Callability > >::reverse_iterator":
        return _QuantExt.CallabilitySchedule_rend(self)

    def clear(self) -> "void":
        return _QuantExt.CallabilitySchedule_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Callability > >::allocator_type":
        return _QuantExt.CallabilitySchedule_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.CallabilitySchedule_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Callability > >::iterator":
        return _QuantExt.CallabilitySchedule_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.CallabilitySchedule_swiginit(self, _QuantExt.new_CallabilitySchedule(*args))

    def push_back(self, x: "Callability") -> "void":
        return _QuantExt.CallabilitySchedule_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Callability > >::value_type const &":
        return _QuantExt.CallabilitySchedule_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Callability > >::value_type const &":
        return _QuantExt.CallabilitySchedule_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Callability > >::size_type", x: "Callability") -> "void":
        return _QuantExt.CallabilitySchedule_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.CallabilitySchedule_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.CallabilitySchedule_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Callability > >::size_type") -> "void":
        return _QuantExt.CallabilitySchedule_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Callability > >::size_type":
        return _QuantExt.CallabilitySchedule_capacity(self)
    __swig_destroy__ = _QuantExt.delete_CallabilitySchedule

# Register CallabilitySchedule in _QuantExt:
_QuantExt.CallabilitySchedule_swigregister(CallabilitySchedule)

class Seasonality(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Seasonality *":
        return _QuantExt.Seasonality___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Seasonality___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Seasonality___bool__(self)

    def __init__(self):
        _QuantExt.Seasonality_swiginit(self, _QuantExt.new_Seasonality())
    __swig_destroy__ = _QuantExt.delete_Seasonality

    def correctZeroRate(self, d: "Date", r: "Rate const", iTS: "InflationTermStructure const &") -> "Rate":
        return _QuantExt.Seasonality_correctZeroRate(self, d, r, iTS)

    def correctYoYRate(self, d: "Date", r: "Rate const", iTS: "InflationTermStructure const &") -> "Rate":
        return _QuantExt.Seasonality_correctYoYRate(self, d, r, iTS)

    def isConsistent(self, iTS: "InflationTermStructure const &") -> "bool":
        return _QuantExt.Seasonality_isConsistent(self, iTS)

# Register Seasonality in _QuantExt:
_QuantExt.Seasonality_swigregister(Seasonality)

class MultiplicativePriceSeasonalityPtr(Seasonality):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate: "Date", frequency: "Frequency", seasonalityFactors: "DoubleVector"):
        _QuantExt.MultiplicativePriceSeasonalityPtr_swiginit(self, _QuantExt.new_MultiplicativePriceSeasonalityPtr(seasonalityBaseDate, frequency, seasonalityFactors))
    __swig_destroy__ = _QuantExt.delete_MultiplicativePriceSeasonalityPtr

# Register MultiplicativePriceSeasonalityPtr in _QuantExt:
_QuantExt.MultiplicativePriceSeasonalityPtr_swigregister(MultiplicativePriceSeasonalityPtr)

class YoYInflationTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "YoYInflationTermStructure *":
        return _QuantExt.YoYInflationTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.YoYInflationTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YoYInflationTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.YoYInflationTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.YoYInflationTermStructure_swiginit(self, _QuantExt.new_YoYInflationTermStructure())
    __swig_destroy__ = _QuantExt.delete_YoYInflationTermStructure

    def yoyRate(self, *args) -> "Rate":
        return _QuantExt.YoYInflationTermStructure_yoyRate(self, *args)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.YoYInflationTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.YoYInflationTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.YoYInflationTermStructure_maxTime(self)

    def observationLag(self) -> "Period":
        return _QuantExt.YoYInflationTermStructure_observationLag(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.YoYInflationTermStructure_frequency(self)

    def indexIsInterpolated(self) -> "bool":
        return _QuantExt.YoYInflationTermStructure_indexIsInterpolated(self)

    def baseRate(self) -> "Rate":
        return _QuantExt.YoYInflationTermStructure_baseRate(self)

    def nominalTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.YoYInflationTermStructure_nominalTermStructure(self)

    def baseDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructure_baseDate(self)

    def setSeasonality(self, *args) -> "void":
        return _QuantExt.YoYInflationTermStructure_setSeasonality(self, *args)

    def seasonality(self) -> "boost::shared_ptr< Seasonality >":
        return _QuantExt.YoYInflationTermStructure_seasonality(self)

    def hasSeasonality(self) -> "bool":
        return _QuantExt.YoYInflationTermStructure_hasSeasonality(self)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.YoYInflationTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.YoYInflationTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.YoYInflationTermStructure_allowsExtrapolation(self)

# Register YoYInflationTermStructure in _QuantExt:
_QuantExt.YoYInflationTermStructure_swigregister(YoYInflationTermStructure)

class YoYInflationTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YoYInflationTermStructureHandle_swiginit(self, _QuantExt.new_YoYInflationTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< YoYInflationTermStructure >":
        return _QuantExt.YoYInflationTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.YoYInflationTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YoYInflationTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.YoYInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_YoYInflationTermStructureHandle

    def yoyRate(self, *args) -> "Rate":
        return _QuantExt.YoYInflationTermStructureHandle_yoyRate(self, *args)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.YoYInflationTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.YoYInflationTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.YoYInflationTermStructureHandle_maxTime(self)

    def observationLag(self) -> "Period":
        return _QuantExt.YoYInflationTermStructureHandle_observationLag(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.YoYInflationTermStructureHandle_frequency(self)

    def indexIsInterpolated(self) -> "bool":
        return _QuantExt.YoYInflationTermStructureHandle_indexIsInterpolated(self)

    def baseRate(self) -> "Rate":
        return _QuantExt.YoYInflationTermStructureHandle_baseRate(self)

    def nominalTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.YoYInflationTermStructureHandle_nominalTermStructure(self)

    def baseDate(self) -> "Date":
        return _QuantExt.YoYInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args) -> "void":
        return _QuantExt.YoYInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self) -> "boost::shared_ptr< Seasonality >":
        return _QuantExt.YoYInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self) -> "bool":
        return _QuantExt.YoYInflationTermStructureHandle_hasSeasonality(self)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.YoYInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.YoYInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.YoYInflationTermStructureHandle_allowsExtrapolation(self)

# Register YoYInflationTermStructureHandle in _QuantExt:
_QuantExt.YoYInflationTermStructureHandle_swigregister(YoYInflationTermStructureHandle)

class RelinkableYoYInflationTermStructureHandle(YoYInflationTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableYoYInflationTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableYoYInflationTermStructureHandle(*args))

    def linkTo(self, arg2: "YoYInflationTermStructure") -> "void":
        return _QuantExt.RelinkableYoYInflationTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableYoYInflationTermStructureHandle

# Register RelinkableYoYInflationTermStructureHandle in _QuantExt:
_QuantExt.RelinkableYoYInflationTermStructureHandle_swigregister(RelinkableYoYInflationTermStructureHandle)

class ZeroInflationTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "ZeroInflationTermStructure *":
        return _QuantExt.ZeroInflationTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.ZeroInflationTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.ZeroInflationTermStructure_swiginit(self, _QuantExt.new_ZeroInflationTermStructure())
    __swig_destroy__ = _QuantExt.delete_ZeroInflationTermStructure

    def zeroRate(self, *args) -> "Rate":
        return _QuantExt.ZeroInflationTermStructure_zeroRate(self, *args)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.ZeroInflationTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.ZeroInflationTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.ZeroInflationTermStructure_maxTime(self)

    def observationLag(self) -> "Period":
        return _QuantExt.ZeroInflationTermStructure_observationLag(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.ZeroInflationTermStructure_frequency(self)

    def indexIsInterpolated(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructure_indexIsInterpolated(self)

    def baseRate(self) -> "Rate":
        return _QuantExt.ZeroInflationTermStructure_baseRate(self)

    def nominalTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.ZeroInflationTermStructure_nominalTermStructure(self)

    def baseDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructure_baseDate(self)

    def setSeasonality(self, *args) -> "void":
        return _QuantExt.ZeroInflationTermStructure_setSeasonality(self, *args)

    def seasonality(self) -> "boost::shared_ptr< Seasonality >":
        return _QuantExt.ZeroInflationTermStructure_seasonality(self)

    def hasSeasonality(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructure_hasSeasonality(self)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.ZeroInflationTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.ZeroInflationTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructure_allowsExtrapolation(self)

# Register ZeroInflationTermStructure in _QuantExt:
_QuantExt.ZeroInflationTermStructure_swigregister(ZeroInflationTermStructure)

class ZeroInflationTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZeroInflationTermStructureHandle_swiginit(self, _QuantExt.new_ZeroInflationTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< ZeroInflationTermStructure >":
        return _QuantExt.ZeroInflationTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.ZeroInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_ZeroInflationTermStructureHandle

    def zeroRate(self, *args) -> "Rate":
        return _QuantExt.ZeroInflationTermStructureHandle_zeroRate(self, *args)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.ZeroInflationTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.ZeroInflationTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.ZeroInflationTermStructureHandle_maxTime(self)

    def observationLag(self) -> "Period":
        return _QuantExt.ZeroInflationTermStructureHandle_observationLag(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.ZeroInflationTermStructureHandle_frequency(self)

    def indexIsInterpolated(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructureHandle_indexIsInterpolated(self)

    def baseRate(self) -> "Rate":
        return _QuantExt.ZeroInflationTermStructureHandle_baseRate(self)

    def nominalTermStructure(self) -> "Handle< YieldTermStructure >":
        return _QuantExt.ZeroInflationTermStructureHandle_nominalTermStructure(self)

    def baseDate(self) -> "Date":
        return _QuantExt.ZeroInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args) -> "void":
        return _QuantExt.ZeroInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self) -> "boost::shared_ptr< Seasonality >":
        return _QuantExt.ZeroInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructureHandle_hasSeasonality(self)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.ZeroInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.ZeroInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.ZeroInflationTermStructureHandle_allowsExtrapolation(self)

# Register ZeroInflationTermStructureHandle in _QuantExt:
_QuantExt.ZeroInflationTermStructureHandle_swigregister(ZeroInflationTermStructureHandle)

class RelinkableZeroInflationTermStructureHandle(ZeroInflationTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableZeroInflationTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableZeroInflationTermStructureHandle(*args))

    def linkTo(self, arg2: "ZeroInflationTermStructure") -> "void":
        return _QuantExt.RelinkableZeroInflationTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableZeroInflationTermStructureHandle

# Register RelinkableZeroInflationTermStructureHandle in _QuantExt:
_QuantExt.RelinkableZeroInflationTermStructureHandle_swigregister(RelinkableZeroInflationTermStructureHandle)

class Region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self) -> "std::string":
        return _QuantExt.Region_name(self)

    def code(self) -> "std::string":
        return _QuantExt.Region_code(self)
    __swig_destroy__ = _QuantExt.delete_Region

# Register Region in _QuantExt:
_QuantExt.Region_swigregister(Region)

class CustomRegion(Region):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", code: "std::string const &"):
        _QuantExt.CustomRegion_swiginit(self, _QuantExt.new_CustomRegion(name, code))
    __swig_destroy__ = _QuantExt.delete_CustomRegion

# Register CustomRegion in _QuantExt:
_QuantExt.CustomRegion_swigregister(CustomRegion)

class InflationIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def interpolated(self) -> "bool":
        return _QuantExt.InflationIndex_interpolated(self)

    def frequency(self) -> "Frequency":
        return _QuantExt.InflationIndex_frequency(self)

    def availabilityLag(self) -> "Period":
        return _QuantExt.InflationIndex_availabilityLag(self)

    def currency(self) -> "Currency":
        return _QuantExt.InflationIndex_currency(self)
    __swig_destroy__ = _QuantExt.delete_InflationIndex

# Register InflationIndex in _QuantExt:
_QuantExt.InflationIndex_swigregister(InflationIndex)

class ZeroInflationIndex(InflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZeroInflationIndex_swiginit(self, _QuantExt.new_ZeroInflationIndex(*args))
    __swig_destroy__ = _QuantExt.delete_ZeroInflationIndex

# Register ZeroInflationIndex in _QuantExt:
_QuantExt.ZeroInflationIndex_swigregister(ZeroInflationIndex)

class YoYInflationIndex(InflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantExt.delete_YoYInflationIndex

# Register YoYInflationIndex in _QuantExt:
_QuantExt.YoYInflationIndex_swigregister(YoYInflationIndex)

class EUHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EUHICP_swiginit(self, _QuantExt.new_EUHICP(*args))
    __swig_destroy__ = _QuantExt.delete_EUHICP

# Register EUHICP in _QuantExt:
_QuantExt.EUHICP_swigregister(EUHICP)

class EUHICPXT(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.EUHICPXT_swiginit(self, _QuantExt.new_EUHICPXT(*args))
    __swig_destroy__ = _QuantExt.delete_EUHICPXT

# Register EUHICPXT in _QuantExt:
_QuantExt.EUHICPXT_swigregister(EUHICPXT)

class FRHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FRHICP_swiginit(self, _QuantExt.new_FRHICP(*args))
    __swig_destroy__ = _QuantExt.delete_FRHICP

# Register FRHICP in _QuantExt:
_QuantExt.FRHICP_swigregister(FRHICP)

class UKRPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.UKRPI_swiginit(self, _QuantExt.new_UKRPI(*args))
    __swig_destroy__ = _QuantExt.delete_UKRPI

# Register UKRPI in _QuantExt:
_QuantExt.UKRPI_swigregister(UKRPI)

class USCPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.USCPI_swiginit(self, _QuantExt.new_USCPI(*args))
    __swig_destroy__ = _QuantExt.delete_USCPI

# Register USCPI in _QuantExt:
_QuantExt.USCPI_swigregister(USCPI)

class ZACPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZACPI_swiginit(self, _QuantExt.new_ZACPI(*args))
    __swig_destroy__ = _QuantExt.delete_ZACPI

# Register ZACPI in _QuantExt:
_QuantExt.ZACPI_swigregister(ZACPI)

class YYEUHICP(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYEUHICP_swiginit(self, _QuantExt.new_YYEUHICP(*args))
    __swig_destroy__ = _QuantExt.delete_YYEUHICP

# Register YYEUHICP in _QuantExt:
_QuantExt.YYEUHICP_swigregister(YYEUHICP)

class YYEUHICPXT(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYEUHICPXT_swiginit(self, _QuantExt.new_YYEUHICPXT(*args))
    __swig_destroy__ = _QuantExt.delete_YYEUHICPXT

# Register YYEUHICPXT in _QuantExt:
_QuantExt.YYEUHICPXT_swigregister(YYEUHICPXT)

class YYFRHICP(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYFRHICP_swiginit(self, _QuantExt.new_YYFRHICP(*args))
    __swig_destroy__ = _QuantExt.delete_YYFRHICP

# Register YYFRHICP in _QuantExt:
_QuantExt.YYFRHICP_swigregister(YYFRHICP)

class YYUKRPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYUKRPI_swiginit(self, _QuantExt.new_YYUKRPI(*args))
    __swig_destroy__ = _QuantExt.delete_YYUKRPI

# Register YYUKRPI in _QuantExt:
_QuantExt.YYUKRPI_swigregister(YYUKRPI)

class YYUSCPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYUSCPI_swiginit(self, _QuantExt.new_YYUSCPI(*args))
    __swig_destroy__ = _QuantExt.delete_YYUSCPI

# Register YYUSCPI in _QuantExt:
_QuantExt.YYUSCPI_swigregister(YYUSCPI)

class YYZACPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.YYZACPI_swiginit(self, _QuantExt.new_YYZACPI(*args))
    __swig_destroy__ = _QuantExt.delete_YYZACPI

# Register YYZACPI in _QuantExt:
_QuantExt.YYZACPI_swigregister(YYZACPI)

class CPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AsIndex = _QuantExt.CPI_AsIndex
    Flat = _QuantExt.CPI_Flat
    Linear = _QuantExt.CPI_Linear

    def __init__(self):
        _QuantExt.CPI_swiginit(self, _QuantExt.new_CPI())
    __swig_destroy__ = _QuantExt.delete_CPI

# Register CPI in _QuantExt:
_QuantExt.CPI_swigregister(CPI)

class ZeroHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "ZeroHelper *":
        return _QuantExt.ZeroHelper___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.ZeroHelper___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ZeroHelper___bool__(self)

    def __init__(self):
        _QuantExt.ZeroHelper_swiginit(self, _QuantExt.new_ZeroHelper())
    __swig_destroy__ = _QuantExt.delete_ZeroHelper

# Register ZeroHelper in _QuantExt:
_QuantExt.ZeroHelper_swigregister(ZeroHelper)

class YoYHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "YoYHelper *":
        return _QuantExt.YoYHelper___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.YoYHelper___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YoYHelper___bool__(self)

    def __init__(self):
        _QuantExt.YoYHelper_swiginit(self, _QuantExt.new_YoYHelper())
    __swig_destroy__ = _QuantExt.delete_YoYHelper

# Register YoYHelper in _QuantExt:
_QuantExt.YoYHelper_swigregister(YoYHelper)

class ZeroHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.ZeroHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.ZeroHelperVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ZeroHelperVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::size_type":
        return _QuantExt.ZeroHelperVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< ZeroHelper > >::difference_type", j: "std::vector< boost::shared_ptr< ZeroHelper > >::difference_type") -> "std::vector< boost::shared_ptr< ZeroHelper >,std::allocator< boost::shared_ptr< ZeroHelper > > > *":
        return _QuantExt.ZeroHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.ZeroHelperVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< ZeroHelper > >::difference_type", j: "std::vector< boost::shared_ptr< ZeroHelper > >::difference_type") -> "void":
        return _QuantExt.ZeroHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.ZeroHelperVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< ZeroHelper > >::value_type const &":
        return _QuantExt.ZeroHelperVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.ZeroHelperVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::value_type":
        return _QuantExt.ZeroHelperVector_pop(self)

    def append(self, x: "ZeroHelper") -> "void":
        return _QuantExt.ZeroHelperVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.ZeroHelperVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::size_type":
        return _QuantExt.ZeroHelperVector_size(self)

    def swap(self, v: "ZeroHelperVector") -> "void":
        return _QuantExt.ZeroHelperVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::iterator":
        return _QuantExt.ZeroHelperVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::iterator":
        return _QuantExt.ZeroHelperVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::reverse_iterator":
        return _QuantExt.ZeroHelperVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::reverse_iterator":
        return _QuantExt.ZeroHelperVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.ZeroHelperVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::allocator_type":
        return _QuantExt.ZeroHelperVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.ZeroHelperVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< ZeroHelper > >::iterator":
        return _QuantExt.ZeroHelperVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.ZeroHelperVector_swiginit(self, _QuantExt.new_ZeroHelperVector(*args))

    def push_back(self, x: "ZeroHelper") -> "void":
        return _QuantExt.ZeroHelperVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::value_type const &":
        return _QuantExt.ZeroHelperVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::value_type const &":
        return _QuantExt.ZeroHelperVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< ZeroHelper > >::size_type", x: "ZeroHelper") -> "void":
        return _QuantExt.ZeroHelperVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.ZeroHelperVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.ZeroHelperVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< ZeroHelper > >::size_type") -> "void":
        return _QuantExt.ZeroHelperVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< ZeroHelper > >::size_type":
        return _QuantExt.ZeroHelperVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_ZeroHelperVector

# Register ZeroHelperVector in _QuantExt:
_QuantExt.ZeroHelperVector_swigregister(ZeroHelperVector)

class YoYHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.YoYHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.YoYHelperVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.YoYHelperVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::size_type":
        return _QuantExt.YoYHelperVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< YoYHelper > >::difference_type", j: "std::vector< boost::shared_ptr< YoYHelper > >::difference_type") -> "std::vector< boost::shared_ptr< YoYHelper >,std::allocator< boost::shared_ptr< YoYHelper > > > *":
        return _QuantExt.YoYHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.YoYHelperVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< YoYHelper > >::difference_type", j: "std::vector< boost::shared_ptr< YoYHelper > >::difference_type") -> "void":
        return _QuantExt.YoYHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.YoYHelperVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< YoYHelper > >::value_type const &":
        return _QuantExt.YoYHelperVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.YoYHelperVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::value_type":
        return _QuantExt.YoYHelperVector_pop(self)

    def append(self, x: "YoYHelper") -> "void":
        return _QuantExt.YoYHelperVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.YoYHelperVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::size_type":
        return _QuantExt.YoYHelperVector_size(self)

    def swap(self, v: "YoYHelperVector") -> "void":
        return _QuantExt.YoYHelperVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::iterator":
        return _QuantExt.YoYHelperVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::iterator":
        return _QuantExt.YoYHelperVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::reverse_iterator":
        return _QuantExt.YoYHelperVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::reverse_iterator":
        return _QuantExt.YoYHelperVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.YoYHelperVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::allocator_type":
        return _QuantExt.YoYHelperVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.YoYHelperVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< YoYHelper > >::iterator":
        return _QuantExt.YoYHelperVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.YoYHelperVector_swiginit(self, _QuantExt.new_YoYHelperVector(*args))

    def push_back(self, x: "YoYHelper") -> "void":
        return _QuantExt.YoYHelperVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::value_type const &":
        return _QuantExt.YoYHelperVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::value_type const &":
        return _QuantExt.YoYHelperVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< YoYHelper > >::size_type", x: "YoYHelper") -> "void":
        return _QuantExt.YoYHelperVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.YoYHelperVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.YoYHelperVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< YoYHelper > >::size_type") -> "void":
        return _QuantExt.YoYHelperVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< YoYHelper > >::size_type":
        return _QuantExt.YoYHelperVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_YoYHelperVector

# Register YoYHelperVector in _QuantExt:
_QuantExt.YoYHelperVector_swigregister(YoYHelperVector)

class ZeroCouponInflationSwapHelper(ZeroHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate: "Rate", lag: "Period", maturity: "Date", calendar: "Calendar", bdc: "BusinessDayConvention", dayCounter: "DayCounter", index: "ZeroInflationIndex"):
        _QuantExt.ZeroCouponInflationSwapHelper_swiginit(self, _QuantExt.new_ZeroCouponInflationSwapHelper(rate, lag, maturity, calendar, bdc, dayCounter, index))
    __swig_destroy__ = _QuantExt.delete_ZeroCouponInflationSwapHelper

# Register ZeroCouponInflationSwapHelper in _QuantExt:
_QuantExt.ZeroCouponInflationSwapHelper_swigregister(ZeroCouponInflationSwapHelper)

class YearOnYearInflationSwapHelper(YoYHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate: "Rate", lag: "Period", maturity: "Date", calendar: "Calendar", bdc: "BusinessDayConvention", dayCounter: "DayCounter", index: "YoYInflationIndex"):
        _QuantExt.YearOnYearInflationSwapHelper_swiginit(self, _QuantExt.new_YearOnYearInflationSwapHelper(rate, lag, maturity, calendar, bdc, dayCounter, index))
    __swig_destroy__ = _QuantExt.delete_YearOnYearInflationSwapHelper

# Register YearOnYearInflationSwapHelper in _QuantExt:
_QuantExt.YearOnYearInflationSwapHelper_swigregister(YearOnYearInflationSwapHelper)

class PiecewiseZeroInflation(ZeroInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.PiecewiseZeroInflation_swiginit(self, _QuantExt.new_PiecewiseZeroInflation(*args, **kwargs))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseZeroInflation_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseZeroInflation_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseZeroInflation_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseZeroInflation

# Register PiecewiseZeroInflation in _QuantExt:
_QuantExt.PiecewiseZeroInflation_swigregister(PiecewiseZeroInflation)

class PiecewiseYoYInflation(YoYInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.PiecewiseYoYInflation_swiginit(self, _QuantExt.new_PiecewiseYoYInflation(*args, **kwargs))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseYoYInflation_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseYoYInflation_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseYoYInflation_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseYoYInflation

# Register PiecewiseYoYInflation in _QuantExt:
_QuantExt.PiecewiseYoYInflation_swigregister(PiecewiseYoYInflation)


def inflationBaseDate(referenceDate: "Date", observationLag: "Period", frequency: "Frequency", indexIsInterpolated: "bool") -> "Date":
    return _QuantExt.inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated)
class ZeroCouponInflationSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.ZeroCouponInflationSwap_Receiver
    Payer = _QuantExt.ZeroCouponInflationSwap_Payer

    def __init__(self, *args):
        _QuantExt.ZeroCouponInflationSwap_swiginit(self, _QuantExt.new_ZeroCouponInflationSwap(*args))

    def fairRate(self) -> "Rate":
        return _QuantExt.ZeroCouponInflationSwap_fairRate(self)

    def fixedLegNPV(self) -> "Real":
        return _QuantExt.ZeroCouponInflationSwap_fixedLegNPV(self)

    def inflationLegNPV(self) -> "Real":
        return _QuantExt.ZeroCouponInflationSwap_inflationLegNPV(self)

    def fixedLeg(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _QuantExt.ZeroCouponInflationSwap_fixedLeg(self)

    def inflationLeg(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _QuantExt.ZeroCouponInflationSwap_inflationLeg(self)

    def type(self) -> "ZeroCouponInflationSwap::Type":
        return _QuantExt.ZeroCouponInflationSwap_type(self)
    __swig_destroy__ = _QuantExt.delete_ZeroCouponInflationSwap

# Register ZeroCouponInflationSwap in _QuantExt:
_QuantExt.ZeroCouponInflationSwap_swigregister(ZeroCouponInflationSwap)

class YearOnYearInflationSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.YearOnYearInflationSwap_Receiver
    Payer = _QuantExt.YearOnYearInflationSwap_Payer

    def __init__(self, type: "YearOnYearInflationSwap::Type", nominal: "Real", fixedSchedule: "Schedule", fixedRate: "Rate", fixedDayCounter: "DayCounter", yoySchedule: "Schedule", index: "YoYInflationIndex", lag: "Period", spread: "Spread", yoyDayCounter: "DayCounter", paymentCalendar: "Calendar", paymentConvention: "BusinessDayConvention"=Following):
        _QuantExt.YearOnYearInflationSwap_swiginit(self, _QuantExt.new_YearOnYearInflationSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention))

    def fairRate(self) -> "Rate":
        return _QuantExt.YearOnYearInflationSwap_fairRate(self)

    def fixedLegNPV(self) -> "Real":
        return _QuantExt.YearOnYearInflationSwap_fixedLegNPV(self)

    def yoyLegNPV(self) -> "Real":
        return _QuantExt.YearOnYearInflationSwap_yoyLegNPV(self)

    def fairSpread(self) -> "Spread":
        return _QuantExt.YearOnYearInflationSwap_fairSpread(self)

    def fixedLeg(self) -> "Leg const &":
        return _QuantExt.YearOnYearInflationSwap_fixedLeg(self)

    def yoyLeg(self) -> "Leg const &":
        return _QuantExt.YearOnYearInflationSwap_yoyLeg(self)
    __swig_destroy__ = _QuantExt.delete_YearOnYearInflationSwap

# Register YearOnYearInflationSwap in _QuantExt:
_QuantExt.YearOnYearInflationSwap_swigregister(YearOnYearInflationSwap)

class CPISwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.CPISwap_Receiver
    Payer = _QuantExt.CPISwap_Payer

    def __init__(self, *args):
        _QuantExt.CPISwap_swiginit(self, _QuantExt.new_CPISwap(*args))

    def fairRate(self) -> "Rate":
        return _QuantExt.CPISwap_fairRate(self)

    def floatLegNPV(self) -> "Real":
        return _QuantExt.CPISwap_floatLegNPV(self)

    def fairSpread(self) -> "Spread":
        return _QuantExt.CPISwap_fairSpread(self)

    def fixedLegNPV(self) -> "Real":
        return _QuantExt.CPISwap_fixedLegNPV(self)

    def cpiLeg(self) -> "Leg const &":
        return _QuantExt.CPISwap_cpiLeg(self)

    def floatLeg(self) -> "Leg const &":
        return _QuantExt.CPISwap_floatLeg(self)
    __swig_destroy__ = _QuantExt.delete_CPISwap

# Register CPISwap in _QuantExt:
_QuantExt.CPISwap_swigregister(CPISwap)

class YoYInflationCapFloor(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def impliedVolatility(self, price: "Real", curve: "YoYInflationTermStructureHandle", guess: "Volatility", accuracy: "Real"=1.0e-4, maxEvaluations: "Size"=100, minVol: "Volatility"=1.0e-7, maxVol: "Volatility"=4.0) -> "Volatility":
        return _QuantExt.YoYInflationCapFloor_impliedVolatility(self, price, curve, guess, accuracy, maxEvaluations, minVol, maxVol)

    def __init__(self):
        _QuantExt.YoYInflationCapFloor_swiginit(self, _QuantExt.new_YoYInflationCapFloor())
    __swig_destroy__ = _QuantExt.delete_YoYInflationCapFloor

# Register YoYInflationCapFloor in _QuantExt:
_QuantExt.YoYInflationCapFloor_swigregister(YoYInflationCapFloor)

class YoYInflationCap(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", capRates: "DoubleVector"):
        _QuantExt.YoYInflationCap_swiginit(self, _QuantExt.new_YoYInflationCap(leg, capRates))
    __swig_destroy__ = _QuantExt.delete_YoYInflationCap

# Register YoYInflationCap in _QuantExt:
_QuantExt.YoYInflationCap_swigregister(YoYInflationCap)

class YoYInflationFloor(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", floorRates: "DoubleVector"):
        _QuantExt.YoYInflationFloor_swiginit(self, _QuantExt.new_YoYInflationFloor(leg, floorRates))
    __swig_destroy__ = _QuantExt.delete_YoYInflationFloor

# Register YoYInflationFloor in _QuantExt:
_QuantExt.YoYInflationFloor_swigregister(YoYInflationFloor)

class YoYInflationCollar(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", capRates: "DoubleVector", floorRates: "DoubleVector"):
        _QuantExt.YoYInflationCollar_swiginit(self, _QuantExt.new_YoYInflationCollar(leg, capRates, floorRates))
    __swig_destroy__ = _QuantExt.delete_YoYInflationCollar

# Register YoYInflationCollar in _QuantExt:
_QuantExt.YoYInflationCollar_swigregister(YoYInflationCollar)

class ShortRateModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "ShortRateModel *":
        return _QuantExt.ShortRateModel___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.ShortRateModel___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ShortRateModel___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.ShortRateModel_asObservable(self)

    def __init__(self):
        _QuantExt.ShortRateModel_swiginit(self, _QuantExt.new_ShortRateModel())
    __swig_destroy__ = _QuantExt.delete_ShortRateModel

    def params(self) -> "Array":
        return _QuantExt.ShortRateModel_params(self)

    def calibrate(self, *args) -> "void":
        return _QuantExt.ShortRateModel_calibrate(self, *args)

    def value(self, params: "Array", arg3: "CalibrationHelperVector") -> "Real":
        return _QuantExt.ShortRateModel_value(self, params, arg3)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ShortRateModel_endCriteria(self)

    def setParams(self, params: "Array") -> "void":
        return _QuantExt.ShortRateModel_setParams(self, params)

# Register ShortRateModel in _QuantExt:
_QuantExt.ShortRateModel_swigregister(ShortRateModel)

class ShortRateModelHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ShortRateModelHandle_swiginit(self, _QuantExt.new_ShortRateModelHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< ShortRateModel >":
        return _QuantExt.ShortRateModelHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.ShortRateModelHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.ShortRateModelHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.ShortRateModelHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_ShortRateModelHandle

    def params(self) -> "Array":
        return _QuantExt.ShortRateModelHandle_params(self)

    def calibrate(self, *args) -> "void":
        return _QuantExt.ShortRateModelHandle_calibrate(self, *args)

    def value(self, params: "Array", arg3: "CalibrationHelperVector") -> "Real":
        return _QuantExt.ShortRateModelHandle_value(self, params, arg3)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.ShortRateModelHandle_endCriteria(self)

    def setParams(self, params: "Array") -> "void":
        return _QuantExt.ShortRateModelHandle_setParams(self, params)

# Register ShortRateModelHandle in _QuantExt:
_QuantExt.ShortRateModelHandle_swigregister(ShortRateModelHandle)

class RelinkableShortRateModelHandle(ShortRateModelHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableShortRateModelHandle_swiginit(self, _QuantExt.new_RelinkableShortRateModelHandle(*args))

    def linkTo(self, arg2: "ShortRateModel") -> "void":
        return _QuantExt.RelinkableShortRateModelHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableShortRateModelHandle

# Register RelinkableShortRateModelHandle in _QuantExt:
_QuantExt.RelinkableShortRateModelHandle_swigregister(RelinkableShortRateModelHandle)

class Vasicek(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r0: "Rate"=0.05, a: "Real"=0.1, b: "Real"=0.05, sigma: "Real"=0.01, lambda_parameter: "Real"=0.0):
        _QuantExt.Vasicek_swiginit(self, _QuantExt.new_Vasicek(r0, a, b, sigma, lambda_parameter))

    def discount(self, t: "Time") -> "DiscountFactor":
        return _QuantExt.Vasicek_discount(self, t)

    def discountBond(self, now: "Time", maturity: "Time", rate: "Rate") -> "Real":
        return _QuantExt.Vasicek_discountBond(self, now, maturity, rate)
    __swig_destroy__ = _QuantExt.delete_Vasicek

# Register Vasicek in _QuantExt:
_QuantExt.Vasicek_swigregister(Vasicek)

class HullWhite(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure: "YieldTermStructureHandle", a: "Real"=0.1, sigma: "Real"=0.01):
        _QuantExt.HullWhite_swiginit(self, _QuantExt.new_HullWhite(termStructure, a, sigma))

    def discount(self, t: "Time") -> "DiscountFactor":
        return _QuantExt.HullWhite_discount(self, t)

    def discountBond(self, now: "Time", maturity: "Time", rate: "Rate") -> "Real":
        return _QuantExt.HullWhite_discountBond(self, now, maturity, rate)

    @staticmethod
    def convexityBias(futurePrice: "Real", t: "Time", T: "Time", sigma: "Real", a: "Real") -> "Rate":
        return _QuantExt.HullWhite_convexityBias(futurePrice, t, T, sigma, a)
    __swig_destroy__ = _QuantExt.delete_HullWhite

# Register HullWhite in _QuantExt:
_QuantExt.HullWhite_swigregister(HullWhite)

def HullWhite_convexityBias(futurePrice: "Real", t: "Time", T: "Time", sigma: "Real", a: "Real") -> "Rate":
    return _QuantExt.HullWhite_convexityBias(futurePrice, t, T, sigma, a)

class BlackKarasinski(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure: "YieldTermStructureHandle", a: "Real"=0.1, sigma: "Real"=0.1):
        _QuantExt.BlackKarasinski_swiginit(self, _QuantExt.new_BlackKarasinski(termStructure, a, sigma))
    __swig_destroy__ = _QuantExt.delete_BlackKarasinski

# Register BlackKarasinski in _QuantExt:
_QuantExt.BlackKarasinski_swigregister(BlackKarasinski)

class G2(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure: "YieldTermStructureHandle", a: "Real"=0.1, sigma: "Real"=0.01, b: "Real"=0.1, eta: "Real"=0.01, rho: "Real"=-0.75):
        _QuantExt.G2_swiginit(self, _QuantExt.new_G2(termStructure, a, sigma, b, eta, rho))

    def discount(self, t: "Time") -> "DiscountFactor":
        return _QuantExt.G2_discount(self, t)

    def discountBond(self, t: "Time", T: "Time", x: "Rate", y: "Rate") -> "Real":
        return _QuantExt.G2_discountBond(self, t, T, x, y)
    __swig_destroy__ = _QuantExt.delete_G2

# Register G2 in _QuantExt:
_QuantExt.G2_swigregister(G2)

class JamshidianSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.JamshidianSwaptionEngine_swiginit(self, _QuantExt.new_JamshidianSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_JamshidianSwaptionEngine

# Register JamshidianSwaptionEngine in _QuantExt:
_QuantExt.JamshidianSwaptionEngine_swigregister(JamshidianSwaptionEngine)

class TreeSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TreeSwaptionEngine_swiginit(self, _QuantExt.new_TreeSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_TreeSwaptionEngine

# Register TreeSwaptionEngine in _QuantExt:
_QuantExt.TreeSwaptionEngine_swigregister(TreeSwaptionEngine)

class AnalyticCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AnalyticCapFloorEngine_swiginit(self, _QuantExt.new_AnalyticCapFloorEngine(*args))
    __swig_destroy__ = _QuantExt.delete_AnalyticCapFloorEngine

# Register AnalyticCapFloorEngine in _QuantExt:
_QuantExt.AnalyticCapFloorEngine_swigregister(AnalyticCapFloorEngine)

class TreeCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TreeCapFloorEngine_swiginit(self, _QuantExt.new_TreeCapFloorEngine(*args))
    __swig_destroy__ = _QuantExt.delete_TreeCapFloorEngine

# Register TreeCapFloorEngine in _QuantExt:
_QuantExt.TreeCapFloorEngine_swigregister(TreeCapFloorEngine)

class G2SwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "ShortRateModel", range: "Real", intervals: "Size"):
        _QuantExt.G2SwaptionEngine_swiginit(self, _QuantExt.new_G2SwaptionEngine(model, range, intervals))
    __swig_destroy__ = _QuantExt.delete_G2SwaptionEngine

# Register G2SwaptionEngine in _QuantExt:
_QuantExt.G2SwaptionEngine_swigregister(G2SwaptionEngine)

class FdG2SwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FdG2SwaptionEngine_swiginit(self, _QuantExt.new_FdG2SwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_FdG2SwaptionEngine

# Register FdG2SwaptionEngine in _QuantExt:
_QuantExt.FdG2SwaptionEngine_swigregister(FdG2SwaptionEngine)

class FdHullWhiteSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FdHullWhiteSwaptionEngine_swiginit(self, _QuantExt.new_FdHullWhiteSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_FdHullWhiteSwaptionEngine

# Register FdHullWhiteSwaptionEngine in _QuantExt:
_QuantExt.FdHullWhiteSwaptionEngine_swigregister(FdHullWhiteSwaptionEngine)

class Bond(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Bond_swiginit(self, _QuantExt.new_Bond(*args))

    def nextCouponRate(self, *args) -> "Rate":
        return _QuantExt.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args) -> "Rate":
        return _QuantExt.Bond_previousCouponRate(self, *args)

    def settlementDays(self) -> "Natural":
        return _QuantExt.Bond_settlementDays(self)

    def settlementDate(self, *args) -> "Date":
        return _QuantExt.Bond_settlementDate(self, *args)

    def startDate(self) -> "Date":
        return _QuantExt.Bond_startDate(self)

    def maturityDate(self) -> "Date":
        return _QuantExt.Bond_maturityDate(self)

    def issueDate(self) -> "Date":
        return _QuantExt.Bond_issueDate(self)

    def cashflows(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _QuantExt.Bond_cashflows(self)

    def redemptions(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _QuantExt.Bond_redemptions(self)

    def redemption(self) -> "boost::shared_ptr< CashFlow >":
        return _QuantExt.Bond_redemption(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.Bond_calendar(self)

    def notionals(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.Bond_notionals(self)

    def notional(self, *args) -> "Real":
        return _QuantExt.Bond_notional(self, *args)

    def cleanPrice(self, *args) -> "Real":
        return _QuantExt.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args) -> "Real":
        return _QuantExt.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args) -> "Real":
        return _QuantExt.Bond_bondYield(self, *args)

    def accruedAmount(self, *args) -> "Real":
        return _QuantExt.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args) -> "Real":
        return _QuantExt.Bond_settlementValue(self, *args)
    __swig_destroy__ = _QuantExt.delete_Bond

# Register Bond in _QuantExt:
_QuantExt.Bond_swigregister(Bond)


def cleanPriceFromZSpread(*args) -> "Real":
    return _QuantExt.cleanPriceFromZSpread(*args)
class ZeroCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.ZeroCouponBond_swiginit(self, _QuantExt.new_ZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_ZeroCouponBond

# Register ZeroCouponBond in _QuantExt:
_QuantExt.ZeroCouponBond_swigregister(ZeroCouponBond)

class FixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FixedRateBond_swiginit(self, _QuantExt.new_FixedRateBond(*args))

    def frequency(self) -> "Frequency":
        return _QuantExt.FixedRateBond_frequency(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _QuantExt.delete_FixedRateBond

# Register FixedRateBond in _QuantExt:
_QuantExt.FixedRateBond_swigregister(FixedRateBond)

class AmortizingFixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AmortizingFixedRateBond_swiginit(self, _QuantExt.new_AmortizingFixedRateBond(*args))

    def frequency(self) -> "Frequency":
        return _QuantExt.AmortizingFixedRateBond_frequency(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.AmortizingFixedRateBond_dayCounter(self)
    __swig_destroy__ = _QuantExt.delete_AmortizingFixedRateBond

# Register AmortizingFixedRateBond in _QuantExt:
_QuantExt.AmortizingFixedRateBond_swigregister(AmortizingFixedRateBond)

class AmortizingFloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.AmortizingFloatingRateBond_swiginit(self, _QuantExt.new_AmortizingFloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_AmortizingFloatingRateBond

# Register AmortizingFloatingRateBond in _QuantExt:
_QuantExt.AmortizingFloatingRateBond_swigregister(AmortizingFloatingRateBond)

class FloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.FloatingRateBond_swiginit(self, _QuantExt.new_FloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_FloatingRateBond

# Register FloatingRateBond in _QuantExt:
_QuantExt.FloatingRateBond_swigregister(FloatingRateBond)

class CmsRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.CmsRateBond_swiginit(self, _QuantExt.new_CmsRateBond(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_CmsRateBond

# Register CmsRateBond in _QuantExt:
_QuantExt.CmsRateBond_swigregister(CmsRateBond)

class DiscountingBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, discountCurve: "YieldTermStructureHandle"):
        _QuantExt.DiscountingBondEngine_swiginit(self, _QuantExt.new_DiscountingBondEngine(discountCurve))
    __swig_destroy__ = _QuantExt.delete_DiscountingBondEngine

# Register DiscountingBondEngine in _QuantExt:
_QuantExt.DiscountingBondEngine_swigregister(DiscountingBondEngine)

class CallableFixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays: "Integer", faceAmount: "Real", schedule: "Schedule", coupons: "DoubleVector", accrualDayCounter: "DayCounter", paymentConvention: "BusinessDayConvention", redemption: "Real", issueDate: "Date", putCallSchedule: "CallabilitySchedule"):
        _QuantExt.CallableFixedRateBond_swiginit(self, _QuantExt.new_CallableFixedRateBond(settlementDays, faceAmount, schedule, coupons, accrualDayCounter, paymentConvention, redemption, issueDate, putCallSchedule))

    def OAS(self, *args) -> "Real":
        return _QuantExt.CallableFixedRateBond_OAS(self, *args)

    def cleanPriceOAS(self, *args) -> "Real":
        return _QuantExt.CallableFixedRateBond_cleanPriceOAS(self, *args)

    def effectiveDuration(self, oas: "Real", engineTS: "YieldTermStructureHandle", dayCounter: "DayCounter", compounding: "Compounding", frequency: "Frequency", bump: "Real"=2e-4) -> "Real":
        return _QuantExt.CallableFixedRateBond_effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump)

    def effectiveConvexity(self, oas: "Real", engineTS: "YieldTermStructureHandle", dayCounter: "DayCounter", compounding: "Compounding", frequency: "Frequency", bump: "Real"=2e-4) -> "Real":
        return _QuantExt.CallableFixedRateBond_effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump)
    __swig_destroy__ = _QuantExt.delete_CallableFixedRateBond

# Register CallableFixedRateBond in _QuantExt:
_QuantExt.CallableFixedRateBond_swigregister(CallableFixedRateBond)

class TreeCallableFixedRateBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TreeCallableFixedRateBondEngine_swiginit(self, _QuantExt.new_TreeCallableFixedRateBondEngine(*args))
    __swig_destroy__ = _QuantExt.delete_TreeCallableFixedRateBondEngine

# Register TreeCallableFixedRateBondEngine in _QuantExt:
_QuantExt.TreeCallableFixedRateBondEngine_swigregister(TreeCallableFixedRateBondEngine)

class BlackCallableFixedRateBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fwdYieldVol: "QuoteHandle", discountCurve: "YieldTermStructureHandle"):
        _QuantExt.BlackCallableFixedRateBondEngine_swiginit(self, _QuantExt.new_BlackCallableFixedRateBondEngine(fwdYieldVol, discountCurve))
    __swig_destroy__ = _QuantExt.delete_BlackCallableFixedRateBondEngine

# Register BlackCallableFixedRateBondEngine in _QuantExt:
_QuantExt.BlackCallableFixedRateBondEngine_swigregister(BlackCallableFixedRateBondEngine)

class CPIBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.CPIBond_swiginit(self, _QuantExt.new_CPIBond(*args, **kwargs))
    __swig_destroy__ = _QuantExt.delete_CPIBond

# Register CPIBond in _QuantExt:
_QuantExt.CPIBond_swigregister(CPIBond)

class BondFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(bond: "Bond") -> "Date":
        return _QuantExt.BondFunctions_startDate(bond)

    @staticmethod
    def maturityDate(bond: "Bond") -> "Date":
        return _QuantExt.BondFunctions_maturityDate(bond)

    @staticmethod
    def isTradable(*args) -> "bool":
        return _QuantExt.BondFunctions_isTradable(*args)

    @staticmethod
    def previousCashFlowDate(*args) -> "Date":
        return _QuantExt.BondFunctions_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args) -> "Date":
        return _QuantExt.BondFunctions_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args) -> "Real":
        return _QuantExt.BondFunctions_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args) -> "Real":
        return _QuantExt.BondFunctions_nextCashFlowAmount(*args)

    @staticmethod
    def previousCouponRate(*args) -> "Rate":
        return _QuantExt.BondFunctions_previousCouponRate(*args)

    @staticmethod
    def nextCouponRate(*args) -> "Rate":
        return _QuantExt.BondFunctions_nextCouponRate(*args)

    @staticmethod
    def accrualStartDate(*args) -> "Date":
        return _QuantExt.BondFunctions_accrualStartDate(*args)

    @staticmethod
    def accrualEndDate(*args) -> "Date":
        return _QuantExt.BondFunctions_accrualEndDate(*args)

    @staticmethod
    def accrualPeriod(*args) -> "Time":
        return _QuantExt.BondFunctions_accrualPeriod(*args)

    @staticmethod
    def accrualDays(*args) -> "BigInteger":
        return _QuantExt.BondFunctions_accrualDays(*args)

    @staticmethod
    def accruedPeriod(*args) -> "Time":
        return _QuantExt.BondFunctions_accruedPeriod(*args)

    @staticmethod
    def accruedDays(*args) -> "BigInteger":
        return _QuantExt.BondFunctions_accruedDays(*args)

    @staticmethod
    def accruedAmount(*args) -> "Real":
        return _QuantExt.BondFunctions_accruedAmount(*args)

    @staticmethod
    def atmRate(*args) -> "Rate":
        return _QuantExt.BondFunctions_atmRate(*args)

    @staticmethod
    def cleanPrice(*args) -> "Real":
        return _QuantExt.BondFunctions_cleanPrice(*args)

    @staticmethod
    def bps(*args) -> "Real":
        return _QuantExt.BondFunctions_bps(*args)

    @staticmethod
    def bondYield(*args) -> "Rate":
        return _QuantExt.BondFunctions_bondYield(*args)

    @staticmethod
    def yieldBrent(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldBrent(*args)

    @staticmethod
    def yieldBisection(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldBisection(*args)

    @staticmethod
    def yieldFalsePosition(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldFalsePosition(*args)

    @staticmethod
    def yieldRidder(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldRidder(*args)

    @staticmethod
    def yieldSecant(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldSecant(*args)

    @staticmethod
    def yieldNewton(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldNewton(*args)

    @staticmethod
    def yieldNewtonSafe(*args) -> "Rate":
        return _QuantExt.BondFunctions_yieldNewtonSafe(*args)

    @staticmethod
    def duration(*args) -> "Time":
        return _QuantExt.BondFunctions_duration(*args)

    @staticmethod
    def convexity(*args) -> "Real":
        return _QuantExt.BondFunctions_convexity(*args)

    @staticmethod
    def basisPointValue(*args) -> "Real":
        return _QuantExt.BondFunctions_basisPointValue(*args)

    @staticmethod
    def yieldValueBasisPoint(*args) -> "Real":
        return _QuantExt.BondFunctions_yieldValueBasisPoint(*args)

    @staticmethod
    def zSpread(*args) -> "Spread":
        return _QuantExt.BondFunctions_zSpread(*args)

    def __init__(self):
        _QuantExt.BondFunctions_swiginit(self, _QuantExt.new_BondFunctions())
    __swig_destroy__ = _QuantExt.delete_BondFunctions

# Register BondFunctions in _QuantExt:
_QuantExt.BondFunctions_swigregister(BondFunctions)

def BondFunctions_startDate(bond: "Bond") -> "Date":
    return _QuantExt.BondFunctions_startDate(bond)

def BondFunctions_maturityDate(bond: "Bond") -> "Date":
    return _QuantExt.BondFunctions_maturityDate(bond)

def BondFunctions_isTradable(*args) -> "bool":
    return _QuantExt.BondFunctions_isTradable(*args)

def BondFunctions_previousCashFlowDate(*args) -> "Date":
    return _QuantExt.BondFunctions_previousCashFlowDate(*args)

def BondFunctions_nextCashFlowDate(*args) -> "Date":
    return _QuantExt.BondFunctions_nextCashFlowDate(*args)

def BondFunctions_previousCashFlowAmount(*args) -> "Real":
    return _QuantExt.BondFunctions_previousCashFlowAmount(*args)

def BondFunctions_nextCashFlowAmount(*args) -> "Real":
    return _QuantExt.BondFunctions_nextCashFlowAmount(*args)

def BondFunctions_previousCouponRate(*args) -> "Rate":
    return _QuantExt.BondFunctions_previousCouponRate(*args)

def BondFunctions_nextCouponRate(*args) -> "Rate":
    return _QuantExt.BondFunctions_nextCouponRate(*args)

def BondFunctions_accrualStartDate(*args) -> "Date":
    return _QuantExt.BondFunctions_accrualStartDate(*args)

def BondFunctions_accrualEndDate(*args) -> "Date":
    return _QuantExt.BondFunctions_accrualEndDate(*args)

def BondFunctions_accrualPeriod(*args) -> "Time":
    return _QuantExt.BondFunctions_accrualPeriod(*args)

def BondFunctions_accrualDays(*args) -> "BigInteger":
    return _QuantExt.BondFunctions_accrualDays(*args)

def BondFunctions_accruedPeriod(*args) -> "Time":
    return _QuantExt.BondFunctions_accruedPeriod(*args)

def BondFunctions_accruedDays(*args) -> "BigInteger":
    return _QuantExt.BondFunctions_accruedDays(*args)

def BondFunctions_accruedAmount(*args) -> "Real":
    return _QuantExt.BondFunctions_accruedAmount(*args)

def BondFunctions_atmRate(*args) -> "Rate":
    return _QuantExt.BondFunctions_atmRate(*args)

def BondFunctions_cleanPrice(*args) -> "Real":
    return _QuantExt.BondFunctions_cleanPrice(*args)

def BondFunctions_bps(*args) -> "Real":
    return _QuantExt.BondFunctions_bps(*args)

def BondFunctions_bondYield(*args) -> "Rate":
    return _QuantExt.BondFunctions_bondYield(*args)

def BondFunctions_yieldBrent(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldBrent(*args)

def BondFunctions_yieldBisection(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldBisection(*args)

def BondFunctions_yieldFalsePosition(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldFalsePosition(*args)

def BondFunctions_yieldRidder(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldRidder(*args)

def BondFunctions_yieldSecant(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldSecant(*args)

def BondFunctions_yieldNewton(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldNewton(*args)

def BondFunctions_yieldNewtonSafe(*args) -> "Rate":
    return _QuantExt.BondFunctions_yieldNewtonSafe(*args)

def BondFunctions_duration(*args) -> "Time":
    return _QuantExt.BondFunctions_duration(*args)

def BondFunctions_convexity(*args) -> "Real":
    return _QuantExt.BondFunctions_convexity(*args)

def BondFunctions_basisPointValue(*args) -> "Real":
    return _QuantExt.BondFunctions_basisPointValue(*args)

def BondFunctions_yieldValueBasisPoint(*args) -> "Real":
    return _QuantExt.BondFunctions_yieldValueBasisPoint(*args)

def BondFunctions_zSpread(*args) -> "Spread":
    return _QuantExt.BondFunctions_zSpread(*args)

class CapFloor(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def impliedVolatility(self, price: "Real", disc: "YieldTermStructureHandle", guess: "Volatility", accuracy: "Real"=1.0e-4, maxEvaluations: "Natural"=100, minVol: "Volatility"=1.0e-7, maxVol: "Volatility"=4.0, type: "VolatilityType"=ShiftedLognormal, displacement: "Real"=0.0) -> "Volatility":
        return _QuantExt.CapFloor_impliedVolatility(self, price, disc, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)

    def floatingLeg(self) -> "Leg const &":
        return _QuantExt.CapFloor_floatingLeg(self)

    def capRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.CapFloor_capRates(self)

    def floorRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.CapFloor_floorRates(self)

    def startDate(self) -> "Date":
        return _QuantExt.CapFloor_startDate(self)

    def maturityDate(self) -> "Date":
        return _QuantExt.CapFloor_maturityDate(self)

    def atmRate(self, discountCurve: "YieldTermStructure") -> "Rate":
        return _QuantExt.CapFloor_atmRate(self, discountCurve)

    def __init__(self):
        _QuantExt.CapFloor_swiginit(self, _QuantExt.new_CapFloor())
    __swig_destroy__ = _QuantExt.delete_CapFloor

# Register CapFloor in _QuantExt:
_QuantExt.CapFloor_swigregister(CapFloor)

class Cap(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", capRates: "DoubleVector"):
        _QuantExt.Cap_swiginit(self, _QuantExt.new_Cap(leg, capRates))
    __swig_destroy__ = _QuantExt.delete_Cap

# Register Cap in _QuantExt:
_QuantExt.Cap_swigregister(Cap)

class Floor(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", floorRates: "DoubleVector"):
        _QuantExt.Floor_swiginit(self, _QuantExt.new_Floor(leg, floorRates))
    __swig_destroy__ = _QuantExt.delete_Floor

# Register Floor in _QuantExt:
_QuantExt.Floor_swigregister(Floor)

class Collar(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg: "Leg", capRates: "DoubleVector", floorRates: "DoubleVector"):
        _QuantExt.Collar_swiginit(self, _QuantExt.new_Collar(leg, capRates, floorRates))
    __swig_destroy__ = _QuantExt.delete_Collar

# Register Collar in _QuantExt:
_QuantExt.Collar_swigregister(Collar)

class BlackCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BlackCapFloorEngine_swiginit(self, _QuantExt.new_BlackCapFloorEngine(*args))
    __swig_destroy__ = _QuantExt.delete_BlackCapFloorEngine

# Register BlackCapFloorEngine in _QuantExt:
_QuantExt.BlackCapFloorEngine_swigregister(BlackCapFloorEngine)

class BachelierCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BachelierCapFloorEngine_swiginit(self, _QuantExt.new_BachelierCapFloorEngine(*args))
    __swig_destroy__ = _QuantExt.delete_BachelierCapFloorEngine

# Register BachelierCapFloorEngine in _QuantExt:
_QuantExt.BachelierCapFloorEngine_swigregister(BachelierCapFloorEngine)

class Dividend(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Dividend *":
        return _QuantExt.Dividend___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Dividend___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Dividend___bool__(self)

    def __init__(self):
        _QuantExt.Dividend_swiginit(self, _QuantExt.new_Dividend())
    __swig_destroy__ = _QuantExt.delete_Dividend

    def amount(self) -> "Real":
        return _QuantExt.Dividend_amount(self)

    def date(self) -> "Date":
        return _QuantExt.Dividend_date(self)

# Register Dividend in _QuantExt:
_QuantExt.Dividend_swigregister(Dividend)

class FixedDividend(Dividend):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "Real", date: "Date"):
        _QuantExt.FixedDividend_swiginit(self, _QuantExt.new_FixedDividend(amount, date))
    __swig_destroy__ = _QuantExt.delete_FixedDividend

# Register FixedDividend in _QuantExt:
_QuantExt.FixedDividend_swigregister(FixedDividend)

class FractionalDividend(Dividend):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate: "Rate", date: "Date"):
        _QuantExt.FractionalDividend_swiginit(self, _QuantExt.new_FractionalDividend(rate, date))
    __swig_destroy__ = _QuantExt.delete_FractionalDividend

# Register FractionalDividend in _QuantExt:
_QuantExt.FractionalDividend_swigregister(FractionalDividend)

class DividendSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.DividendSchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.DividendSchedule___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DividendSchedule___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< Dividend > >::size_type":
        return _QuantExt.DividendSchedule___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< Dividend > >::difference_type", j: "std::vector< boost::shared_ptr< Dividend > >::difference_type") -> "std::vector< boost::shared_ptr< Dividend >,std::allocator< boost::shared_ptr< Dividend > > > *":
        return _QuantExt.DividendSchedule___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.DividendSchedule___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< Dividend > >::difference_type", j: "std::vector< boost::shared_ptr< Dividend > >::difference_type") -> "void":
        return _QuantExt.DividendSchedule___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.DividendSchedule___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< Dividend > >::value_type const &":
        return _QuantExt.DividendSchedule___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.DividendSchedule___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< Dividend > >::value_type":
        return _QuantExt.DividendSchedule_pop(self)

    def append(self, x: "Dividend") -> "void":
        return _QuantExt.DividendSchedule_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.DividendSchedule_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< Dividend > >::size_type":
        return _QuantExt.DividendSchedule_size(self)

    def swap(self, v: "DividendSchedule") -> "void":
        return _QuantExt.DividendSchedule_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< Dividend > >::iterator":
        return _QuantExt.DividendSchedule_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< Dividend > >::iterator":
        return _QuantExt.DividendSchedule_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< Dividend > >::reverse_iterator":
        return _QuantExt.DividendSchedule_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< Dividend > >::reverse_iterator":
        return _QuantExt.DividendSchedule_rend(self)

    def clear(self) -> "void":
        return _QuantExt.DividendSchedule_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< Dividend > >::allocator_type":
        return _QuantExt.DividendSchedule_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.DividendSchedule_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< Dividend > >::iterator":
        return _QuantExt.DividendSchedule_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.DividendSchedule_swiginit(self, _QuantExt.new_DividendSchedule(*args))

    def push_back(self, x: "Dividend") -> "void":
        return _QuantExt.DividendSchedule_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< Dividend > >::value_type const &":
        return _QuantExt.DividendSchedule_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< Dividend > >::value_type const &":
        return _QuantExt.DividendSchedule_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< Dividend > >::size_type", x: "Dividend") -> "void":
        return _QuantExt.DividendSchedule_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.DividendSchedule_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.DividendSchedule_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< Dividend > >::size_type") -> "void":
        return _QuantExt.DividendSchedule_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< Dividend > >::size_type":
        return _QuantExt.DividendSchedule_capacity(self)
    __swig_destroy__ = _QuantExt.delete_DividendSchedule

# Register DividendSchedule in _QuantExt:
_QuantExt.DividendSchedule_swigregister(DividendSchedule)

class ConvertibleZeroCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exercise: "Exercise", conversionRatio: "Real", dividends: "DividendSchedule", callability: "CallabilitySchedule", creditSpread: "QuoteHandle", issueDate: "Date", settlementDays: "Integer", dayCounter: "DayCounter", schedule: "Schedule", redemption: "Real"=100.0):
        _QuantExt.ConvertibleZeroCouponBond_swiginit(self, _QuantExt.new_ConvertibleZeroCouponBond(exercise, conversionRatio, dividends, callability, creditSpread, issueDate, settlementDays, dayCounter, schedule, redemption))
    __swig_destroy__ = _QuantExt.delete_ConvertibleZeroCouponBond

# Register ConvertibleZeroCouponBond in _QuantExt:
_QuantExt.ConvertibleZeroCouponBond_swigregister(ConvertibleZeroCouponBond)

class ConvertibleFixedCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exercise: "Exercise", conversionRatio: "Real", dividends: "DividendSchedule", callability: "CallabilitySchedule", creditSpread: "QuoteHandle", issueDate: "Date", settlementDays: "Integer", coupons: "DoubleVector", dayCounter: "DayCounter", schedule: "Schedule", redemption: "Real"=100.0):
        _QuantExt.ConvertibleFixedCouponBond_swiginit(self, _QuantExt.new_ConvertibleFixedCouponBond(exercise, conversionRatio, dividends, callability, creditSpread, issueDate, settlementDays, coupons, dayCounter, schedule, redemption))
    __swig_destroy__ = _QuantExt.delete_ConvertibleFixedCouponBond

# Register ConvertibleFixedCouponBond in _QuantExt:
_QuantExt.ConvertibleFixedCouponBond_swigregister(ConvertibleFixedCouponBond)

class ConvertibleFloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exercise: "Exercise", conversionRatio: "Real", dividends: "DividendSchedule", callability: "CallabilitySchedule", creditSpread: "QuoteHandle", issueDate: "Date", settlementDays: "Integer", index: "IborIndex", fixingDays: "Integer", spreads: "DoubleVector", dayCounter: "DayCounter", schedule: "Schedule", redemption: "Real"=100.0):
        _QuantExt.ConvertibleFloatingRateBond_swiginit(self, _QuantExt.new_ConvertibleFloatingRateBond(exercise, conversionRatio, dividends, callability, creditSpread, issueDate, settlementDays, index, fixingDays, spreads, dayCounter, schedule, redemption))
    __swig_destroy__ = _QuantExt.delete_ConvertibleFloatingRateBond

# Register ConvertibleFloatingRateBond in _QuantExt:
_QuantExt.ConvertibleFloatingRateBond_swigregister(ConvertibleFloatingRateBond)

class BinomialConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "GeneralizedBlackScholesProcess", type: "std::string const &", steps: "Size"):
        _QuantExt.BinomialConvertibleEngine_swiginit(self, _QuantExt.new_BinomialConvertibleEngine(process, type, steps))
    __swig_destroy__ = _QuantExt.delete_BinomialConvertibleEngine

# Register BinomialConvertibleEngine in _QuantExt:
_QuantExt.BinomialConvertibleEngine_swigregister(BinomialConvertibleEngine)

class DefaultProbabilityTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "DefaultProbabilityTermStructure *":
        return _QuantExt.DefaultProbabilityTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.DefaultProbabilityTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.DefaultProbabilityTermStructure_swiginit(self, _QuantExt.new_DefaultProbabilityTermStructure())
    __swig_destroy__ = _QuantExt.delete_DefaultProbabilityTermStructure

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.DefaultProbabilityTermStructure_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.DefaultProbabilityTermStructure_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.DefaultProbabilityTermStructure_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.DefaultProbabilityTermStructure_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.DefaultProbabilityTermStructure_maxTime(self)

    def defaultProbability(self, *args) -> "Probability":
        return _QuantExt.DefaultProbabilityTermStructure_defaultProbability(self, *args)

    def survivalProbability(self, *args) -> "Probability":
        return _QuantExt.DefaultProbabilityTermStructure_survivalProbability(self, *args)

    def defaultDensity(self, *args) -> "Real":
        return _QuantExt.DefaultProbabilityTermStructure_defaultDensity(self, *args)

    def hazardRate(self, *args) -> "Real":
        return _QuantExt.DefaultProbabilityTermStructure_hazardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.DefaultProbabilityTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.DefaultProbabilityTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructure_allowsExtrapolation(self)

# Register DefaultProbabilityTermStructure in _QuantExt:
_QuantExt.DefaultProbabilityTermStructure_swigregister(DefaultProbabilityTermStructure)

class DefaultProbabilityTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DefaultProbabilityTermStructureHandle_swiginit(self, _QuantExt.new_DefaultProbabilityTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< DefaultProbabilityTermStructure >":
        return _QuantExt.DefaultProbabilityTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.DefaultProbabilityTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_DefaultProbabilityTermStructureHandle

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.DefaultProbabilityTermStructureHandle_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.DefaultProbabilityTermStructureHandle_calendar(self)

    def referenceDate(self) -> "Date":
        return _QuantExt.DefaultProbabilityTermStructureHandle_referenceDate(self)

    def maxDate(self) -> "Date":
        return _QuantExt.DefaultProbabilityTermStructureHandle_maxDate(self)

    def maxTime(self) -> "Time":
        return _QuantExt.DefaultProbabilityTermStructureHandle_maxTime(self)

    def defaultProbability(self, *args) -> "Probability":
        return _QuantExt.DefaultProbabilityTermStructureHandle_defaultProbability(self, *args)

    def survivalProbability(self, *args) -> "Probability":
        return _QuantExt.DefaultProbabilityTermStructureHandle_survivalProbability(self, *args)

    def defaultDensity(self, *args) -> "Real":
        return _QuantExt.DefaultProbabilityTermStructureHandle_defaultDensity(self, *args)

    def hazardRate(self, *args) -> "Real":
        return _QuantExt.DefaultProbabilityTermStructureHandle_hazardRate(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.DefaultProbabilityTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.DefaultProbabilityTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.DefaultProbabilityTermStructureHandle_allowsExtrapolation(self)

# Register DefaultProbabilityTermStructureHandle in _QuantExt:
_QuantExt.DefaultProbabilityTermStructureHandle_swigregister(DefaultProbabilityTermStructureHandle)

class RelinkableDefaultProbabilityTermStructureHandle(DefaultProbabilityTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableDefaultProbabilityTermStructureHandle_swiginit(self, _QuantExt.new_RelinkableDefaultProbabilityTermStructureHandle(*args))

    def linkTo(self, arg2: "DefaultProbabilityTermStructure") -> "void":
        return _QuantExt.RelinkableDefaultProbabilityTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableDefaultProbabilityTermStructureHandle

# Register RelinkableDefaultProbabilityTermStructureHandle in _QuantExt:
_QuantExt.RelinkableDefaultProbabilityTermStructureHandle_swigregister(RelinkableDefaultProbabilityTermStructureHandle)

class FlatHazardRate(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FlatHazardRate_swiginit(self, _QuantExt.new_FlatHazardRate(*args))
    __swig_destroy__ = _QuantExt.delete_FlatHazardRate

# Register FlatHazardRate in _QuantExt:
_QuantExt.FlatHazardRate_swigregister(FlatHazardRate)

class HazardRateCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.HazardRateCurve_swiginit(self, _QuantExt.new_HazardRateCurve(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.HazardRateCurve_dates(self)

    def hazardRates(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.HazardRateCurve_hazardRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.HazardRateCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_HazardRateCurve

# Register HazardRateCurve in _QuantExt:
_QuantExt.HazardRateCurve_swigregister(HazardRateCurve)

class DefaultDensityCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DefaultDensityCurve_swiginit(self, _QuantExt.new_DefaultDensityCurve(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.DefaultDensityCurve_dates(self)

    def defaultDensities(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.DefaultDensityCurve_defaultDensities(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.DefaultDensityCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_DefaultDensityCurve

# Register DefaultDensityCurve in _QuantExt:
_QuantExt.DefaultDensityCurve_swigregister(DefaultDensityCurve)

class SurvivalProbabilityCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SurvivalProbabilityCurve_swiginit(self, _QuantExt.new_SurvivalProbabilityCurve(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.SurvivalProbabilityCurve_dates(self)

    def survivalProbabilities(self) -> "std::vector< Probability,std::allocator< Probability > > const &":
        return _QuantExt.SurvivalProbabilityCurve_survivalProbabilities(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.SurvivalProbabilityCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_SurvivalProbabilityCurve

# Register SurvivalProbabilityCurve in _QuantExt:
_QuantExt.SurvivalProbabilityCurve_swigregister(SurvivalProbabilityCurve)

class DefaultProbabilityHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "DefaultProbabilityHelper *":
        return _QuantExt.DefaultProbabilityHelper___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.DefaultProbabilityHelper___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DefaultProbabilityHelper___bool__(self)

    def __init__(self):
        _QuantExt.DefaultProbabilityHelper_swiginit(self, _QuantExt.new_DefaultProbabilityHelper())
    __swig_destroy__ = _QuantExt.delete_DefaultProbabilityHelper

# Register DefaultProbabilityHelper in _QuantExt:
_QuantExt.DefaultProbabilityHelper_swigregister(DefaultProbabilityHelper)

class DefaultProbabilityHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.DefaultProbabilityHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.DefaultProbabilityHelperVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.DefaultProbabilityHelperVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::size_type":
        return _QuantExt.DefaultProbabilityHelperVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::difference_type", j: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::difference_type") -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper >,std::allocator< boost::shared_ptr< DefaultProbabilityHelper > > > *":
        return _QuantExt.DefaultProbabilityHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::difference_type", j: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::difference_type") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::value_type const &":
        return _QuantExt.DefaultProbabilityHelperVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::value_type":
        return _QuantExt.DefaultProbabilityHelperVector_pop(self)

    def append(self, x: "DefaultProbabilityHelper") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.DefaultProbabilityHelperVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::size_type":
        return _QuantExt.DefaultProbabilityHelperVector_size(self)

    def swap(self, v: "DefaultProbabilityHelperVector") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::iterator":
        return _QuantExt.DefaultProbabilityHelperVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::iterator":
        return _QuantExt.DefaultProbabilityHelperVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::reverse_iterator":
        return _QuantExt.DefaultProbabilityHelperVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::reverse_iterator":
        return _QuantExt.DefaultProbabilityHelperVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::allocator_type":
        return _QuantExt.DefaultProbabilityHelperVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::iterator":
        return _QuantExt.DefaultProbabilityHelperVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.DefaultProbabilityHelperVector_swiginit(self, _QuantExt.new_DefaultProbabilityHelperVector(*args))

    def push_back(self, x: "DefaultProbabilityHelper") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::value_type const &":
        return _QuantExt.DefaultProbabilityHelperVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::value_type const &":
        return _QuantExt.DefaultProbabilityHelperVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::size_type", x: "DefaultProbabilityHelper") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::size_type") -> "void":
        return _QuantExt.DefaultProbabilityHelperVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< DefaultProbabilityHelper > >::size_type":
        return _QuantExt.DefaultProbabilityHelperVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_DefaultProbabilityHelperVector

# Register DefaultProbabilityHelperVector in _QuantExt:
_QuantExt.DefaultProbabilityHelperVector_swigregister(DefaultProbabilityHelperVector)

class SpreadCdsHelper(DefaultProbabilityHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SpreadCdsHelper_swiginit(self, _QuantExt.new_SpreadCdsHelper(*args))
    __swig_destroy__ = _QuantExt.delete_SpreadCdsHelper

# Register SpreadCdsHelper in _QuantExt:
_QuantExt.SpreadCdsHelper_swigregister(SpreadCdsHelper)

class UpfrontCdsHelper(DefaultProbabilityHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.UpfrontCdsHelper_swiginit(self, _QuantExt.new_UpfrontCdsHelper(*args))
    __swig_destroy__ = _QuantExt.delete_UpfrontCdsHelper

# Register UpfrontCdsHelper in _QuantExt:
_QuantExt.UpfrontCdsHelper_swigregister(UpfrontCdsHelper)

class HazardRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.HazardRate_swiginit(self, _QuantExt.new_HazardRate())
    __swig_destroy__ = _QuantExt.delete_HazardRate

# Register HazardRate in _QuantExt:
_QuantExt.HazardRate_swigregister(HazardRate)

class DefaultDensity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.DefaultDensity_swiginit(self, _QuantExt.new_DefaultDensity())
    __swig_destroy__ = _QuantExt.delete_DefaultDensity

# Register DefaultDensity in _QuantExt:
_QuantExt.DefaultDensity_swigregister(DefaultDensity)

class PiecewiseFlatHazardRate(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseFlatHazardRate_swiginit(self, _QuantExt.new_PiecewiseFlatHazardRate(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseFlatHazardRate_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseFlatHazardRate_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseFlatHazardRate_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseFlatHazardRate

# Register PiecewiseFlatHazardRate in _QuantExt:
_QuantExt.PiecewiseFlatHazardRate_swigregister(PiecewiseFlatHazardRate)

class Protection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Buyer = _QuantExt.Protection_Buyer
    Seller = _QuantExt.Protection_Seller

    def __init__(self):
        _QuantExt.Protection_swiginit(self, _QuantExt.new_Protection())
    __swig_destroy__ = _QuantExt.delete_Protection

# Register Protection in _QuantExt:
_QuantExt.Protection_swigregister(Protection)

class Claim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Claim *":
        return _QuantExt.Claim___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Claim___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Claim___bool__(self)

    def __init__(self):
        _QuantExt.Claim_swiginit(self, _QuantExt.new_Claim())
    __swig_destroy__ = _QuantExt.delete_Claim

    def amount(self, defaultDate: "Date", notional: "Real", recoveryRate: "Real") -> "Real":
        return _QuantExt.Claim_amount(self, defaultDate, notional, recoveryRate)

# Register Claim in _QuantExt:
_QuantExt.Claim_swigregister(Claim)

class FaceValueClaim(Claim):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.FaceValueClaim_swiginit(self, _QuantExt.new_FaceValueClaim())
    __swig_destroy__ = _QuantExt.delete_FaceValueClaim

# Register FaceValueClaim in _QuantExt:
_QuantExt.FaceValueClaim_swigregister(FaceValueClaim)

class FaceValueAccrualClaim(Claim):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceSecurity: "Bond"):
        _QuantExt.FaceValueAccrualClaim_swiginit(self, _QuantExt.new_FaceValueAccrualClaim(referenceSecurity))
    __swig_destroy__ = _QuantExt.delete_FaceValueAccrualClaim

# Register FaceValueAccrualClaim in _QuantExt:
_QuantExt.FaceValueAccrualClaim_swigregister(FaceValueAccrualClaim)

class CreditDefaultSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Midpoint = _QuantExt.CreditDefaultSwap_Midpoint
    ISDA = _QuantExt.CreditDefaultSwap_ISDA

    def __init__(self, *args):
        _QuantExt.CreditDefaultSwap_swiginit(self, _QuantExt.new_CreditDefaultSwap(*args))

    def side(self) -> "Protection::Side":
        return _QuantExt.CreditDefaultSwap_side(self)

    def notional(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_notional(self)

    def runningSpread(self) -> "Rate":
        return _QuantExt.CreditDefaultSwap_runningSpread(self)

    def upfront(self) -> "doubleOrNull":
        return _QuantExt.CreditDefaultSwap_upfront(self)

    def settlesAccrual(self) -> "bool":
        return _QuantExt.CreditDefaultSwap_settlesAccrual(self)

    def paysAtDefaultTime(self) -> "bool":
        return _QuantExt.CreditDefaultSwap_paysAtDefaultTime(self)

    def fairSpread(self) -> "Rate":
        return _QuantExt.CreditDefaultSwap_fairSpread(self)

    def fairUpfront(self) -> "Rate":
        return _QuantExt.CreditDefaultSwap_fairUpfront(self)

    def couponLegBPS(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_couponLegBPS(self)

    def couponLegNPV(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_couponLegNPV(self)

    def defaultLegNPV(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_defaultLegNPV(self)

    def upfrontBPS(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_upfrontBPS(self)

    def upfrontNPV(self) -> "Real":
        return _QuantExt.CreditDefaultSwap_upfrontNPV(self)

    def impliedHazardRate(self, *args) -> "Rate":
        return _QuantExt.CreditDefaultSwap_impliedHazardRate(self, *args)

    def conventionalSpread(self, conventionalRecovery: "Real", discountCurve: "YieldTermStructureHandle", dayCounter: "DayCounter") -> "Rate":
        return _QuantExt.CreditDefaultSwap_conventionalSpread(self, conventionalRecovery, discountCurve, dayCounter)

    def coupons(self) -> "std::vector< boost::shared_ptr< CashFlow >,std::allocator< boost::shared_ptr< CashFlow > > >":
        return _QuantExt.CreditDefaultSwap_coupons(self)
    __swig_destroy__ = _QuantExt.delete_CreditDefaultSwap

# Register CreditDefaultSwap in _QuantExt:
_QuantExt.CreditDefaultSwap_swigregister(CreditDefaultSwap)

class MidPointCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability: "DefaultProbabilityTermStructureHandle", recoveryRate: "Real", discountCurve: "YieldTermStructureHandle"):
        _QuantExt.MidPointCdsEngine_swiginit(self, _QuantExt.new_MidPointCdsEngine(probability, recoveryRate, discountCurve))
    __swig_destroy__ = _QuantExt.delete_MidPointCdsEngine

# Register MidPointCdsEngine in _QuantExt:
_QuantExt.MidPointCdsEngine_swigregister(MidPointCdsEngine)

class IntegralCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, integrationStep: "Period", probability: "DefaultProbabilityTermStructureHandle", recoveryRate: "Real", discountCurve: "YieldTermStructureHandle", includeSettlementDateFlows: "bool"=False):
        _QuantExt.IntegralCdsEngine_swiginit(self, _QuantExt.new_IntegralCdsEngine(integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows))
    __swig_destroy__ = _QuantExt.delete_IntegralCdsEngine

# Register IntegralCdsEngine in _QuantExt:
_QuantExt.IntegralCdsEngine_swigregister(IntegralCdsEngine)

class IsdaCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoFix = _QuantExt.IsdaCdsEngine_NoFix
    Taylor = _QuantExt.IsdaCdsEngine_Taylor
    HalfDayBias = _QuantExt.IsdaCdsEngine_HalfDayBias
    NoBias = _QuantExt.IsdaCdsEngine_NoBias
    Flat = _QuantExt.IsdaCdsEngine_Flat
    Piecewise = _QuantExt.IsdaCdsEngine_Piecewise

    def __init__(self, *args):
        _QuantExt.IsdaCdsEngine_swiginit(self, _QuantExt.new_IsdaCdsEngine(*args))
    __swig_destroy__ = _QuantExt.delete_IsdaCdsEngine

# Register IsdaCdsEngine in _QuantExt:
_QuantExt.IsdaCdsEngine_swigregister(IsdaCdsEngine)

class DiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountCurve_swiginit(self, _QuantExt.new_DiscountCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.DiscountCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.DiscountCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.DiscountCurve_dates(self)

    def discounts(self) -> "std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &":
        return _QuantExt.DiscountCurve_discounts(self)

    def nodes(self) -> "std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >":
        return _QuantExt.DiscountCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_DiscountCurve

# Register DiscountCurve in _QuantExt:
_QuantExt.DiscountCurve_swigregister(DiscountCurve)

class NormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average: "Real"=0.0, sigma: "Real"=1.0):
        _QuantExt.NormalDistribution_swiginit(self, _QuantExt.new_NormalDistribution(average, sigma))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.NormalDistribution___call__(self, x)

    def derivative(self, x: "Real") -> "Real":
        return _QuantExt.NormalDistribution_derivative(self, x)
    __swig_destroy__ = _QuantExt.delete_NormalDistribution

# Register NormalDistribution in _QuantExt:
_QuantExt.NormalDistribution_swigregister(NormalDistribution)

class CumulativeNormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average: "Real"=0.0, sigma: "Real"=1.0):
        _QuantExt.CumulativeNormalDistribution_swiginit(self, _QuantExt.new_CumulativeNormalDistribution(average, sigma))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.CumulativeNormalDistribution___call__(self, x)

    def derivative(self, x: "Real") -> "Real":
        return _QuantExt.CumulativeNormalDistribution_derivative(self, x)
    __swig_destroy__ = _QuantExt.delete_CumulativeNormalDistribution

# Register CumulativeNormalDistribution in _QuantExt:
_QuantExt.CumulativeNormalDistribution_swigregister(CumulativeNormalDistribution)

class InverseCumulativeNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average: "Real"=0.0, sigma: "Real"=1.0):
        _QuantExt.InverseCumulativeNormal_swiginit(self, _QuantExt.new_InverseCumulativeNormal(average, sigma))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.InverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_InverseCumulativeNormal

# Register InverseCumulativeNormal in _QuantExt:
_QuantExt.InverseCumulativeNormal_swigregister(InverseCumulativeNormal)

class MoroInverseCumulativeNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average: "Real"=0.0, sigma: "Real"=1.0):
        _QuantExt.MoroInverseCumulativeNormal_swiginit(self, _QuantExt.new_MoroInverseCumulativeNormal(average, sigma))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.MoroInverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_MoroInverseCumulativeNormal

# Register MoroInverseCumulativeNormal in _QuantExt:
_QuantExt.MoroInverseCumulativeNormal_swigregister(MoroInverseCumulativeNormal)

class BivariateCumulativeNormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho: "Real"):
        _QuantExt.BivariateCumulativeNormalDistribution_swiginit(self, _QuantExt.new_BivariateCumulativeNormalDistribution(rho))

    def __call__(self, x: "Real", y: "Real") -> "Real":
        return _QuantExt.BivariateCumulativeNormalDistribution___call__(self, x, y)
    __swig_destroy__ = _QuantExt.delete_BivariateCumulativeNormalDistribution

# Register BivariateCumulativeNormalDistribution in _QuantExt:
_QuantExt.BivariateCumulativeNormalDistribution_swigregister(BivariateCumulativeNormalDistribution)

class BinomialDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p: "Real", n: "BigNatural"):
        _QuantExt.BinomialDistribution_swiginit(self, _QuantExt.new_BinomialDistribution(p, n))

    def __call__(self, k: "BigNatural") -> "Real":
        return _QuantExt.BinomialDistribution___call__(self, k)
    __swig_destroy__ = _QuantExt.delete_BinomialDistribution

# Register BinomialDistribution in _QuantExt:
_QuantExt.BinomialDistribution_swigregister(BinomialDistribution)

class CumulativeBinomialDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p: "Real", n: "BigNatural"):
        _QuantExt.CumulativeBinomialDistribution_swiginit(self, _QuantExt.new_CumulativeBinomialDistribution(p, n))

    def __call__(self, k: "BigNatural") -> "Real":
        return _QuantExt.CumulativeBinomialDistribution___call__(self, k)
    __swig_destroy__ = _QuantExt.delete_CumulativeBinomialDistribution

# Register CumulativeBinomialDistribution in _QuantExt:
_QuantExt.CumulativeBinomialDistribution_swigregister(CumulativeBinomialDistribution)

class BivariateCumulativeNormalDistributionDr78(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho: "Real"):
        _QuantExt.BivariateCumulativeNormalDistributionDr78_swiginit(self, _QuantExt.new_BivariateCumulativeNormalDistributionDr78(rho))

    def __call__(self, a: "Real", b: "Real") -> "Real":
        return _QuantExt.BivariateCumulativeNormalDistributionDr78___call__(self, a, b)
    __swig_destroy__ = _QuantExt.delete_BivariateCumulativeNormalDistributionDr78

# Register BivariateCumulativeNormalDistributionDr78 in _QuantExt:
_QuantExt.BivariateCumulativeNormalDistributionDr78_swigregister(BivariateCumulativeNormalDistributionDr78)

class BivariateCumulativeNormalDistributionWe04DP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho: "Real"):
        _QuantExt.BivariateCumulativeNormalDistributionWe04DP_swiginit(self, _QuantExt.new_BivariateCumulativeNormalDistributionWe04DP(rho))

    def __call__(self, a: "Real", b: "Real") -> "Real":
        return _QuantExt.BivariateCumulativeNormalDistributionWe04DP___call__(self, a, b)
    __swig_destroy__ = _QuantExt.delete_BivariateCumulativeNormalDistributionWe04DP

# Register BivariateCumulativeNormalDistributionWe04DP in _QuantExt:
_QuantExt.BivariateCumulativeNormalDistributionWe04DP_swigregister(BivariateCumulativeNormalDistributionWe04DP)

class CumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df: "Real"):
        _QuantExt.CumulativeChiSquareDistribution_swiginit(self, _QuantExt.new_CumulativeChiSquareDistribution(df))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.CumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_CumulativeChiSquareDistribution

# Register CumulativeChiSquareDistribution in _QuantExt:
_QuantExt.CumulativeChiSquareDistribution_swigregister(CumulativeChiSquareDistribution)


def ChiSquareDistribution(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (ChiSquareDistribution.__name__, CumulativeChiSquareDistribution.__name__))
    return CumulativeChiSquareDistribution(*args, **kwargs)

class NonCentralCumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df: "Real", ncp: "Real"):
        _QuantExt.NonCentralCumulativeChiSquareDistribution_swiginit(self, _QuantExt.new_NonCentralCumulativeChiSquareDistribution(df, ncp))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.NonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_NonCentralCumulativeChiSquareDistribution

# Register NonCentralCumulativeChiSquareDistribution in _QuantExt:
_QuantExt.NonCentralCumulativeChiSquareDistribution_swigregister(NonCentralCumulativeChiSquareDistribution)


def NonCentralChiSquareDistribution(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (NonCentralChiSquareDistribution.__name__, NonCentralCumulativeChiSquareDistribution.__name__))
    return NonCentralCumulativeChiSquareDistribution(*args, **kwargs)

class InverseNonCentralCumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df: "Real", ncp: "Real", maxEvaluations: "Size"=10, accuracy: "Real"=1e-8):
        _QuantExt.InverseNonCentralCumulativeChiSquareDistribution_swiginit(self, _QuantExt.new_InverseNonCentralCumulativeChiSquareDistribution(df, ncp, maxEvaluations, accuracy))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.InverseNonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_InverseNonCentralCumulativeChiSquareDistribution

# Register InverseNonCentralCumulativeChiSquareDistribution in _QuantExt:
_QuantExt.InverseNonCentralCumulativeChiSquareDistribution_swigregister(InverseNonCentralCumulativeChiSquareDistribution)


def InverseNonCentralChiSquareDistribution(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (InverseNonCentralChiSquareDistribution.__name__, InverseNonCentralCumulativeChiSquareDistribution.__name__))
    return InverseNonCentralCumulativeChiSquareDistribution(*args, **kwargs)

class CumulativeGammaDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a: "Real"):
        _QuantExt.CumulativeGammaDistribution_swiginit(self, _QuantExt.new_CumulativeGammaDistribution(a))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.CumulativeGammaDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_CumulativeGammaDistribution

# Register CumulativeGammaDistribution in _QuantExt:
_QuantExt.CumulativeGammaDistribution_swigregister(CumulativeGammaDistribution)


def GammaDistribution(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (GammaDistribution.__name__, CumulativeGammaDistribution.__name__))
    return CumulativeGammaDistribution(*args, **kwargs)

class GammaFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def logValue(self, x: "Real") -> "Real":
        return _QuantExt.GammaFunction_logValue(self, x)

    def __init__(self):
        _QuantExt.GammaFunction_swiginit(self, _QuantExt.new_GammaFunction())
    __swig_destroy__ = _QuantExt.delete_GammaFunction

# Register GammaFunction in _QuantExt:
_QuantExt.GammaFunction_swigregister(GammaFunction)

class PoissonDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu: "Real"):
        _QuantExt.PoissonDistribution_swiginit(self, _QuantExt.new_PoissonDistribution(mu))

    def __call__(self, k: "BigNatural") -> "Real":
        return _QuantExt.PoissonDistribution___call__(self, k)
    __swig_destroy__ = _QuantExt.delete_PoissonDistribution

# Register PoissonDistribution in _QuantExt:
_QuantExt.PoissonDistribution_swigregister(PoissonDistribution)

class CumulativePoissonDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu: "Real"):
        _QuantExt.CumulativePoissonDistribution_swiginit(self, _QuantExt.new_CumulativePoissonDistribution(mu))

    def __call__(self, k: "BigNatural") -> "Real":
        return _QuantExt.CumulativePoissonDistribution___call__(self, k)
    __swig_destroy__ = _QuantExt.delete_CumulativePoissonDistribution

# Register CumulativePoissonDistribution in _QuantExt:
_QuantExt.CumulativePoissonDistribution_swigregister(CumulativePoissonDistribution)

class InverseCumulativePoisson(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter: "Real"):
        _QuantExt.InverseCumulativePoisson_swiginit(self, _QuantExt.new_InverseCumulativePoisson(lambda_parameter))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.InverseCumulativePoisson___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_InverseCumulativePoisson

# Register InverseCumulativePoisson in _QuantExt:
_QuantExt.InverseCumulativePoisson_swigregister(InverseCumulativePoisson)

class StudentDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Integer"):
        _QuantExt.StudentDistribution_swiginit(self, _QuantExt.new_StudentDistribution(n))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.StudentDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_StudentDistribution

# Register StudentDistribution in _QuantExt:
_QuantExt.StudentDistribution_swigregister(StudentDistribution)

class CumulativeStudentDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Integer"):
        _QuantExt.CumulativeStudentDistribution_swiginit(self, _QuantExt.new_CumulativeStudentDistribution(n))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.CumulativeStudentDistribution___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_CumulativeStudentDistribution

# Register CumulativeStudentDistribution in _QuantExt:
_QuantExt.CumulativeStudentDistribution_swigregister(CumulativeStudentDistribution)

class InverseCumulativeStudent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Integer", accuracy: "Real"=1e-6, maxIterations: "Size"=50):
        _QuantExt.InverseCumulativeStudent_swiginit(self, _QuantExt.new_InverseCumulativeStudent(n, accuracy, maxIterations))

    def __call__(self, x: "Real") -> "Real":
        return _QuantExt.InverseCumulativeStudent___call__(self, x)
    __swig_destroy__ = _QuantExt.delete_InverseCumulativeStudent

# Register InverseCumulativeStudent in _QuantExt:
_QuantExt.InverseCumulativeStudent_swigregister(InverseCumulativeStudent)

class Money(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Money_swiginit(self, _QuantExt.new_Money(*args))

    def currency(self) -> "Currency const &":
        return _QuantExt.Money_currency(self)

    def value(self) -> "Decimal":
        return _QuantExt.Money_value(self)

    def rounded(self) -> "Money":
        return _QuantExt.Money_rounded(self)

    def __pos__(self) -> "Money":
        return _QuantExt.Money___pos__(self)

    def __neg__(self) -> "Money":
        return _QuantExt.Money___neg__(self)

    def __add__(self, m: "Money") -> "Money":
        return _QuantExt.Money___add__(self, m)

    def __sub__(self, m: "Money") -> "Money":
        return _QuantExt.Money___sub__(self, m)

    def __mul__(self, x: "Decimal") -> "Money":
        return _QuantExt.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _QuantExt.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x: "Decimal") -> "Money":
        return _QuantExt.Money___rmul__(self, x)

    def __lt__(self, other: "Money") -> "bool":
        return _QuantExt.Money___lt__(self, other)

    def __gt__(self, other: "Money") -> "bool":
        return _QuantExt.Money___gt__(self, other)

    def __le__(self, other: "Money") -> "bool":
        return _QuantExt.Money___le__(self, other)

    def __ge__(self, other: "Money") -> "bool":
        return _QuantExt.Money___ge__(self, other)

    def __cmp__(self, other: "Money") -> "int":
        return _QuantExt.Money___cmp__(self, other)

    def __str__(self) -> "std::string":
        return _QuantExt.Money___str__(self)
    NoConversion = _QuantExt.Money_NoConversion
    BaseCurrencyConversion = _QuantExt.Money_BaseCurrencyConversion
    AutomatedConversion = _QuantExt.Money_AutomatedConversion

    @staticmethod
    def setConversionType(type: "Money::ConversionType") -> "void":
        return _QuantExt.Money_setConversionType(type)

    @staticmethod
    def setBaseCurrency(c: "Currency") -> "void":
        return _QuantExt.Money_setBaseCurrency(c)
    __swig_destroy__ = _QuantExt.delete_Money

# Register Money in _QuantExt:
_QuantExt.Money_swigregister(Money)

def Money_setConversionType(type: "Money::ConversionType") -> "void":
    return _QuantExt.Money_setConversionType(type)

def Money_setBaseCurrency(c: "Currency") -> "void":
    return _QuantExt.Money_setBaseCurrency(c)

class ExchangeRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direct = _QuantExt.ExchangeRate_Direct
    Derived = _QuantExt.ExchangeRate_Derived

    def __init__(self, source: "Currency", target: "Currency", rate: "Decimal"):
        _QuantExt.ExchangeRate_swiginit(self, _QuantExt.new_ExchangeRate(source, target, rate))

    def source(self) -> "Currency const &":
        return _QuantExt.ExchangeRate_source(self)

    def target(self) -> "Currency const &":
        return _QuantExt.ExchangeRate_target(self)

    def type(self) -> "ExchangeRate::Type":
        return _QuantExt.ExchangeRate_type(self)

    def rate(self) -> "Decimal":
        return _QuantExt.ExchangeRate_rate(self)

    def exchange(self, amount: "Money") -> "Money":
        return _QuantExt.ExchangeRate_exchange(self, amount)

    @staticmethod
    def chain(r1: "ExchangeRate", r2: "ExchangeRate") -> "ExchangeRate":
        return _QuantExt.ExchangeRate_chain(r1, r2)
    __swig_destroy__ = _QuantExt.delete_ExchangeRate

# Register ExchangeRate in _QuantExt:
_QuantExt.ExchangeRate_swigregister(ExchangeRate)

def ExchangeRate_chain(r1: "ExchangeRate", r2: "ExchangeRate") -> "ExchangeRate":
    return _QuantExt.ExchangeRate_chain(r1, r2)

class ExchangeRateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "ExchangeRateManager &":
        return _QuantExt.ExchangeRateManager_instance()

    def add(self, *args) -> "void":
        return _QuantExt.ExchangeRateManager_add(self, *args)

    def lookup(self, *args) -> "ExchangeRate":
        return _QuantExt.ExchangeRateManager_lookup(self, *args)

    def clear(self) -> "void":
        return _QuantExt.ExchangeRateManager_clear(self)
    __swig_destroy__ = _QuantExt.delete_ExchangeRateManager

# Register ExchangeRateManager in _QuantExt:
_QuantExt.ExchangeRateManager_swigregister(ExchangeRateManager)

def ExchangeRateManager_instance() -> "ExchangeRateManager &":
    return _QuantExt.ExchangeRateManager_instance()

class Futures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IMM = _QuantExt.Futures_IMM
    ASX = _QuantExt.Futures_ASX

    def __init__(self):
        _QuantExt.Futures_swiginit(self, _QuantExt.new_Futures())
    __swig_destroy__ = _QuantExt.delete_Futures

# Register Futures in _QuantExt:
_QuantExt.Futures_swigregister(Futures)

class TimeBasket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TimeBasket_swiginit(self, _QuantExt.new_TimeBasket(*args))

    def __len__(self) -> "Size":
        return _QuantExt.TimeBasket___len__(self)

    def rebin(self, arg2: "DateVector") -> "TimeBasket":
        return _QuantExt.TimeBasket_rebin(self, arg2)

    def __getitem__(self, d: "Date") -> "Real":
        return _QuantExt.TimeBasket___getitem__(self, d)

    def __setitem__(self, d: "Date", value: "Real") -> "void":
        return _QuantExt.TimeBasket___setitem__(self, d, value)

    def items(self) -> "PyObject *":
        return _QuantExt.TimeBasket_items(self)

    def __contains__(self, d: "Date") -> "bool":
        return _QuantExt.TimeBasket___contains__(self, d)

    def __iter__(self) -> "PyObject *":
        return _QuantExt.TimeBasket___iter__(self)
    __swig_destroy__ = _QuantExt.delete_TimeBasket

# Register TimeBasket in _QuantExt:
_QuantExt.TimeBasket_swigregister(TimeBasket)

class Swap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, firstLeg: "Leg", secondLeg: "Leg"):
        _QuantExt.Swap_swiginit(self, _QuantExt.new_Swap(firstLeg, secondLeg))

    def startDate(self) -> "Date":
        return _QuantExt.Swap_startDate(self)

    def maturityDate(self) -> "Date":
        return _QuantExt.Swap_maturityDate(self)

    def leg(self, i: "Size") -> "Leg const &":
        return _QuantExt.Swap_leg(self, i)

    def legNPV(self, j: "Size") -> "Real":
        return _QuantExt.Swap_legNPV(self, j)
    __swig_destroy__ = _QuantExt.delete_Swap

# Register Swap in _QuantExt:
_QuantExt.Swap_swigregister(Swap)

class VanillaSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.VanillaSwap_Receiver
    Payer = _QuantExt.VanillaSwap_Payer

    def __init__(self, type: "VanillaSwap::Type", nominal: "Real", fixedSchedule: "Schedule", fixedRate: "Rate", fixedDayCount: "DayCounter", floatSchedule: "Schedule", index: "IborIndex", spread: "Spread", floatingDayCount: "DayCounter"):
        _QuantExt.VanillaSwap_swiginit(self, _QuantExt.new_VanillaSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, spread, floatingDayCount))

    def fairRate(self) -> "Rate":
        return _QuantExt.VanillaSwap_fairRate(self)

    def fairSpread(self) -> "Spread":
        return _QuantExt.VanillaSwap_fairSpread(self)

    def fixedLegBPS(self) -> "Real":
        return _QuantExt.VanillaSwap_fixedLegBPS(self)

    def floatingLegBPS(self) -> "Real":
        return _QuantExt.VanillaSwap_floatingLegBPS(self)

    def fixedLegNPV(self) -> "Real":
        return _QuantExt.VanillaSwap_fixedLegNPV(self)

    def floatingLegNPV(self) -> "Real":
        return _QuantExt.VanillaSwap_floatingLegNPV(self)

    def fixedLeg(self) -> "Leg const &":
        return _QuantExt.VanillaSwap_fixedLeg(self)

    def floatingLeg(self) -> "Leg const &":
        return _QuantExt.VanillaSwap_floatingLeg(self)

    def nominal(self) -> "Real":
        return _QuantExt.VanillaSwap_nominal(self)

    def fixedSchedule(self) -> "Schedule const &":
        return _QuantExt.VanillaSwap_fixedSchedule(self)

    def floatingSchedule(self) -> "Schedule const &":
        return _QuantExt.VanillaSwap_floatingSchedule(self)

    def fixedRate(self) -> "Rate":
        return _QuantExt.VanillaSwap_fixedRate(self)

    def spread(self) -> "Spread":
        return _QuantExt.VanillaSwap_spread(self)

    def floatingDayCount(self) -> "DayCounter const &":
        return _QuantExt.VanillaSwap_floatingDayCount(self)

    def fixedDayCount(self) -> "DayCounter const &":
        return _QuantExt.VanillaSwap_fixedDayCount(self)
    __swig_destroy__ = _QuantExt.delete_VanillaSwap

# Register VanillaSwap in _QuantExt:
_QuantExt.VanillaSwap_swigregister(VanillaSwap)

class _MakeVanillaSwap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def receiveFixed(self, flag: "bool"=True) -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_receiveFixed(self, flag)

    def withType(self, type: "VanillaSwap::Type") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withType(self, type)

    def withNominal(self, n: "Real") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withNominal(self, n)

    def withSettlementDays(self, settlementDays: "Natural") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withTerminationDate(self, arg2)

    def withRule(self, r: "DateGeneration::Rule") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withRule(self, r)

    def withFixedLegTenor(self, t: "Period") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegTenor(self, t)

    def withFixedLegCalendar(self, cal: "Calendar") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegCalendar(self, cal)

    def withFixedLegConvention(self, bdc: "BusinessDayConvention") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegConvention(self, bdc)

    def withFixedLegTerminationDateConvention(self, bdc: "BusinessDayConvention") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegTerminationDateConvention(self, bdc)

    def withFixedLegRule(self, r: "DateGeneration::Rule") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegRule(self, r)

    def withFixedLegEndOfMonth(self, flag: "bool"=True) -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegEndOfMonth(self, flag)

    def withFixedLegFirstDate(self, d: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegFirstDate(self, d)

    def withFixedLegNextToLastDate(self, d: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegNextToLastDate(self, d)

    def withFixedLegDayCount(self, dc: "DayCounter") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFixedLegDayCount(self, dc)

    def withFloatingLegTenor(self, t: "Period") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegTenor(self, t)

    def withFloatingLegCalendar(self, cal: "Calendar") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegCalendar(self, cal)

    def withFloatingLegConvention(self, bdc: "BusinessDayConvention") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegConvention(self, bdc)

    def withFloatingLegTerminationDateConvention(self, bdc: "BusinessDayConvention") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegTerminationDateConvention(self, bdc)

    def withFloatingLegRule(self, r: "DateGeneration::Rule") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegRule(self, r)

    def withFloatingLegEndOfMonth(self, flag: "bool"=True) -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegEndOfMonth(self, flag)

    def withFloatingLegFirstDate(self, d: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegFirstDate(self, d)

    def withFloatingLegNextToLastDate(self, d: "Date") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegNextToLastDate(self, d)

    def withFloatingLegDayCount(self, dc: "DayCounter") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegDayCount(self, dc)

    def withFloatingLegSpread(self, sp: "Spread") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withFloatingLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountCurve: "YieldTermStructureHandle") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withDiscountingTermStructure(self, discountCurve)

    def withPricingEngine(self, engine: "PricingEngine") -> "MakeVanillaSwap &":
        return _QuantExt._MakeVanillaSwap_withPricingEngine(self, engine)

    def makeVanillaSwap(self) -> "SwapPtr":
        return _QuantExt._MakeVanillaSwap_makeVanillaSwap(self)

    def __init__(self, swapTenor: "Period", iborIndex: "IborIndex", fixedRate: "Rate", forwardStart: "Period"):
        _QuantExt._MakeVanillaSwap_swiginit(self, _QuantExt.new__MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart))
    __swig_destroy__ = _QuantExt.delete__MakeVanillaSwap

# Register _MakeVanillaSwap in _QuantExt:
_QuantExt._MakeVanillaSwap_swigregister(_MakeVanillaSwap)


def MakeVanillaSwap(swapTenor,iborIndex,fixedRate,forwardStart,
    receiveFixed=None, swapType=None, Nominal=None, settlementDays=None,
    effectiveDate=None, terminationDate=None, dateGenerationRule=None,
    fixedLegTenor=None, fixedLegCalendar=None, fixedLegConvention=None,
    fixedLegDayCount=None, floatingLegTenor=None, floatingLegCalendar=None,
    floatingLegConvention=None, floatingLegDayCount=None, floatingLegSpread=None,
    discountingTermStructure=None, pricingEngine=None,
    fixedLegTerminationDateConvention=None,  fixedLegDateGenRule=None,
    fixedLegEndOfMonth=None, fixedLegFirstDate=None, fixedLegNextToLastDate=None,
    floatingLegTerminationDateConvention=None,  floatingLegDateGenRule=None,
    floatingLegEndOfMonth=None, floatingLegFirstDate=None, floatingLegNextToLastDate=None):
    mv = _MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart)
    if receiveFixed is not None:
        mv.receiveFixed(receiveFixed)
    if swapType is not None:
        mv.withType(swapType)
    if Nominal is not None:
        mv.withNominal(Nominal)
    if settlementDays is not None:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule is not None:
        mv.withRule(dateGenerationRule)
    if fixedLegTenor is not None:
        mv.withFixedLegTenor(fixedLegTenor)
    if fixedLegCalendar is not None:
        mv.withFixedLegCalendar(fixedLegCalendar)
    if fixedLegConvention is not None:
        mv.withFixedLegConvention(fixedLegConvention)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    if floatingLegTenor is not None:
        mv.withFloatingLegTenor(floatingLegTenor)
    if floatingLegCalendar is not None:
        mv.withFloatingLegCalendar(floatingLegCalendar)
    if floatingLegConvention is not None:
        mv.withFloatingLegConvention(floatingLegConvention)
    if floatingLegDayCount is not None:
        mv.withFloatingLegDayCount(floatingLegDayCount)
    if floatingLegSpread is not None:
        mv.withFloatingLegSpread(floatingLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)
    if fixedLegTerminationDateConvention is not None:
        mv.withFixedLegTerminationDateConvention(fixedLegTerminationDateConvention)
    if fixedLegDateGenRule is not None:
        mv.withFixedLegRule(fixedLegDateGenRule)
    if fixedLegEndOfMonth is not None:
        mv.withFixedLegEndOfMonth(fixedLegEndOfMonth)
    if fixedLegFirstDate is not None:
        mv.withFixedLegFirstDate(fixedLegFirstDate)
    if fixedLegNextToLastDate is not None:
        mv.withFixedLegNextToLastDate(fixedLegNextToLastDate)
    if floatingLegTerminationDateConvention is not None:
        mv.withFloatingLegTerminationDateConvention(floatingLegTerminationDateConvention)
    if floatingLegDateGenRule is not None:
        mv.withFloatingLegRule(floatingLegDateGenRule)
    if floatingLegEndOfMonth is not None:
        mv.withFloatingLegEndOfMonth(floatingLegEndOfMonth)
    if floatingLegFirstDate is not None:
        mv.withFloatingLegFirstDate(floatingLegFirstDate)
    if floatingLegNextToLastDate is not None:
        mv.withFloatingLegNextToLastDate(floatingLegNextToLastDate)
    return mv.makeVanillaSwap()

class NonstandardSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "VanillaSwap::Type", fixedNominal: "DoubleVector", floatingNominal: "DoubleVector", fixedSchedule: "Schedule", fixedRate: "DoubleVector", fixedDayCount: "DayCounter", floatSchedule: "Schedule", index: "IborIndex", gearing: "DoubleVector", spread: "DoubleVector", floatDayCount: "DayCounter", intermediateCapitalExchange: "bool const"=False, finalCapitalExchange: "bool const"=False, paymentConvention: "BusinessDayConvention"=Following):
        _QuantExt.NonstandardSwap_swiginit(self, _QuantExt.new_NonstandardSwap(type, fixedNominal, floatingNominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, gearing, spread, floatDayCount, intermediateCapitalExchange, finalCapitalExchange, paymentConvention))

    def fixedLeg(self) -> "Leg const &":
        return _QuantExt.NonstandardSwap_fixedLeg(self)

    def floatingLeg(self) -> "Leg const &":
        return _QuantExt.NonstandardSwap_floatingLeg(self)

    def fixedNominals(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.NonstandardSwap_fixedNominals(self)

    def floatingNominals(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.NonstandardSwap_floatingNominals(self)

    def fixedSchedule(self) -> "Schedule const &":
        return _QuantExt.NonstandardSwap_fixedSchedule(self)

    def floatingSchedule(self) -> "Schedule const &":
        return _QuantExt.NonstandardSwap_floatingSchedule(self)

    def fixedRate(self) -> "std::vector< Rate,std::allocator< Rate > >":
        return _QuantExt.NonstandardSwap_fixedRate(self)

    def spreads(self) -> "std::vector< Spread,std::allocator< Spread > >":
        return _QuantExt.NonstandardSwap_spreads(self)

    def gearings(self) -> "std::vector< Spread,std::allocator< Spread > >":
        return _QuantExt.NonstandardSwap_gearings(self)

    def floatingDayCount(self) -> "DayCounter const &":
        return _QuantExt.NonstandardSwap_floatingDayCount(self)

    def fixedDayCount(self) -> "DayCounter const &":
        return _QuantExt.NonstandardSwap_fixedDayCount(self)
    __swig_destroy__ = _QuantExt.delete_NonstandardSwap

# Register NonstandardSwap in _QuantExt:
_QuantExt.NonstandardSwap_swigregister(NonstandardSwap)

class DiscountingSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountingSwapEngine_swiginit(self, _QuantExt.new_DiscountingSwapEngine(*args))
    __swig_destroy__ = _QuantExt.delete_DiscountingSwapEngine

# Register DiscountingSwapEngine in _QuantExt:
_QuantExt.DiscountingSwapEngine_swigregister(DiscountingSwapEngine)

class AssetSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.AssetSwap_swiginit(self, _QuantExt.new_AssetSwap(*args, **kwargs))

    def fairCleanPrice(self) -> "Real":
        return _QuantExt.AssetSwap_fairCleanPrice(self)

    def fairSpread(self) -> "Spread":
        return _QuantExt.AssetSwap_fairSpread(self)
    __swig_destroy__ = _QuantExt.delete_AssetSwap

# Register AssetSwap in _QuantExt:
_QuantExt.AssetSwap_swigregister(AssetSwap)

class FloatFloatSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FloatFloatSwap_swiginit(self, _QuantExt.new_FloatFloatSwap(*args))
    __swig_destroy__ = _QuantExt.delete_FloatFloatSwap

# Register FloatFloatSwap in _QuantExt:
_QuantExt.FloatFloatSwap_swigregister(FloatFloatSwap)

class OvernightIndexedSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.OvernightIndexedSwap_Receiver
    Payer = _QuantExt.OvernightIndexedSwap_Payer

    def __init__(self, *args):
        _QuantExt.OvernightIndexedSwap_swiginit(self, _QuantExt.new_OvernightIndexedSwap(*args))

    def fixedLegBPS(self) -> "Rate":
        return _QuantExt.OvernightIndexedSwap_fixedLegBPS(self)

    def fixedLegNPV(self) -> "Real":
        return _QuantExt.OvernightIndexedSwap_fixedLegNPV(self)

    def fairRate(self) -> "Real":
        return _QuantExt.OvernightIndexedSwap_fairRate(self)

    def overnightLegBPS(self) -> "Real":
        return _QuantExt.OvernightIndexedSwap_overnightLegBPS(self)

    def overnightLegNPV(self) -> "Real":
        return _QuantExt.OvernightIndexedSwap_overnightLegNPV(self)

    def fairSpread(self) -> "Spread":
        return _QuantExt.OvernightIndexedSwap_fairSpread(self)

    def type(self) -> "OvernightIndexedSwap::Type":
        return _QuantExt.OvernightIndexedSwap_type(self)

    def nominal(self) -> "Real":
        return _QuantExt.OvernightIndexedSwap_nominal(self)

    def nominals(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.OvernightIndexedSwap_nominals(self)

    def paymentFrequency(self) -> "Frequency":
        return _QuantExt.OvernightIndexedSwap_paymentFrequency(self)

    def fixedRate(self) -> "Rate":
        return _QuantExt.OvernightIndexedSwap_fixedRate(self)

    def fixedDayCount(self) -> "DayCounter const &":
        return _QuantExt.OvernightIndexedSwap_fixedDayCount(self)

    def spread(self) -> "Spread":
        return _QuantExt.OvernightIndexedSwap_spread(self)

    def fixedLeg(self) -> "Leg const &":
        return _QuantExt.OvernightIndexedSwap_fixedLeg(self)

    def overnightLeg(self) -> "Leg const &":
        return _QuantExt.OvernightIndexedSwap_overnightLeg(self)
    __swig_destroy__ = _QuantExt.delete_OvernightIndexedSwap

# Register OvernightIndexedSwap in _QuantExt:
_QuantExt.OvernightIndexedSwap_swigregister(OvernightIndexedSwap)

class Pillar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MaturityDate = _QuantExt.Pillar_MaturityDate
    LastRelevantDate = _QuantExt.Pillar_LastRelevantDate
    CustomDate = _QuantExt.Pillar_CustomDate

    def __init__(self):
        _QuantExt.Pillar_swiginit(self, _QuantExt.new_Pillar())
    __swig_destroy__ = _QuantExt.delete_Pillar

# Register Pillar in _QuantExt:
_QuantExt.Pillar_swigregister(Pillar)

class RateHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "RateHelper *":
        return _QuantExt.RateHelper___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.RateHelper___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.RateHelper___bool__(self)

    def __init__(self):
        _QuantExt.RateHelper_swiginit(self, _QuantExt.new_RateHelper())
    __swig_destroy__ = _QuantExt.delete_RateHelper

    def quote(self) -> "Handle< Quote >":
        return _QuantExt.RateHelper_quote(self)

    def latestDate(self) -> "Date":
        return _QuantExt.RateHelper_latestDate(self)

    def earliestDate(self) -> "Date":
        return _QuantExt.RateHelper_earliestDate(self)

    def maturityDate(self) -> "Date":
        return _QuantExt.RateHelper_maturityDate(self)

    def latestRelevantDate(self) -> "Date":
        return _QuantExt.RateHelper_latestRelevantDate(self)

    def pillarDate(self) -> "Date":
        return _QuantExt.RateHelper_pillarDate(self)

    def impliedQuote(self) -> "Real":
        return _QuantExt.RateHelper_impliedQuote(self)

    def quoteError(self) -> "Real":
        return _QuantExt.RateHelper_quoteError(self)

# Register RateHelper in _QuantExt:
_QuantExt.RateHelper_swigregister(RateHelper)

class DepositRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DepositRateHelper_swiginit(self, _QuantExt.new_DepositRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_DepositRateHelper

# Register DepositRateHelper in _QuantExt:
_QuantExt.DepositRateHelper_swigregister(DepositRateHelper)

class FraRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FraRateHelper_swiginit(self, _QuantExt.new_FraRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_FraRateHelper

# Register FraRateHelper in _QuantExt:
_QuantExt.FraRateHelper_swigregister(FraRateHelper)

class FuturesRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FuturesRateHelper_swiginit(self, _QuantExt.new_FuturesRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_FuturesRateHelper

# Register FuturesRateHelper in _QuantExt:
_QuantExt.FuturesRateHelper_swigregister(FuturesRateHelper)

class SwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwapRateHelper_swiginit(self, _QuantExt.new_SwapRateHelper(*args))

    def spread(self) -> "Spread":
        return _QuantExt.SwapRateHelper_spread(self)

    def swap(self) -> "VanillaSwapPtr":
        return _QuantExt.SwapRateHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_SwapRateHelper

# Register SwapRateHelper in _QuantExt:
_QuantExt.SwapRateHelper_swigregister(SwapRateHelper)

class BondHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cleanPrice: "QuoteHandle", bond: "Bond", useCleanPrice: "bool"=True):
        _QuantExt.BondHelper_swiginit(self, _QuantExt.new_BondHelper(cleanPrice, bond, useCleanPrice))

    def bond(self) -> "BondPtr":
        return _QuantExt.BondHelper_bond(self)
    __swig_destroy__ = _QuantExt.delete_BondHelper

# Register BondHelper in _QuantExt:
_QuantExt.BondHelper_swigregister(BondHelper)

class FixedRateBondHelper(BondHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FixedRateBondHelper_swiginit(self, _QuantExt.new_FixedRateBondHelper(*args))

    def bond(self) -> "FixedRateBondPtr":
        return _QuantExt.FixedRateBondHelper_bond(self)
    __swig_destroy__ = _QuantExt.delete_FixedRateBondHelper

# Register FixedRateBondHelper in _QuantExt:
_QuantExt.FixedRateBondHelper_swigregister(FixedRateBondHelper)

class OISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.OISRateHelper_swiginit(self, _QuantExt.new_OISRateHelper(*args))

    def impliedQuote(self) -> "Real":
        return _QuantExt.OISRateHelper_impliedQuote(self)

    def swap(self) -> "OvernightIndexedSwapPtr":
        return _QuantExt.OISRateHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_OISRateHelper

# Register OISRateHelper in _QuantExt:
_QuantExt.OISRateHelper_swigregister(OISRateHelper)

class DatedOISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DatedOISRateHelper_swiginit(self, _QuantExt.new_DatedOISRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_DatedOISRateHelper

# Register DatedOISRateHelper in _QuantExt:
_QuantExt.DatedOISRateHelper_swigregister(DatedOISRateHelper)

class FxSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FxSwapRateHelper_swiginit(self, _QuantExt.new_FxSwapRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_FxSwapRateHelper

# Register FxSwapRateHelper in _QuantExt:
_QuantExt.FxSwapRateHelper_swigregister(FxSwapRateHelper)

class RateHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _QuantExt.RateHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _QuantExt.RateHelperVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.RateHelperVector___bool__(self)

    def __len__(self) -> "std::vector< boost::shared_ptr< RateHelper > >::size_type":
        return _QuantExt.RateHelperVector___len__(self)

    def __getslice__(self, i: "std::vector< boost::shared_ptr< RateHelper > >::difference_type", j: "std::vector< boost::shared_ptr< RateHelper > >::difference_type") -> "std::vector< boost::shared_ptr< RateHelper >,std::allocator< boost::shared_ptr< RateHelper > > > *":
        return _QuantExt.RateHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _QuantExt.RateHelperVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::shared_ptr< RateHelper > >::difference_type", j: "std::vector< boost::shared_ptr< RateHelper > >::difference_type") -> "void":
        return _QuantExt.RateHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _QuantExt.RateHelperVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::shared_ptr< RateHelper > >::value_type const &":
        return _QuantExt.RateHelperVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _QuantExt.RateHelperVector___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::shared_ptr< RateHelper > >::value_type":
        return _QuantExt.RateHelperVector_pop(self)

    def append(self, x: "RateHelper") -> "void":
        return _QuantExt.RateHelperVector_append(self, x)

    def empty(self) -> "bool":
        return _QuantExt.RateHelperVector_empty(self)

    def size(self) -> "std::vector< boost::shared_ptr< RateHelper > >::size_type":
        return _QuantExt.RateHelperVector_size(self)

    def swap(self, v: "RateHelperVector") -> "void":
        return _QuantExt.RateHelperVector_swap(self, v)

    def begin(self) -> "std::vector< boost::shared_ptr< RateHelper > >::iterator":
        return _QuantExt.RateHelperVector_begin(self)

    def end(self) -> "std::vector< boost::shared_ptr< RateHelper > >::iterator":
        return _QuantExt.RateHelperVector_end(self)

    def rbegin(self) -> "std::vector< boost::shared_ptr< RateHelper > >::reverse_iterator":
        return _QuantExt.RateHelperVector_rbegin(self)

    def rend(self) -> "std::vector< boost::shared_ptr< RateHelper > >::reverse_iterator":
        return _QuantExt.RateHelperVector_rend(self)

    def clear(self) -> "void":
        return _QuantExt.RateHelperVector_clear(self)

    def get_allocator(self) -> "std::vector< boost::shared_ptr< RateHelper > >::allocator_type":
        return _QuantExt.RateHelperVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _QuantExt.RateHelperVector_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::shared_ptr< RateHelper > >::iterator":
        return _QuantExt.RateHelperVector_erase(self, *args)

    def __init__(self, *args):
        _QuantExt.RateHelperVector_swiginit(self, _QuantExt.new_RateHelperVector(*args))

    def push_back(self, x: "RateHelper") -> "void":
        return _QuantExt.RateHelperVector_push_back(self, x)

    def front(self) -> "std::vector< boost::shared_ptr< RateHelper > >::value_type const &":
        return _QuantExt.RateHelperVector_front(self)

    def back(self) -> "std::vector< boost::shared_ptr< RateHelper > >::value_type const &":
        return _QuantExt.RateHelperVector_back(self)

    def assign(self, n: "std::vector< boost::shared_ptr< RateHelper > >::size_type", x: "RateHelper") -> "void":
        return _QuantExt.RateHelperVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _QuantExt.RateHelperVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _QuantExt.RateHelperVector_insert(self, *args)

    def reserve(self, n: "std::vector< boost::shared_ptr< RateHelper > >::size_type") -> "void":
        return _QuantExt.RateHelperVector_reserve(self, n)

    def capacity(self) -> "std::vector< boost::shared_ptr< RateHelper > >::size_type":
        return _QuantExt.RateHelperVector_capacity(self)
    __swig_destroy__ = _QuantExt.delete_RateHelperVector

# Register RateHelperVector in _QuantExt:
_QuantExt.RateHelperVector_swigregister(RateHelperVector)


def as_depositratehelper(helper: "RateHelper") -> "DepositRateHelperPtr":
    return _QuantExt.as_depositratehelper(helper)

def as_fraratehelper(helper: "RateHelper") -> "FraRateHelperPtr":
    return _QuantExt.as_fraratehelper(helper)

def as_swapratehelper(helper: "RateHelper") -> "SwapRateHelperPtr":
    return _QuantExt.as_swapratehelper(helper)

def as_oisratehelper(helper: "RateHelper") -> "OISRateHelperPtr":
    return _QuantExt.as_oisratehelper(helper)
class FittingMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantExt.delete_FittingMethod

    def size(self) -> "Size":
        return _QuantExt.FittingMethod_size(self)

    def solution(self) -> "Array":
        return _QuantExt.FittingMethod_solution(self)

    def numberOfIterations(self) -> "Integer":
        return _QuantExt.FittingMethod_numberOfIterations(self)

    def minimumCostValue(self) -> "Real":
        return _QuantExt.FittingMethod_minimumCostValue(self)

    def constrainAtZero(self) -> "bool":
        return _QuantExt.FittingMethod_constrainAtZero(self)

    def weights(self) -> "Array":
        return _QuantExt.FittingMethod_weights(self)

# Register FittingMethod in _QuantExt:
_QuantExt.FittingMethod_swigregister(FittingMethod)

class FittedBondDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FittedBondDiscountCurve_swiginit(self, _QuantExt.new_FittedBondDiscountCurve(*args))

    def fitResults(self) -> "FittingMethod const &":
        return _QuantExt.FittedBondDiscountCurve_fitResults(self)
    __swig_destroy__ = _QuantExt.delete_FittedBondDiscountCurve

# Register FittedBondDiscountCurve in _QuantExt:
_QuantExt.FittedBondDiscountCurve_swigregister(FittedBondDiscountCurve)

class ExponentialSplinesFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ExponentialSplinesFitting_swiginit(self, _QuantExt.new_ExponentialSplinesFitting(*args))
    __swig_destroy__ = _QuantExt.delete_ExponentialSplinesFitting

# Register ExponentialSplinesFitting in _QuantExt:
_QuantExt.ExponentialSplinesFitting_swigregister(ExponentialSplinesFitting)

class NelsonSiegelFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NelsonSiegelFitting_swiginit(self, _QuantExt.new_NelsonSiegelFitting(*args))
    __swig_destroy__ = _QuantExt.delete_NelsonSiegelFitting

# Register NelsonSiegelFitting in _QuantExt:
_QuantExt.NelsonSiegelFitting_swigregister(NelsonSiegelFitting)

class SvenssonFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SvenssonFitting_swiginit(self, _QuantExt.new_SvenssonFitting(*args))
    __swig_destroy__ = _QuantExt.delete_SvenssonFitting

# Register SvenssonFitting in _QuantExt:
_QuantExt.SvenssonFitting_swigregister(SvenssonFitting)

class CubicBSplinesFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CubicBSplinesFitting_swiginit(self, _QuantExt.new_CubicBSplinesFitting(*args))

    def basisFunction(self, i: "Integer", t: "Time") -> "Real":
        return _QuantExt.CubicBSplinesFitting_basisFunction(self, i, t)
    __swig_destroy__ = _QuantExt.delete_CubicBSplinesFitting

# Register CubicBSplinesFitting in _QuantExt:
_QuantExt.CubicBSplinesFitting_swigregister(CubicBSplinesFitting)

class SimplePolynomialFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SimplePolynomialFitting_swiginit(self, _QuantExt.new_SimplePolynomialFitting(*args))
    __swig_destroy__ = _QuantExt.delete_SimplePolynomialFitting

# Register SimplePolynomialFitting in _QuantExt:
_QuantExt.SimplePolynomialFitting_swigregister(SimplePolynomialFitting)

class ForwardCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ForwardCurve_swiginit(self, _QuantExt.new_ForwardCurve(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.ForwardCurve_dates(self)

    def forwards(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.ForwardCurve_forwards(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.ForwardCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_ForwardCurve

# Register ForwardCurve in _QuantExt:
_QuantExt.ForwardCurve_swigregister(ForwardCurve)

class Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Long = _QuantExt.Position_Long
    Short = _QuantExt.Position_Short

    def __init__(self):
        _QuantExt.Position_swiginit(self, _QuantExt.new_Position())
    __swig_destroy__ = _QuantExt.delete_Position

# Register Position in _QuantExt:
_QuantExt.Position_swigregister(Position)

class ForwardRateAgreement(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ForwardRateAgreement_swiginit(self, _QuantExt.new_ForwardRateAgreement(*args))

    def spotIncome(self, discount: "YieldTermStructureHandle") -> "Real":
        return _QuantExt.ForwardRateAgreement_spotIncome(self, discount)

    def spotValue(self) -> "Real":
        return _QuantExt.ForwardRateAgreement_spotValue(self)

    def forwardRate(self) -> "InterestRate":
        return _QuantExt.ForwardRateAgreement_forwardRate(self)
    __swig_destroy__ = _QuantExt.delete_ForwardRateAgreement

# Register ForwardRateAgreement in _QuantExt:
_QuantExt.ForwardRateAgreement_swigregister(ForwardRateAgreement)

class Gaussian1dModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "Gaussian1dModel *":
        return _QuantExt.Gaussian1dModel___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.Gaussian1dModel___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.Gaussian1dModel___bool__(self)

    def __init__(self):
        _QuantExt.Gaussian1dModel_swiginit(self, _QuantExt.new_Gaussian1dModel())
    __swig_destroy__ = _QuantExt.delete_Gaussian1dModel

    def stateProcess(self) -> "StochasticProcess1DPtr const":
        return _QuantExt.Gaussian1dModel_stateProcess(self)

    def numeraire(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_numeraire(self, *args)

    def zerobond(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_zerobond(self, *args)

    def zerobondOption(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_zerobondOption(self, *args)

    def forwardRate(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_forwardRate(self, *args)

    def swapRate(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_swapRate(self, *args)

    def swapAnnuity(self, *args) -> "Real const":
        return _QuantExt.Gaussian1dModel_swapAnnuity(self, *args)

# Register Gaussian1dModel in _QuantExt:
_QuantExt.Gaussian1dModel_swigregister(Gaussian1dModel)

class Gsr(Gaussian1dModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure: "YieldTermStructureHandle", volstepdates: "DateVector", volatilities: "QuoteHandleVector", reversions: "QuoteHandleVector", T: "Real const"=60.0):
        _QuantExt.Gsr_swiginit(self, _QuantExt.new_Gsr(termStructure, volstepdates, volatilities, reversions, T))

    def calibrateVolatilitiesIterative(self, *args) -> "void":
        return _QuantExt.Gsr_calibrateVolatilitiesIterative(self, *args)

    def calibrate(self, *args) -> "void":
        return _QuantExt.Gsr_calibrate(self, *args)

    def params(self) -> "Array":
        return _QuantExt.Gsr_params(self)

    def value(self, params: "Array", hs: "CalibrationHelperVector") -> "Real":
        return _QuantExt.Gsr_value(self, params, hs)

    def endCriteria(self) -> "EndCriteria::Type":
        return _QuantExt.Gsr_endCriteria(self)

    def setParams(self, params: "Array") -> "void":
        return _QuantExt.Gsr_setParams(self, params)

    def functionEvaluation(self) -> "Integer":
        return _QuantExt.Gsr_functionEvaluation(self)

    def reversion(self) -> "Array const &":
        return _QuantExt.Gsr_reversion(self)

    def volatility(self) -> "Array const &":
        return _QuantExt.Gsr_volatility(self)
    __swig_destroy__ = _QuantExt.delete_Gsr

# Register Gsr in _QuantExt:
_QuantExt.Gsr_swigregister(Gsr)

class MarkovFunctionalSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustNone = _QuantExt.MarkovFunctionalSettings_AdjustNone
    AdjustDigitals = _QuantExt.MarkovFunctionalSettings_AdjustDigitals
    AdjustYts = _QuantExt.MarkovFunctionalSettings_AdjustYts
    ExtrapolatePayoffFlat = _QuantExt.MarkovFunctionalSettings_ExtrapolatePayoffFlat
    NoPayoffExtrapolation = _QuantExt.MarkovFunctionalSettings_NoPayoffExtrapolation
    KahaleSmile = _QuantExt.MarkovFunctionalSettings_KahaleSmile
    SmileExponentialExtrapolation = _QuantExt.MarkovFunctionalSettings_SmileExponentialExtrapolation
    KahaleInterpolation = _QuantExt.MarkovFunctionalSettings_KahaleInterpolation
    SmileDeleteArbitragePoints = _QuantExt.MarkovFunctionalSettings_SmileDeleteArbitragePoints
    SabrSmile = _QuantExt.MarkovFunctionalSettings_SabrSmile

    def __init__(self):
        _QuantExt.MarkovFunctionalSettings_swiginit(self, _QuantExt.new_MarkovFunctionalSettings())
    __swig_destroy__ = _QuantExt.delete_MarkovFunctionalSettings

# Register MarkovFunctionalSettings in _QuantExt:
_QuantExt.MarkovFunctionalSettings_swigregister(MarkovFunctionalSettings)

class MarkovFunctional(Gaussian1dModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustNone = _QuantExt.MarkovFunctional_AdjustNone
    AdjustDigitals = _QuantExt.MarkovFunctional_AdjustDigitals
    AdjustYts = _QuantExt.MarkovFunctional_AdjustYts
    ExtrapolatePayoffFlat = _QuantExt.MarkovFunctional_ExtrapolatePayoffFlat
    NoPayoffExtrapolation = _QuantExt.MarkovFunctional_NoPayoffExtrapolation
    KahaleSmile = _QuantExt.MarkovFunctional_KahaleSmile
    SmileExponentialExtrapolation = _QuantExt.MarkovFunctional_SmileExponentialExtrapolation
    KahaleInterpolation = _QuantExt.MarkovFunctional_KahaleInterpolation
    SmileDeleteArbitragePoints = _QuantExt.MarkovFunctional_SmileDeleteArbitragePoints
    SabrSmile = _QuantExt.MarkovFunctional_SabrSmile

    def __init__(self, *args):
        _QuantExt.MarkovFunctional_swiginit(self, _QuantExt.new_MarkovFunctional(*args))

    def calibrate(self, *args) -> "void":
        return _QuantExt.MarkovFunctional_calibrate(self, *args)

    def volatility(self) -> "Array const &":
        return _QuantExt.MarkovFunctional_volatility(self)
    __swig_destroy__ = _QuantExt.delete_MarkovFunctional

# Register MarkovFunctional in _QuantExt:
_QuantExt.MarkovFunctional_swigregister(MarkovFunctional)

class Gaussian1dSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _None = _QuantExt.Gaussian1dSwaptionEngine__None
    Naive = _QuantExt.Gaussian1dSwaptionEngine_Naive
    Digital = _QuantExt.Gaussian1dSwaptionEngine_Digital

    def __init__(self, *args):
        _QuantExt.Gaussian1dSwaptionEngine_swiginit(self, _QuantExt.new_Gaussian1dSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_Gaussian1dSwaptionEngine

# Register Gaussian1dSwaptionEngine in _QuantExt:
_QuantExt.Gaussian1dSwaptionEngine_swigregister(Gaussian1dSwaptionEngine)

class Gaussian1dJamshidianSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model: "Gaussian1dModel"):
        _QuantExt.Gaussian1dJamshidianSwaptionEngine_swiginit(self, _QuantExt.new_Gaussian1dJamshidianSwaptionEngine(model))
    __swig_destroy__ = _QuantExt.delete_Gaussian1dJamshidianSwaptionEngine

# Register Gaussian1dJamshidianSwaptionEngine in _QuantExt:
_QuantExt.Gaussian1dJamshidianSwaptionEngine_swigregister(Gaussian1dJamshidianSwaptionEngine)

class Gaussian1dNonstandardSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _None = _QuantExt.Gaussian1dNonstandardSwaptionEngine__None
    Naive = _QuantExt.Gaussian1dNonstandardSwaptionEngine_Naive
    Digital = _QuantExt.Gaussian1dNonstandardSwaptionEngine_Digital

    def __init__(self, *args):
        _QuantExt.Gaussian1dNonstandardSwaptionEngine_swiginit(self, _QuantExt.new_Gaussian1dNonstandardSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_Gaussian1dNonstandardSwaptionEngine

# Register Gaussian1dNonstandardSwaptionEngine in _QuantExt:
_QuantExt.Gaussian1dNonstandardSwaptionEngine_swigregister(Gaussian1dNonstandardSwaptionEngine)

class Gaussian1dFloatFloatSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _None = _QuantExt.Gaussian1dFloatFloatSwaptionEngine__None
    Naive = _QuantExt.Gaussian1dFloatFloatSwaptionEngine_Naive
    Digital = _QuantExt.Gaussian1dFloatFloatSwaptionEngine_Digital

    def __init__(self, *args):
        _QuantExt.Gaussian1dFloatFloatSwaptionEngine_swiginit(self, _QuantExt.new_Gaussian1dFloatFloatSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_Gaussian1dFloatFloatSwaptionEngine

# Register Gaussian1dFloatFloatSwaptionEngine in _QuantExt:
_QuantExt.Gaussian1dFloatFloatSwaptionEngine_swigregister(Gaussian1dFloatFloatSwaptionEngine)

class SegmentIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intervals: "Size"):
        _QuantExt.SegmentIntegral_swiginit(self, _QuantExt.new_SegmentIntegral(intervals))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.SegmentIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_SegmentIntegral

# Register SegmentIntegral in _QuantExt:
_QuantExt.SegmentIntegral_swigregister(SegmentIntegral)

class TrapezoidIntegralDefault(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy: "Real", maxIterations: "Size"):
        _QuantExt.TrapezoidIntegralDefault_swiginit(self, _QuantExt.new_TrapezoidIntegralDefault(accuracy, maxIterations))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.TrapezoidIntegralDefault___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_TrapezoidIntegralDefault

# Register TrapezoidIntegralDefault in _QuantExt:
_QuantExt.TrapezoidIntegralDefault_swigregister(TrapezoidIntegralDefault)

class TrapezoidIntegralMidPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy: "Real", maxIterations: "Size"):
        _QuantExt.TrapezoidIntegralMidPoint_swiginit(self, _QuantExt.new_TrapezoidIntegralMidPoint(accuracy, maxIterations))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.TrapezoidIntegralMidPoint___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_TrapezoidIntegralMidPoint

# Register TrapezoidIntegralMidPoint in _QuantExt:
_QuantExt.TrapezoidIntegralMidPoint_swigregister(TrapezoidIntegralMidPoint)

class SimpsonIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy: "Real", maxIterations: "Size"):
        _QuantExt.SimpsonIntegral_swiginit(self, _QuantExt.new_SimpsonIntegral(accuracy, maxIterations))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.SimpsonIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_SimpsonIntegral

# Register SimpsonIntegral in _QuantExt:
_QuantExt.SimpsonIntegral_swigregister(SimpsonIntegral)

class GaussKronrodAdaptive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.GaussKronrodAdaptive_swiginit(self, _QuantExt.new_GaussKronrodAdaptive(*args))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.GaussKronrodAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_GaussKronrodAdaptive

# Register GaussKronrodAdaptive in _QuantExt:
_QuantExt.GaussKronrodAdaptive_swigregister(GaussKronrodAdaptive)

class GaussKronrodNonAdaptive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, absoluteAccuracy: "Real", maxEvaluations: "Size", relativeAccuracy: "Real"):
        _QuantExt.GaussKronrodNonAdaptive_swiginit(self, _QuantExt.new_GaussKronrodNonAdaptive(absoluteAccuracy, maxEvaluations, relativeAccuracy))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.GaussKronrodNonAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_GaussKronrodNonAdaptive

# Register GaussKronrodNonAdaptive in _QuantExt:
_QuantExt.GaussKronrodNonAdaptive_swigregister(GaussKronrodNonAdaptive)

class GaussLobattoIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.GaussLobattoIntegral_swiginit(self, _QuantExt.new_GaussLobattoIntegral(*args))

    def __call__(self, pyFunction: "PyObject *", a: "Real", b: "Real") -> "Real":
        return _QuantExt.GaussLobattoIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantExt.delete_GaussLobattoIntegral

# Register GaussLobattoIntegral in _QuantExt:
_QuantExt.GaussLobattoIntegral_swigregister(GaussLobattoIntegral)

class GaussLaguerreIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size", s: "Real"=0.0):
        _QuantExt.GaussLaguerreIntegration_swiginit(self, _QuantExt.new_GaussLaguerreIntegration(n, s))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussLaguerreIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussLaguerreIntegration

# Register GaussLaguerreIntegration in _QuantExt:
_QuantExt.GaussLaguerreIntegration_swigregister(GaussLaguerreIntegration)

class GaussHermiteIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size", mu: "Real"=0.0):
        _QuantExt.GaussHermiteIntegration_swiginit(self, _QuantExt.new_GaussHermiteIntegration(n, mu))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussHermiteIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussHermiteIntegration

# Register GaussHermiteIntegration in _QuantExt:
_QuantExt.GaussHermiteIntegration_swigregister(GaussHermiteIntegration)

class GaussJacobiIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size", alpha: "Real", beta: "Real"):
        _QuantExt.GaussJacobiIntegration_swiginit(self, _QuantExt.new_GaussJacobiIntegration(n, alpha, beta))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussJacobiIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussJacobiIntegration

# Register GaussJacobiIntegration in _QuantExt:
_QuantExt.GaussJacobiIntegration_swigregister(GaussJacobiIntegration)

class GaussHyperbolicIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size"):
        _QuantExt.GaussHyperbolicIntegration_swiginit(self, _QuantExt.new_GaussHyperbolicIntegration(n))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussHyperbolicIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussHyperbolicIntegration

# Register GaussHyperbolicIntegration in _QuantExt:
_QuantExt.GaussHyperbolicIntegration_swigregister(GaussHyperbolicIntegration)

class GaussLegendreIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size"):
        _QuantExt.GaussLegendreIntegration_swiginit(self, _QuantExt.new_GaussLegendreIntegration(n))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussLegendreIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussLegendreIntegration

# Register GaussLegendreIntegration in _QuantExt:
_QuantExt.GaussLegendreIntegration_swigregister(GaussLegendreIntegration)

class GaussChebyshevIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size"):
        _QuantExt.GaussChebyshevIntegration_swiginit(self, _QuantExt.new_GaussChebyshevIntegration(n))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussChebyshevIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussChebyshevIntegration

# Register GaussChebyshevIntegration in _QuantExt:
_QuantExt.GaussChebyshevIntegration_swigregister(GaussChebyshevIntegration)

class GaussChebyshev2ndIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size"):
        _QuantExt.GaussChebyshev2ndIntegration_swiginit(self, _QuantExt.new_GaussChebyshev2ndIntegration(n))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussChebyshev2ndIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussChebyshev2ndIntegration

# Register GaussChebyshev2ndIntegration in _QuantExt:
_QuantExt.GaussChebyshev2ndIntegration_swigregister(GaussChebyshev2ndIntegration)

class GaussGegenbauerIntegration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n: "Size", lambda_parameter: "Real"):
        _QuantExt.GaussGegenbauerIntegration_swiginit(self, _QuantExt.new_GaussGegenbauerIntegration(n, lambda_parameter))

    def __call__(self, pyFunction: "PyObject *") -> "Real":
        return _QuantExt.GaussGegenbauerIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantExt.delete_GaussGegenbauerIntegration

# Register GaussGegenbauerIntegration in _QuantExt:
_QuantExt.GaussGegenbauerIntegration_swigregister(GaussGegenbauerIntegration)

class SampleNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self) -> "double":
        return _QuantExt.SampleNumber_value(self)

    def weight(self) -> "Real":
        return _QuantExt.SampleNumber_weight(self)
    __swig_destroy__ = _QuantExt.delete_SampleNumber

# Register SampleNumber in _QuantExt:
_QuantExt.SampleNumber_swigregister(SampleNumber)

class SampleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self) -> "Array":
        return _QuantExt.SampleArray_value(self)

    def weight(self) -> "Real":
        return _QuantExt.SampleArray_weight(self)
    __swig_destroy__ = _QuantExt.delete_SampleArray

# Register SampleArray in _QuantExt:
_QuantExt.SampleArray_swigregister(SampleArray)

class SampleRealVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self) -> "std::vector< double,std::allocator< double > >":
        return _QuantExt.SampleRealVector_value(self)

    def weight(self) -> "Real":
        return _QuantExt.SampleRealVector_weight(self)
    __swig_destroy__ = _QuantExt.delete_SampleRealVector

# Register SampleRealVector in _QuantExt:
_QuantExt.SampleRealVector_swigregister(SampleRealVector)

class LecuyerUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "BigInteger"=0):
        _QuantExt.LecuyerUniformRng_swiginit(self, _QuantExt.new_LecuyerUniformRng(seed))

    def next(self) -> "Sample< Real >":
        return _QuantExt.LecuyerUniformRng_next(self)
    __swig_destroy__ = _QuantExt.delete_LecuyerUniformRng

# Register LecuyerUniformRng in _QuantExt:
_QuantExt.LecuyerUniformRng_swigregister(LecuyerUniformRng)

class KnuthUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "BigInteger"=0):
        _QuantExt.KnuthUniformRng_swiginit(self, _QuantExt.new_KnuthUniformRng(seed))

    def next(self) -> "Sample< Real >":
        return _QuantExt.KnuthUniformRng_next(self)
    __swig_destroy__ = _QuantExt.delete_KnuthUniformRng

# Register KnuthUniformRng in _QuantExt:
_QuantExt.KnuthUniformRng_swigregister(KnuthUniformRng)

class MersenneTwisterUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "BigInteger"=0):
        _QuantExt.MersenneTwisterUniformRng_swiginit(self, _QuantExt.new_MersenneTwisterUniformRng(seed))

    def next(self) -> "Sample< Real >":
        return _QuantExt.MersenneTwisterUniformRng_next(self)
    __swig_destroy__ = _QuantExt.delete_MersenneTwisterUniformRng

# Register MersenneTwisterUniformRng in _QuantExt:
_QuantExt.MersenneTwisterUniformRng_swigregister(MersenneTwisterUniformRng)

class UniformRandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed: "BigInteger"=0):
        _QuantExt.UniformRandomGenerator_swiginit(self, _QuantExt.new_UniformRandomGenerator(seed))

    def next(self) -> "Sample< Real >":
        return _QuantExt.UniformRandomGenerator_next(self)

    def nextValue(self) -> "Real":
        return _QuantExt.UniformRandomGenerator_nextValue(self)
    __swig_destroy__ = _QuantExt.delete_UniformRandomGenerator

# Register UniformRandomGenerator in _QuantExt:
_QuantExt.UniformRandomGenerator_swigregister(UniformRandomGenerator)

class CentralLimitLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "LecuyerUniformRng"):
        _QuantExt.CentralLimitLecuyerGaussianRng_swiginit(self, _QuantExt.new_CentralLimitLecuyerGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.CentralLimitLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_CentralLimitLecuyerGaussianRng

# Register CentralLimitLecuyerGaussianRng in _QuantExt:
_QuantExt.CentralLimitLecuyerGaussianRng_swigregister(CentralLimitLecuyerGaussianRng)

class CentralLimitKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "KnuthUniformRng"):
        _QuantExt.CentralLimitKnuthGaussianRng_swiginit(self, _QuantExt.new_CentralLimitKnuthGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.CentralLimitKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_CentralLimitKnuthGaussianRng

# Register CentralLimitKnuthGaussianRng in _QuantExt:
_QuantExt.CentralLimitKnuthGaussianRng_swigregister(CentralLimitKnuthGaussianRng)

class CentralLimitMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "MersenneTwisterUniformRng"):
        _QuantExt.CentralLimitMersenneTwisterGaussianRng_swiginit(self, _QuantExt.new_CentralLimitMersenneTwisterGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.CentralLimitMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_CentralLimitMersenneTwisterGaussianRng

# Register CentralLimitMersenneTwisterGaussianRng in _QuantExt:
_QuantExt.CentralLimitMersenneTwisterGaussianRng_swigregister(CentralLimitMersenneTwisterGaussianRng)

class BoxMullerLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "LecuyerUniformRng"):
        _QuantExt.BoxMullerLecuyerGaussianRng_swiginit(self, _QuantExt.new_BoxMullerLecuyerGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.BoxMullerLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_BoxMullerLecuyerGaussianRng

# Register BoxMullerLecuyerGaussianRng in _QuantExt:
_QuantExt.BoxMullerLecuyerGaussianRng_swigregister(BoxMullerLecuyerGaussianRng)

class BoxMullerKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "KnuthUniformRng"):
        _QuantExt.BoxMullerKnuthGaussianRng_swiginit(self, _QuantExt.new_BoxMullerKnuthGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.BoxMullerKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_BoxMullerKnuthGaussianRng

# Register BoxMullerKnuthGaussianRng in _QuantExt:
_QuantExt.BoxMullerKnuthGaussianRng_swigregister(BoxMullerKnuthGaussianRng)

class BoxMullerMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "MersenneTwisterUniformRng"):
        _QuantExt.BoxMullerMersenneTwisterGaussianRng_swiginit(self, _QuantExt.new_BoxMullerMersenneTwisterGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.BoxMullerMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_BoxMullerMersenneTwisterGaussianRng

# Register BoxMullerMersenneTwisterGaussianRng in _QuantExt:
_QuantExt.BoxMullerMersenneTwisterGaussianRng_swigregister(BoxMullerMersenneTwisterGaussianRng)

class MoroInvCumulativeLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "LecuyerUniformRng"):
        _QuantExt.MoroInvCumulativeLecuyerGaussianRng_swiginit(self, _QuantExt.new_MoroInvCumulativeLecuyerGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.MoroInvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeLecuyerGaussianRng

# Register MoroInvCumulativeLecuyerGaussianRng in _QuantExt:
_QuantExt.MoroInvCumulativeLecuyerGaussianRng_swigregister(MoroInvCumulativeLecuyerGaussianRng)

class MoroInvCumulativeKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "KnuthUniformRng"):
        _QuantExt.MoroInvCumulativeKnuthGaussianRng_swiginit(self, _QuantExt.new_MoroInvCumulativeKnuthGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.MoroInvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeKnuthGaussianRng

# Register MoroInvCumulativeKnuthGaussianRng in _QuantExt:
_QuantExt.MoroInvCumulativeKnuthGaussianRng_swigregister(MoroInvCumulativeKnuthGaussianRng)

class MoroInvCumulativeMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "MersenneTwisterUniformRng"):
        _QuantExt.MoroInvCumulativeMersenneTwisterGaussianRng_swiginit(self, _QuantExt.new_MoroInvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.MoroInvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeMersenneTwisterGaussianRng

# Register MoroInvCumulativeMersenneTwisterGaussianRng in _QuantExt:
_QuantExt.MoroInvCumulativeMersenneTwisterGaussianRng_swigregister(MoroInvCumulativeMersenneTwisterGaussianRng)

class InvCumulativeLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "LecuyerUniformRng"):
        _QuantExt.InvCumulativeLecuyerGaussianRng_swiginit(self, _QuantExt.new_InvCumulativeLecuyerGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.InvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeLecuyerGaussianRng

# Register InvCumulativeLecuyerGaussianRng in _QuantExt:
_QuantExt.InvCumulativeLecuyerGaussianRng_swigregister(InvCumulativeLecuyerGaussianRng)

class InvCumulativeKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "KnuthUniformRng"):
        _QuantExt.InvCumulativeKnuthGaussianRng_swiginit(self, _QuantExt.new_InvCumulativeKnuthGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.InvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeKnuthGaussianRng

# Register InvCumulativeKnuthGaussianRng in _QuantExt:
_QuantExt.InvCumulativeKnuthGaussianRng_swigregister(InvCumulativeKnuthGaussianRng)

class InvCumulativeMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "MersenneTwisterUniformRng"):
        _QuantExt.InvCumulativeMersenneTwisterGaussianRng_swiginit(self, _QuantExt.new_InvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.InvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeMersenneTwisterGaussianRng

# Register InvCumulativeMersenneTwisterGaussianRng in _QuantExt:
_QuantExt.InvCumulativeMersenneTwisterGaussianRng_swigregister(InvCumulativeMersenneTwisterGaussianRng)

class GaussianRandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng: "UniformRandomGenerator"):
        _QuantExt.GaussianRandomGenerator_swiginit(self, _QuantExt.new_GaussianRandomGenerator(rng))

    def next(self) -> "Sample< Real >":
        return _QuantExt.GaussianRandomGenerator_next(self)

    def nextValue(self) -> "Real":
        return _QuantExt.GaussianRandomGenerator_nextValue(self)
    __swig_destroy__ = _QuantExt.delete_GaussianRandomGenerator

# Register GaussianRandomGenerator in _QuantExt:
_QuantExt.GaussianRandomGenerator_swigregister(GaussianRandomGenerator)

class HaltonRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size", seed: "unsigned long"=0, randomStart: "bool"=True, randomShift: "bool"=False):
        _QuantExt.HaltonRsg_swiginit(self, _QuantExt.new_HaltonRsg(dimensionality, seed, randomStart, randomShift))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.HaltonRsg_nextSequence(self)

    def lastSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.HaltonRsg_lastSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.HaltonRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_HaltonRsg

# Register HaltonRsg in _QuantExt:
_QuantExt.HaltonRsg_swigregister(HaltonRsg)

class SobolRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unit = _QuantExt.SobolRsg_Unit
    Jaeckel = _QuantExt.SobolRsg_Jaeckel
    SobolLevitan = _QuantExt.SobolRsg_SobolLevitan
    SobolLevitanLemieux = _QuantExt.SobolRsg_SobolLevitanLemieux
    JoeKuoD5 = _QuantExt.SobolRsg_JoeKuoD5
    JoeKuoD6 = _QuantExt.SobolRsg_JoeKuoD6
    JoeKuoD7 = _QuantExt.SobolRsg_JoeKuoD7
    Kuo = _QuantExt.SobolRsg_Kuo
    Kuo2 = _QuantExt.SobolRsg_Kuo2
    Kuo3 = _QuantExt.SobolRsg_Kuo3

    def __init__(self, *args):
        _QuantExt.SobolRsg_swiginit(self, _QuantExt.new_SobolRsg(*args))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.SobolRsg_nextSequence(self)

    def lastSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.SobolRsg_lastSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.SobolRsg_dimension(self)

    def skipTo(self, n: "Size") -> "void":
        return _QuantExt.SobolRsg_skipTo(self, n)

    def nextInt32Sequence(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _QuantExt.SobolRsg_nextInt32Sequence(self)
    __swig_destroy__ = _QuantExt.delete_SobolRsg

# Register SobolRsg in _QuantExt:
_QuantExt.SobolRsg_swigregister(SobolRsg)

class SobolBrownianBridgeRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors: "Size", steps: "Size"):
        _QuantExt.SobolBrownianBridgeRsg_swiginit(self, _QuantExt.new_SobolBrownianBridgeRsg(factors, steps))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.SobolBrownianBridgeRsg_nextSequence(self)

    def lastSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.SobolBrownianBridgeRsg_lastSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.SobolBrownianBridgeRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_SobolBrownianBridgeRsg

# Register SobolBrownianBridgeRsg in _QuantExt:
_QuantExt.SobolBrownianBridgeRsg_swigregister(SobolBrownianBridgeRsg)

class LecuyerUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size", rng: "LecuyerUniformRng"):
        _QuantExt.LecuyerUniformRsg_swiginit(self, _QuantExt.new_LecuyerUniformRsg(dimensionality, rng))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.LecuyerUniformRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.LecuyerUniformRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_LecuyerUniformRsg

# Register LecuyerUniformRsg in _QuantExt:
_QuantExt.LecuyerUniformRsg_swigregister(LecuyerUniformRsg)

class KnuthUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size", rng: "KnuthUniformRng"):
        _QuantExt.KnuthUniformRsg_swiginit(self, _QuantExt.new_KnuthUniformRsg(dimensionality, rng))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.KnuthUniformRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.KnuthUniformRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_KnuthUniformRsg

# Register KnuthUniformRsg in _QuantExt:
_QuantExt.KnuthUniformRsg_swigregister(KnuthUniformRsg)

class MersenneTwisterUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size", rng: "MersenneTwisterUniformRng"):
        _QuantExt.MersenneTwisterUniformRsg_swiginit(self, _QuantExt.new_MersenneTwisterUniformRsg(dimensionality, rng))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MersenneTwisterUniformRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MersenneTwisterUniformRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MersenneTwisterUniformRsg

# Register MersenneTwisterUniformRsg in _QuantExt:
_QuantExt.MersenneTwisterUniformRsg_swigregister(MersenneTwisterUniformRsg)

class UniformRandomSequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size", rng: "UniformRandomGenerator"):
        _QuantExt.UniformRandomSequenceGenerator_swiginit(self, _QuantExt.new_UniformRandomSequenceGenerator(dimensionality, rng))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.UniformRandomSequenceGenerator_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.UniformRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantExt.delete_UniformRandomSequenceGenerator

# Register UniformRandomSequenceGenerator in _QuantExt:
_QuantExt.UniformRandomSequenceGenerator_swigregister(UniformRandomSequenceGenerator)

class UniformLowDiscrepancySequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality: "Size"):
        _QuantExt.UniformLowDiscrepancySequenceGenerator_swiginit(self, _QuantExt.new_UniformLowDiscrepancySequenceGenerator(dimensionality))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.UniformLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.UniformLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantExt.delete_UniformLowDiscrepancySequenceGenerator

# Register UniformLowDiscrepancySequenceGenerator in _QuantExt:
_QuantExt.UniformLowDiscrepancySequenceGenerator_swigregister(UniformLowDiscrepancySequenceGenerator)

class MoroInvCumulativeLecuyerGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "LecuyerUniformRsg"):
        _QuantExt.MoroInvCumulativeLecuyerGaussianRsg_swiginit(self, _QuantExt.new_MoroInvCumulativeLecuyerGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MoroInvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MoroInvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeLecuyerGaussianRsg

# Register MoroInvCumulativeLecuyerGaussianRsg in _QuantExt:
_QuantExt.MoroInvCumulativeLecuyerGaussianRsg_swigregister(MoroInvCumulativeLecuyerGaussianRsg)

class MoroInvCumulativeKnuthGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "KnuthUniformRsg"):
        _QuantExt.MoroInvCumulativeKnuthGaussianRsg_swiginit(self, _QuantExt.new_MoroInvCumulativeKnuthGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MoroInvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MoroInvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeKnuthGaussianRsg

# Register MoroInvCumulativeKnuthGaussianRsg in _QuantExt:
_QuantExt.MoroInvCumulativeKnuthGaussianRsg_swigregister(MoroInvCumulativeKnuthGaussianRsg)

class MoroInvCumulativeMersenneTwisterGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "MersenneTwisterUniformRsg"):
        _QuantExt.MoroInvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _QuantExt.new_MoroInvCumulativeMersenneTwisterGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MoroInvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MoroInvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeMersenneTwisterGaussianRsg

# Register MoroInvCumulativeMersenneTwisterGaussianRsg in _QuantExt:
_QuantExt.MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister(MoroInvCumulativeMersenneTwisterGaussianRsg)

class MoroInvCumulativeHaltonGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "HaltonRsg"):
        _QuantExt.MoroInvCumulativeHaltonGaussianRsg_swiginit(self, _QuantExt.new_MoroInvCumulativeHaltonGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MoroInvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MoroInvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeHaltonGaussianRsg

# Register MoroInvCumulativeHaltonGaussianRsg in _QuantExt:
_QuantExt.MoroInvCumulativeHaltonGaussianRsg_swigregister(MoroInvCumulativeHaltonGaussianRsg)

class MoroInvCumulativeSobolGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "SobolRsg"):
        _QuantExt.MoroInvCumulativeSobolGaussianRsg_swiginit(self, _QuantExt.new_MoroInvCumulativeSobolGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.MoroInvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.MoroInvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_MoroInvCumulativeSobolGaussianRsg

# Register MoroInvCumulativeSobolGaussianRsg in _QuantExt:
_QuantExt.MoroInvCumulativeSobolGaussianRsg_swigregister(MoroInvCumulativeSobolGaussianRsg)

class InvCumulativeLecuyerGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "LecuyerUniformRsg"):
        _QuantExt.InvCumulativeLecuyerGaussianRsg_swiginit(self, _QuantExt.new_InvCumulativeLecuyerGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.InvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.InvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeLecuyerGaussianRsg

# Register InvCumulativeLecuyerGaussianRsg in _QuantExt:
_QuantExt.InvCumulativeLecuyerGaussianRsg_swigregister(InvCumulativeLecuyerGaussianRsg)

class InvCumulativeKnuthGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "KnuthUniformRsg"):
        _QuantExt.InvCumulativeKnuthGaussianRsg_swiginit(self, _QuantExt.new_InvCumulativeKnuthGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.InvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.InvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeKnuthGaussianRsg

# Register InvCumulativeKnuthGaussianRsg in _QuantExt:
_QuantExt.InvCumulativeKnuthGaussianRsg_swigregister(InvCumulativeKnuthGaussianRsg)

class InvCumulativeMersenneTwisterGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "MersenneTwisterUniformRsg"):
        _QuantExt.InvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _QuantExt.new_InvCumulativeMersenneTwisterGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.InvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.InvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeMersenneTwisterGaussianRsg

# Register InvCumulativeMersenneTwisterGaussianRsg in _QuantExt:
_QuantExt.InvCumulativeMersenneTwisterGaussianRsg_swigregister(InvCumulativeMersenneTwisterGaussianRsg)

class InvCumulativeHaltonGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "HaltonRsg"):
        _QuantExt.InvCumulativeHaltonGaussianRsg_swiginit(self, _QuantExt.new_InvCumulativeHaltonGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.InvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.InvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeHaltonGaussianRsg

# Register InvCumulativeHaltonGaussianRsg in _QuantExt:
_QuantExt.InvCumulativeHaltonGaussianRsg_swigregister(InvCumulativeHaltonGaussianRsg)

class InvCumulativeSobolGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "SobolRsg"):
        _QuantExt.InvCumulativeSobolGaussianRsg_swiginit(self, _QuantExt.new_InvCumulativeSobolGaussianRsg(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.InvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.InvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantExt.delete_InvCumulativeSobolGaussianRsg

# Register InvCumulativeSobolGaussianRsg in _QuantExt:
_QuantExt.InvCumulativeSobolGaussianRsg_swigregister(InvCumulativeSobolGaussianRsg)

class GaussianRandomSequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator: "UniformRandomSequenceGenerator"):
        _QuantExt.GaussianRandomSequenceGenerator_swiginit(self, _QuantExt.new_GaussianRandomSequenceGenerator(uniformSequenceGenerator))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.GaussianRandomSequenceGenerator_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.GaussianRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantExt.delete_GaussianRandomSequenceGenerator

# Register GaussianRandomSequenceGenerator in _QuantExt:
_QuantExt.GaussianRandomSequenceGenerator_swigregister(GaussianRandomSequenceGenerator)

class GaussianLowDiscrepancySequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, u: "UniformLowDiscrepancySequenceGenerator"):
        _QuantExt.GaussianLowDiscrepancySequenceGenerator_swiginit(self, _QuantExt.new_GaussianLowDiscrepancySequenceGenerator(u))

    def nextSequence(self) -> "Sample< std::vector< Real,std::allocator< Real > > > const &":
        return _QuantExt.GaussianLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self) -> "Size":
        return _QuantExt.GaussianLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantExt.delete_GaussianLowDiscrepancySequenceGenerator

# Register GaussianLowDiscrepancySequenceGenerator in _QuantExt:
_QuantExt.GaussianLowDiscrepancySequenceGenerator_swigregister(GaussianLowDiscrepancySequenceGenerator)


def getCovariance(volatilities: "Array", correlations: "Matrix") -> "Matrix":
    return _QuantExt.getCovariance(volatilities, correlations)
class Path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self) -> "Size":
        return _QuantExt.Path___len__(self)

    def value(self, i: "Size") -> "Real":
        return _QuantExt.Path_value(self, i)

    def front(self) -> "Real":
        return _QuantExt.Path_front(self)

    def back(self) -> "Real":
        return _QuantExt.Path_back(self)

    def time(self, i: "Size") -> "Time":
        return _QuantExt.Path_time(self, i)

    def __getitem__(self, i: "Integer") -> "Real":
        return _QuantExt.Path___getitem__(self, i)
    __swig_destroy__ = _QuantExt.delete_Path

# Register Path in _QuantExt:
_QuantExt.Path_swigregister(Path)

class SamplePath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self) -> "Path":
        return _QuantExt.SamplePath_value(self)

    def weight(self) -> "Real":
        return _QuantExt.SamplePath_weight(self)
    __swig_destroy__ = _QuantExt.delete_SamplePath

# Register SamplePath in _QuantExt:
_QuantExt.SamplePath_swigregister(SamplePath)

class GaussianPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "StochasticProcess1D", length: "Time", steps: "Size", rsg: "GaussianRandomSequenceGenerator", brownianBridge: "bool"):
        _QuantExt.GaussianPathGenerator_swiginit(self, _QuantExt.new_GaussianPathGenerator(process, length, steps, rsg, brownianBridge))

    def next(self) -> "Sample< Path >":
        return _QuantExt.GaussianPathGenerator_next(self)

    def antithetic(self) -> "Sample< Path >":
        return _QuantExt.GaussianPathGenerator_antithetic(self)
    __swig_destroy__ = _QuantExt.delete_GaussianPathGenerator

# Register GaussianPathGenerator in _QuantExt:
_QuantExt.GaussianPathGenerator_swigregister(GaussianPathGenerator)

class GaussianSobolPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "StochasticProcess1D", length: "Time", steps: "Size", rsg: "GaussianLowDiscrepancySequenceGenerator", brownianBridge: "bool"):
        _QuantExt.GaussianSobolPathGenerator_swiginit(self, _QuantExt.new_GaussianSobolPathGenerator(process, length, steps, rsg, brownianBridge))

    def next(self) -> "Sample< Path >":
        return _QuantExt.GaussianSobolPathGenerator_next(self)

    def antithetic(self) -> "Sample< Path >":
        return _QuantExt.GaussianSobolPathGenerator_antithetic(self)
    __swig_destroy__ = _QuantExt.delete_GaussianSobolPathGenerator

# Register GaussianSobolPathGenerator in _QuantExt:
_QuantExt.GaussianSobolPathGenerator_swigregister(GaussianSobolPathGenerator)

class MultiPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self) -> "Size":
        return _QuantExt.MultiPath___len__(self)

    def assetNumber(self) -> "Size":
        return _QuantExt.MultiPath_assetNumber(self)

    def at(self, j: "Size") -> "Path &":
        return _QuantExt.MultiPath_at(self, j)

    def __getitem__(self, i: "Integer") -> "Path const &":
        return _QuantExt.MultiPath___getitem__(self, i)
    __swig_destroy__ = _QuantExt.delete_MultiPath

# Register MultiPath in _QuantExt:
_QuantExt.MultiPath_swigregister(MultiPath)

class SampleMultiPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self) -> "MultiPath":
        return _QuantExt.SampleMultiPath_value(self)

    def weight(self) -> "Real":
        return _QuantExt.SampleMultiPath_weight(self)
    __swig_destroy__ = _QuantExt.delete_SampleMultiPath

# Register SampleMultiPath in _QuantExt:
_QuantExt.SampleMultiPath_swigregister(SampleMultiPath)

class GaussianMultiPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process: "StochasticProcess", times: "DoubleVector", generator: "GaussianRandomSequenceGenerator", brownianBridge: "bool"=False):
        _QuantExt.GaussianMultiPathGenerator_swiginit(self, _QuantExt.new_GaussianMultiPathGenerator(process, times, generator, brownianBridge))

    def next(self) -> "Sample< MultiPath >":
        return _QuantExt.GaussianMultiPathGenerator_next(self)

    def antithetic(self) -> "Sample< MultiPath >":
        return _QuantExt.GaussianMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _QuantExt.delete_GaussianMultiPathGenerator

# Register GaussianMultiPathGenerator in _QuantExt:
_QuantExt.GaussianMultiPathGenerator_swigregister(GaussianMultiPathGenerator)

class BrownianBridge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BrownianBridge_swiginit(self, _QuantExt.new_BrownianBridge(*args))

    def size(self) -> "Size":
        return _QuantExt.BrownianBridge_size(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > >":
        return _QuantExt.BrownianBridge_times(self)

    def leftWeight(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.BrownianBridge_leftWeight(self)

    def rightWeight(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.BrownianBridge_rightWeight(self)

    def stdDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.BrownianBridge_stdDeviation(self)

    def transform(self, input: "DoubleVector") -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.BrownianBridge_transform(self, input)

    def bridgeIndex(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _QuantExt.BrownianBridge_bridgeIndex(self)

    def leftIndex(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _QuantExt.BrownianBridge_leftIndex(self)

    def rightIndex(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _QuantExt.BrownianBridge_rightIndex(self)
    __swig_destroy__ = _QuantExt.delete_BrownianBridge

# Register BrownianBridge in _QuantExt:
_QuantExt.BrownianBridge_swigregister(BrownianBridge)

class BoundaryCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "DefaultBoundaryCondition *":
        return _QuantExt.BoundaryCondition___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.BoundaryCondition___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.BoundaryCondition___bool__(self)
    NoSide = _QuantExt.BoundaryCondition_NoSide
    Upper = _QuantExt.BoundaryCondition_Upper
    Lower = _QuantExt.BoundaryCondition_Lower

    def __init__(self):
        _QuantExt.BoundaryCondition_swiginit(self, _QuantExt.new_BoundaryCondition())
    __swig_destroy__ = _QuantExt.delete_BoundaryCondition

# Register BoundaryCondition in _QuantExt:
_QuantExt.BoundaryCondition_swigregister(BoundaryCondition)

class NeumannBC(BoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value: "Real", side: "DefaultBoundaryCondition::Side"):
        _QuantExt.NeumannBC_swiginit(self, _QuantExt.new_NeumannBC(value, side))
    __swig_destroy__ = _QuantExt.delete_NeumannBC

# Register NeumannBC in _QuantExt:
_QuantExt.NeumannBC_swigregister(NeumannBC)

class DirichletBC(BoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value: "Real", side: "DefaultBoundaryCondition::Side"):
        _QuantExt.DirichletBC_swiginit(self, _QuantExt.new_DirichletBC(value, side))
    __swig_destroy__ = _QuantExt.delete_DirichletBC

# Register DirichletBC in _QuantExt:
_QuantExt.DirichletBC_swigregister(DirichletBC)

class TridiagonalOperator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, low: "Array", mid: "Array", high: "Array"):
        _QuantExt.TridiagonalOperator_swiginit(self, _QuantExt.new_TridiagonalOperator(low, mid, high))

    def solveFor(self, rhs: "Array") -> "Array":
        return _QuantExt.TridiagonalOperator_solveFor(self, rhs)

    def applyTo(self, v: "Array") -> "Array":
        return _QuantExt.TridiagonalOperator_applyTo(self, v)

    def size(self) -> "Size":
        return _QuantExt.TridiagonalOperator_size(self)

    def setFirstRow(self, arg2: "Real", arg3: "Real") -> "void":
        return _QuantExt.TridiagonalOperator_setFirstRow(self, arg2, arg3)

    def setMidRow(self, arg2: "Size", arg3: "Real", arg4: "Real", arg5: "Real") -> "void":
        return _QuantExt.TridiagonalOperator_setMidRow(self, arg2, arg3, arg4, arg5)

    def setMidRows(self, arg2: "Real", arg3: "Real", arg4: "Real") -> "void":
        return _QuantExt.TridiagonalOperator_setMidRows(self, arg2, arg3, arg4)

    def setLastRow(self, arg2: "Real", arg3: "Real") -> "void":
        return _QuantExt.TridiagonalOperator_setLastRow(self, arg2, arg3)

    @staticmethod
    def identity(size: "Size") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator_identity(size)

    def __add__(self, O: "TridiagonalOperator") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___add__(self, O)

    def __sub__(self, O: "TridiagonalOperator") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___sub__(self, O)

    def __mul__(self, a: "Real") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___mul__(self, a)

    def __div__(self, a: "Real") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___div__(self, a)

    def __iadd__(self, O: "TridiagonalOperator") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___iadd__(self, O)

    def __isub__(self, O: "TridiagonalOperator") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___isub__(self, O)

    def __imul__(self, a: "Real") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___imul__(self, a)

    def __rmul__(self, a: "Real") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___rmul__(self, a)

    def __idiv__(self, a: "Real") -> "TridiagonalOperator":
        return _QuantExt.TridiagonalOperator___idiv__(self, a)
    __swig_destroy__ = _QuantExt.delete_TridiagonalOperator

# Register TridiagonalOperator in _QuantExt:
_QuantExt.TridiagonalOperator_swigregister(TridiagonalOperator)

def TridiagonalOperator_identity(size: "Size") -> "TridiagonalOperator":
    return _QuantExt.TridiagonalOperator_identity(size)

class DPlus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints: "Size", h: "Real"):
        _QuantExt.DPlus_swiginit(self, _QuantExt.new_DPlus(gridPoints, h))
    __swig_destroy__ = _QuantExt.delete_DPlus

# Register DPlus in _QuantExt:
_QuantExt.DPlus_swigregister(DPlus)

class DMinus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints: "Size", h: "Real"):
        _QuantExt.DMinus_swiginit(self, _QuantExt.new_DMinus(gridPoints, h))
    __swig_destroy__ = _QuantExt.delete_DMinus

# Register DMinus in _QuantExt:
_QuantExt.DMinus_swigregister(DMinus)

class DZero(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints: "Size", h: "Real"):
        _QuantExt.DZero_swiginit(self, _QuantExt.new_DZero(gridPoints, h))
    __swig_destroy__ = _QuantExt.delete_DZero

# Register DZero in _QuantExt:
_QuantExt.DZero_swigregister(DZero)

class DPlusDMinus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints: "Size", h: "Real"):
        _QuantExt.DPlusDMinus_swiginit(self, _QuantExt.new_DPlusDMinus(gridPoints, h))
    __swig_destroy__ = _QuantExt.delete_DPlusDMinus

# Register DPlusDMinus in _QuantExt:
_QuantExt.DPlusDMinus_swigregister(DPlusDMinus)

class Discount(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Discount_swiginit(self, _QuantExt.new_Discount())
    __swig_destroy__ = _QuantExt.delete_Discount

# Register Discount in _QuantExt:
_QuantExt.Discount_swigregister(Discount)

class ZeroYield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ZeroYield_swiginit(self, _QuantExt.new_ZeroYield())
    __swig_destroy__ = _QuantExt.delete_ZeroYield

# Register ZeroYield in _QuantExt:
_QuantExt.ZeroYield_swigregister(ZeroYield)

class ForwardRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.ForwardRate_swiginit(self, _QuantExt.new_ForwardRate())
    __swig_destroy__ = _QuantExt.delete_ForwardRate

# Register ForwardRate in _QuantExt:
_QuantExt.ForwardRate_swigregister(ForwardRate)

class PiecewiseFlatForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseFlatForward_swiginit(self, _QuantExt.new_PiecewiseFlatForward(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseFlatForward_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseFlatForward_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseFlatForward_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseFlatForward

# Register PiecewiseFlatForward in _QuantExt:
_QuantExt.PiecewiseFlatForward_swigregister(PiecewiseFlatForward)

class PiecewiseLogLinearDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseLogLinearDiscount_swiginit(self, _QuantExt.new_PiecewiseLogLinearDiscount(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseLogLinearDiscount_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseLogLinearDiscount_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseLogLinearDiscount_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseLogLinearDiscount

# Register PiecewiseLogLinearDiscount in _QuantExt:
_QuantExt.PiecewiseLogLinearDiscount_swigregister(PiecewiseLogLinearDiscount)

class PiecewiseLinearForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseLinearForward_swiginit(self, _QuantExt.new_PiecewiseLinearForward(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseLinearForward_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseLinearForward_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseLinearForward_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseLinearForward

# Register PiecewiseLinearForward in _QuantExt:
_QuantExt.PiecewiseLinearForward_swigregister(PiecewiseLinearForward)

class PiecewiseLinearZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseLinearZero_swiginit(self, _QuantExt.new_PiecewiseLinearZero(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseLinearZero_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseLinearZero_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseLinearZero_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseLinearZero

# Register PiecewiseLinearZero in _QuantExt:
_QuantExt.PiecewiseLinearZero_swigregister(PiecewiseLinearZero)

class PiecewiseCubicZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseCubicZero_swiginit(self, _QuantExt.new_PiecewiseCubicZero(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseCubicZero_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseCubicZero_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseCubicZero_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseCubicZero

# Register PiecewiseCubicZero in _QuantExt:
_QuantExt.PiecewiseCubicZero_swigregister(PiecewiseCubicZero)

class PiecewiseLogCubicDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PiecewiseLogCubicDiscount_swiginit(self, _QuantExt.new_PiecewiseLogCubicDiscount(*args))

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.PiecewiseLogCubicDiscount_dates(self)

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.PiecewiseLogCubicDiscount_times(self)

    def nodes(self) -> "std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >":
        return _QuantExt.PiecewiseLogCubicDiscount_nodes(self)
    __swig_destroy__ = _QuantExt.delete_PiecewiseLogCubicDiscount

# Register PiecewiseLogCubicDiscount in _QuantExt:
_QuantExt.PiecewiseLogCubicDiscount_swigregister(PiecewiseLogCubicDiscount)

class SampledCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SampledCurve_swiginit(self, _QuantExt.new_SampledCurve(*args))

    def grid(self) -> "Array &":
        return _QuantExt.SampledCurve_grid(self)

    def values(self) -> "Array &":
        return _QuantExt.SampledCurve_values(self)

    def gridValue(self, i: "Size") -> "Real":
        return _QuantExt.SampledCurve_gridValue(self, i)

    def value(self, i: "Size") -> "Real":
        return _QuantExt.SampledCurve_value(self, i)

    def size(self) -> "Size":
        return _QuantExt.SampledCurve_size(self)

    def empty(self) -> "bool":
        return _QuantExt.SampledCurve_empty(self)

    def setGrid(self, arg2: "Array") -> "void":
        return _QuantExt.SampledCurve_setGrid(self, arg2)

    def setValues(self, arg2: "Array") -> "void":
        return _QuantExt.SampledCurve_setValues(self, arg2)

    def swap(self, arg2: "SampledCurve") -> "void":
        return _QuantExt.SampledCurve_swap(self, arg2)

    def setLogGrid(self, min: "Real", max: "Real") -> "void":
        return _QuantExt.SampledCurve_setLogGrid(self, min, max)

    def regridLogGrid(self, min: "Real", max: "Real") -> "void":
        return _QuantExt.SampledCurve_regridLogGrid(self, min, max)

    def shiftGrid(self, s: "Real") -> "void":
        return _QuantExt.SampledCurve_shiftGrid(self, s)

    def scaleGrid(self, s: "Real") -> "void":
        return _QuantExt.SampledCurve_scaleGrid(self, s)

    def regrid(self, arg2: "Array") -> "void":
        return _QuantExt.SampledCurve_regrid(self, arg2)
    __swig_destroy__ = _QuantExt.delete_SampledCurve

# Register SampledCurve in _QuantExt:
_QuantExt.SampledCurve_swigregister(SampledCurve)

class Settings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance() -> "Settings &":
        return _QuantExt.Settings_instance()

    def getEvaluationDate(self) -> "Date":
        return _QuantExt.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d: "Date") -> "void":
        return _QuantExt.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b: "bool") -> "void":
        return _QuantExt.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b: "bool") -> "void":
        return _QuantExt.Settings_includeTodaysCashFlows(self, b)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)

    __swig_destroy__ = _QuantExt.delete_Settings

# Register Settings in _QuantExt:
_QuantExt.Settings_swigregister(Settings)

def Settings_instance() -> "Settings &":
    return _QuantExt.Settings_instance()

class Statistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self) -> "Size":
        return _QuantExt.Statistics_samples(self)

    def weightSum(self) -> "Real":
        return _QuantExt.Statistics_weightSum(self)

    def mean(self) -> "Real":
        return _QuantExt.Statistics_mean(self)

    def variance(self) -> "Real":
        return _QuantExt.Statistics_variance(self)

    def standardDeviation(self) -> "Real":
        return _QuantExt.Statistics_standardDeviation(self)

    def errorEstimate(self) -> "Real":
        return _QuantExt.Statistics_errorEstimate(self)

    def skewness(self) -> "Real":
        return _QuantExt.Statistics_skewness(self)

    def kurtosis(self) -> "Real":
        return _QuantExt.Statistics_kurtosis(self)

    def min(self) -> "Real":
        return _QuantExt.Statistics_min(self)

    def max(self) -> "Real":
        return _QuantExt.Statistics_max(self)

    def reset(self) -> "void":
        return _QuantExt.Statistics_reset(self)

    def add(self, *args) -> "void":
        return _QuantExt.Statistics_add(self, *args)

    def __init__(self):
        _QuantExt.Statistics_swiginit(self, _QuantExt.new_Statistics())
    __swig_destroy__ = _QuantExt.delete_Statistics

# Register Statistics in _QuantExt:
_QuantExt.Statistics_swigregister(Statistics)

class IncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self) -> "Size":
        return _QuantExt.IncrementalStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _QuantExt.IncrementalStatistics_weightSum(self)

    def mean(self) -> "Real":
        return _QuantExt.IncrementalStatistics_mean(self)

    def variance(self) -> "Real":
        return _QuantExt.IncrementalStatistics_variance(self)

    def standardDeviation(self) -> "Real":
        return _QuantExt.IncrementalStatistics_standardDeviation(self)

    def errorEstimate(self) -> "Real":
        return _QuantExt.IncrementalStatistics_errorEstimate(self)

    def skewness(self) -> "Real":
        return _QuantExt.IncrementalStatistics_skewness(self)

    def kurtosis(self) -> "Real":
        return _QuantExt.IncrementalStatistics_kurtosis(self)

    def min(self) -> "Real":
        return _QuantExt.IncrementalStatistics_min(self)

    def max(self) -> "Real":
        return _QuantExt.IncrementalStatistics_max(self)

    def reset(self) -> "void":
        return _QuantExt.IncrementalStatistics_reset(self)

    def add(self, *args) -> "void":
        return _QuantExt.IncrementalStatistics_add(self, *args)

    def __init__(self):
        _QuantExt.IncrementalStatistics_swiginit(self, _QuantExt.new_IncrementalStatistics())
    __swig_destroy__ = _QuantExt.delete_IncrementalStatistics

# Register IncrementalStatistics in _QuantExt:
_QuantExt.IncrementalStatistics_swigregister(IncrementalStatistics)

class RiskStatistics(Statistics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def semiVariance(self) -> "Real":
        return _QuantExt.RiskStatistics_semiVariance(self)

    def semiDeviation(self) -> "Real":
        return _QuantExt.RiskStatistics_semiDeviation(self)

    def downsideVariance(self) -> "Real":
        return _QuantExt.RiskStatistics_downsideVariance(self)

    def downsideDeviation(self) -> "Real":
        return _QuantExt.RiskStatistics_downsideDeviation(self)

    def regret(self, target: "Real") -> "Real":
        return _QuantExt.RiskStatistics_regret(self, target)

    def potentialUpside(self, percentile: "Real") -> "Real":
        return _QuantExt.RiskStatistics_potentialUpside(self, percentile)

    def valueAtRisk(self, percentile: "Real") -> "Real":
        return _QuantExt.RiskStatistics_valueAtRisk(self, percentile)

    def expectedShortfall(self, percentile: "Real") -> "Real":
        return _QuantExt.RiskStatistics_expectedShortfall(self, percentile)

    def shortfall(self, target: "Real") -> "Real":
        return _QuantExt.RiskStatistics_shortfall(self, target)

    def averageShortfall(self, target: "Real") -> "Real":
        return _QuantExt.RiskStatistics_averageShortfall(self, target)

    def __init__(self):
        _QuantExt.RiskStatistics_swiginit(self, _QuantExt.new_RiskStatistics())
    __swig_destroy__ = _QuantExt.delete_RiskStatistics

# Register RiskStatistics in _QuantExt:
_QuantExt.RiskStatistics_swigregister(RiskStatistics)

class MultipleStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _QuantExt.MultipleStatistics_swiginit(self, _QuantExt.new_MultipleStatistics(dimension))

    def size(self) -> "Size":
        return _QuantExt.MultipleStatistics_size(self)

    def samples(self) -> "Size":
        return _QuantExt.MultipleStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _QuantExt.MultipleStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _QuantExt.MultipleStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _QuantExt.MultipleStatistics_correlation(self)

    def reset(self) -> "void":
        return _QuantExt.MultipleStatistics_reset(self)

    def add(self, *args) -> "void":
        return _QuantExt.MultipleStatistics_add(self, *args)
    __swig_destroy__ = _QuantExt.delete_MultipleStatistics

# Register MultipleStatistics in _QuantExt:
_QuantExt.MultipleStatistics_swigregister(MultipleStatistics)

class SequenceStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _QuantExt.SequenceStatistics_swiginit(self, _QuantExt.new_SequenceStatistics(dimension))

    def size(self) -> "Size":
        return _QuantExt.SequenceStatistics_size(self)

    def samples(self) -> "Size":
        return _QuantExt.SequenceStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _QuantExt.SequenceStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.SequenceStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _QuantExt.SequenceStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _QuantExt.SequenceStatistics_correlation(self)

    def reset(self) -> "void":
        return _QuantExt.SequenceStatistics_reset(self)

    def add(self, *args) -> "void":
        return _QuantExt.SequenceStatistics_add(self, *args)
    __swig_destroy__ = _QuantExt.delete_SequenceStatistics

# Register SequenceStatistics in _QuantExt:
_QuantExt.SequenceStatistics_swigregister(SequenceStatistics)

class MultipleIncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension: "Size"):
        _QuantExt.MultipleIncrementalStatistics_swiginit(self, _QuantExt.new_MultipleIncrementalStatistics(dimension))

    def size(self) -> "Size":
        return _QuantExt.MultipleIncrementalStatistics_size(self)

    def samples(self) -> "Size":
        return _QuantExt.MultipleIncrementalStatistics_samples(self)

    def weightSum(self) -> "Real":
        return _QuantExt.MultipleIncrementalStatistics_weightSum(self)

    def mean(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_mean(self)

    def variance(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_variance(self)

    def standardDeviation(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_standardDeviation(self)

    def errorEstimate(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_errorEstimate(self)

    def skewness(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_skewness(self)

    def kurtosis(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_kurtosis(self)

    def min(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_min(self)

    def max(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.MultipleIncrementalStatistics_max(self)

    def covariance(self) -> "Matrix":
        return _QuantExt.MultipleIncrementalStatistics_covariance(self)

    def correlation(self) -> "Matrix":
        return _QuantExt.MultipleIncrementalStatistics_correlation(self)

    def reset(self) -> "void":
        return _QuantExt.MultipleIncrementalStatistics_reset(self)

    def add(self, *args) -> "void":
        return _QuantExt.MultipleIncrementalStatistics_add(self, *args)
    __swig_destroy__ = _QuantExt.delete_MultipleIncrementalStatistics

# Register MultipleIncrementalStatistics in _QuantExt:
_QuantExt.MultipleIncrementalStatistics_swigregister(MultipleIncrementalStatistics)

class CapFloorTermVolatilityStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "CapFloorTermVolatilityStructure *":
        return _QuantExt.CapFloorTermVolatilityStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.CapFloorTermVolatilityStructure_asObservable(self)

    def __init__(self):
        _QuantExt.CapFloorTermVolatilityStructure_swiginit(self, _QuantExt.new_CapFloorTermVolatilityStructure())
    __swig_destroy__ = _QuantExt.delete_CapFloorTermVolatilityStructure

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.CapFloorTermVolatilityStructure_volatility(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.CapFloorTermVolatilityStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.CapFloorTermVolatilityStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructure_allowsExtrapolation(self)

# Register CapFloorTermVolatilityStructure in _QuantExt:
_QuantExt.CapFloorTermVolatilityStructure_swigregister(CapFloorTermVolatilityStructure)

class CapFloorTermVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CapFloorTermVolatilityStructureHandle_swiginit(self, _QuantExt.new_CapFloorTermVolatilityStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< CapFloorTermVolatilityStructure >":
        return _QuantExt.CapFloorTermVolatilityStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.CapFloorTermVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_CapFloorTermVolatilityStructureHandle

    def volatility(self, *args) -> "Volatility":
        return _QuantExt.CapFloorTermVolatilityStructureHandle_volatility(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.CapFloorTermVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.CapFloorTermVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.CapFloorTermVolatilityStructureHandle_allowsExtrapolation(self)

# Register CapFloorTermVolatilityStructureHandle in _QuantExt:
_QuantExt.CapFloorTermVolatilityStructureHandle_swigregister(CapFloorTermVolatilityStructureHandle)

class RelinkableCapFloorTermVolatilityStructureHandle(CapFloorTermVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkableCapFloorTermVolatilityStructureHandle_swiginit(self, _QuantExt.new_RelinkableCapFloorTermVolatilityStructureHandle(*args))

    def linkTo(self, arg2: "CapFloorTermVolatilityStructure") -> "void":
        return _QuantExt.RelinkableCapFloorTermVolatilityStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkableCapFloorTermVolatilityStructureHandle

# Register RelinkableCapFloorTermVolatilityStructureHandle in _QuantExt:
_QuantExt.RelinkableCapFloorTermVolatilityStructureHandle_swigregister(RelinkableCapFloorTermVolatilityStructureHandle)

class CapFloorTermVolCurve(CapFloorTermVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CapFloorTermVolCurve_swiginit(self, _QuantExt.new_CapFloorTermVolCurve(*args))
    __swig_destroy__ = _QuantExt.delete_CapFloorTermVolCurve

# Register CapFloorTermVolCurve in _QuantExt:
_QuantExt.CapFloorTermVolCurve_swigregister(CapFloorTermVolCurve)

class CapFloorTermVolSurface(CapFloorTermVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CapFloorTermVolSurface_swiginit(self, _QuantExt.new_CapFloorTermVolSurface(*args))
    __swig_destroy__ = _QuantExt.delete_CapFloorTermVolSurface

# Register CapFloorTermVolSurface in _QuantExt:
_QuantExt.CapFloorTermVolSurface_swigregister(CapFloorTermVolSurface)

class StrippedOptionletBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "StrippedOptionletBase *":
        return _QuantExt.StrippedOptionletBase___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.StrippedOptionletBase___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.StrippedOptionletBase___bool__(self)

    def __init__(self):
        _QuantExt.StrippedOptionletBase_swiginit(self, _QuantExt.new_StrippedOptionletBase())
    __swig_destroy__ = _QuantExt.delete_StrippedOptionletBase

    def optionletStrikes(self, i: "Size") -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.StrippedOptionletBase_optionletStrikes(self, i)

    def optionletVolatilities(self, i: "Size") -> "std::vector< Volatility,std::allocator< Volatility > > const &":
        return _QuantExt.StrippedOptionletBase_optionletVolatilities(self, i)

    def optionletFixingDates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.StrippedOptionletBase_optionletFixingDates(self)

    def optionletFixingTimes(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.StrippedOptionletBase_optionletFixingTimes(self)

    def optionletMaturities(self) -> "Size":
        return _QuantExt.StrippedOptionletBase_optionletMaturities(self)

    def atmOptionletRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.StrippedOptionletBase_atmOptionletRates(self)

    def dayCounter(self) -> "DayCounter":
        return _QuantExt.StrippedOptionletBase_dayCounter(self)

    def calendar(self) -> "Calendar":
        return _QuantExt.StrippedOptionletBase_calendar(self)

    def settlementDays(self) -> "Natural":
        return _QuantExt.StrippedOptionletBase_settlementDays(self)

    def businessDayConvention(self) -> "BusinessDayConvention":
        return _QuantExt.StrippedOptionletBase_businessDayConvention(self)

# Register StrippedOptionletBase in _QuantExt:
_QuantExt.StrippedOptionletBase_swigregister(StrippedOptionletBase)

class OptionletStripper1(StrippedOptionletBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _QuantExt.OptionletStripper1_swiginit(self, _QuantExt.new_OptionletStripper1(*args, **kwargs))

    def capFloorPrices(self) -> "Matrix const &":
        return _QuantExt.OptionletStripper1_capFloorPrices(self)

    def capFloorVolatilities(self) -> "Matrix const &":
        return _QuantExt.OptionletStripper1_capFloorVolatilities(self)

    def optionletPrices(self) -> "Matrix const &":
        return _QuantExt.OptionletStripper1_optionletPrices(self)

    def switchStrike(self) -> "Rate":
        return _QuantExt.OptionletStripper1_switchStrike(self)
    __swig_destroy__ = _QuantExt.delete_OptionletStripper1

# Register OptionletStripper1 in _QuantExt:
_QuantExt.OptionletStripper1_swigregister(OptionletStripper1)

class StrippedOptionletAdapter(OptionletVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stripper: "StrippedOptionletBase"):
        _QuantExt.StrippedOptionletAdapter_swiginit(self, _QuantExt.new_StrippedOptionletAdapter(stripper))
    __swig_destroy__ = _QuantExt.delete_StrippedOptionletAdapter

# Register StrippedOptionletAdapter in _QuantExt:
_QuantExt.StrippedOptionletAdapter_swigregister(StrippedOptionletAdapter)

class Settlement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Physical = _QuantExt.Settlement_Physical
    Cash = _QuantExt.Settlement_Cash

    def __init__(self):
        _QuantExt.Settlement_swiginit(self, _QuantExt.new_Settlement())
    __swig_destroy__ = _QuantExt.delete_Settlement

# Register Settlement in _QuantExt:
_QuantExt.Settlement_swigregister(Settlement)

class Swaption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Swaption_swiginit(self, _QuantExt.new_Swaption(*args))
    __swig_destroy__ = _QuantExt.delete_Swaption

# Register Swaption in _QuantExt:
_QuantExt.Swaption_swigregister(Swaption)

class NonstandardSwaption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NonstandardSwaption_swiginit(self, _QuantExt.new_NonstandardSwaption(*args))

    def calibrationBasket(self, standardSwapBase: "Index", swaptionVolatility: "SwaptionVolatilityStructure", typeStr: "std::string") -> "std::vector< boost::shared_ptr< CalibrationHelperBase >,std::allocator< boost::shared_ptr< CalibrationHelperBase > > >":
        return _QuantExt.NonstandardSwaption_calibrationBasket(self, standardSwapBase, swaptionVolatility, typeStr)

    def underlyingSwap(self) -> "NonstandardSwapPtr const":
        return _QuantExt.NonstandardSwaption_underlyingSwap(self)

    def probabilities(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.NonstandardSwaption_probabilities(self)
    __swig_destroy__ = _QuantExt.delete_NonstandardSwaption

# Register NonstandardSwaption in _QuantExt:
_QuantExt.NonstandardSwaption_swigregister(NonstandardSwaption)

class FloatFloatSwaption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, simpleSwap: "FloatFloatSwap", exercise: "Exercise"):
        _QuantExt.FloatFloatSwaption_swiginit(self, _QuantExt.new_FloatFloatSwaption(simpleSwap, exercise))

    def calibrationBasket(self, standardSwapBase: "Index", swaptionVolatility: "SwaptionVolatilityStructure", typeStr: "std::string") -> "std::vector< boost::shared_ptr< CalibrationHelperBase >,std::allocator< boost::shared_ptr< CalibrationHelperBase > > >":
        return _QuantExt.FloatFloatSwaption_calibrationBasket(self, standardSwapBase, swaptionVolatility, typeStr)

    def underlyingValue(self) -> "Real":
        return _QuantExt.FloatFloatSwaption_underlyingValue(self)

    def underlyingSwap(self) -> "FloatFloatSwapPtr const":
        return _QuantExt.FloatFloatSwaption_underlyingSwap(self)

    def probabilities(self) -> "std::vector< Real,std::allocator< Real > >":
        return _QuantExt.FloatFloatSwaption_probabilities(self)
    __swig_destroy__ = _QuantExt.delete_FloatFloatSwaption

# Register FloatFloatSwaption in _QuantExt:
_QuantExt.FloatFloatSwaption_swigregister(FloatFloatSwaption)

class BlackSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BlackSwaptionEngine_swiginit(self, _QuantExt.new_BlackSwaptionEngine(*args))

    def vega(self) -> "Real":
        return _QuantExt.BlackSwaptionEngine_vega(self)
    __swig_destroy__ = _QuantExt.delete_BlackSwaptionEngine

# Register BlackSwaptionEngine in _QuantExt:
_QuantExt.BlackSwaptionEngine_swigregister(BlackSwaptionEngine)

class BachelierSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BachelierSwaptionEngine_swiginit(self, _QuantExt.new_BachelierSwaptionEngine(*args))
    __swig_destroy__ = _QuantExt.delete_BachelierSwaptionEngine

# Register BachelierSwaptionEngine in _QuantExt:
_QuantExt.BachelierSwaptionEngine_swigregister(BachelierSwaptionEngine)


def enableTracing() -> "void":
    return _QuantExt.enableTracing()

def disableTracing() -> "void":
    return _QuantExt.disableTracing()
class ConstantEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size: "Size"):
        _QuantExt.ConstantEstimator_swiginit(self, _QuantExt.new_ConstantEstimator(size))

    def calculate(self, arg2: "RealTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.ConstantEstimator_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_ConstantEstimator

# Register ConstantEstimator in _QuantExt:
_QuantExt.ConstantEstimator_swigregister(ConstantEstimator)

class ParkinsonSigma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real"):
        _QuantExt.ParkinsonSigma_swiginit(self, _QuantExt.new_ParkinsonSigma(yearFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.ParkinsonSigma_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_ParkinsonSigma

# Register ParkinsonSigma in _QuantExt:
_QuantExt.ParkinsonSigma_swigregister(ParkinsonSigma)

class GarmanKlassSigma1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real", marketOpenFraction: "Real"):
        _QuantExt.GarmanKlassSigma1_swiginit(self, _QuantExt.new_GarmanKlassSigma1(yearFraction, marketOpenFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.GarmanKlassSigma1_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_GarmanKlassSigma1

# Register GarmanKlassSigma1 in _QuantExt:
_QuantExt.GarmanKlassSigma1_swigregister(GarmanKlassSigma1)

class GarmanKlassSigma3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real", marketOpenFraction: "Real"):
        _QuantExt.GarmanKlassSigma3_swiginit(self, _QuantExt.new_GarmanKlassSigma3(yearFraction, marketOpenFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.GarmanKlassSigma3_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_GarmanKlassSigma3

# Register GarmanKlassSigma3 in _QuantExt:
_QuantExt.GarmanKlassSigma3_swigregister(GarmanKlassSigma3)

class GarmanKlassSigma4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real"):
        _QuantExt.GarmanKlassSigma4_swiginit(self, _QuantExt.new_GarmanKlassSigma4(yearFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.GarmanKlassSigma4_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_GarmanKlassSigma4

# Register GarmanKlassSigma4 in _QuantExt:
_QuantExt.GarmanKlassSigma4_swigregister(GarmanKlassSigma4)

class GarmanKlassSigma5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real"):
        _QuantExt.GarmanKlassSigma5_swiginit(self, _QuantExt.new_GarmanKlassSigma5(yearFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.GarmanKlassSigma5_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_GarmanKlassSigma5

# Register GarmanKlassSigma5 in _QuantExt:
_QuantExt.GarmanKlassSigma5_swigregister(GarmanKlassSigma5)

class GarmanKlassSigma6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction: "Real", marketOpenFraction: "Real"):
        _QuantExt.GarmanKlassSigma6_swiginit(self, _QuantExt.new_GarmanKlassSigma6(yearFraction, marketOpenFraction))

    def calculate(self, arg2: "IntervalPriceTimeSeries") -> "TimeSeries< Volatility >":
        return _QuantExt.GarmanKlassSigma6_calculate(self, arg2)
    __swig_destroy__ = _QuantExt.delete_GarmanKlassSigma6

# Register GarmanKlassSigma6 in _QuantExt:
_QuantExt.GarmanKlassSigma6_swigregister(GarmanKlassSigma6)

class ZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ZeroCurve_swiginit(self, _QuantExt.new_ZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.ZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.ZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.ZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.ZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.ZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_ZeroCurve

# Register ZeroCurve in _QuantExt:
_QuantExt.ZeroCurve_swigregister(ZeroCurve)

class LogLinearZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LogLinearZeroCurve_swiginit(self, _QuantExt.new_LogLinearZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.LogLinearZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.LogLinearZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.LogLinearZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.LogLinearZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.LogLinearZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_LogLinearZeroCurve

# Register LogLinearZeroCurve in _QuantExt:
_QuantExt.LogLinearZeroCurve_swigregister(LogLinearZeroCurve)

class CubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CubicZeroCurve_swiginit(self, _QuantExt.new_CubicZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.CubicZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.CubicZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.CubicZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.CubicZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.CubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_CubicZeroCurve

# Register CubicZeroCurve in _QuantExt:
_QuantExt.CubicZeroCurve_swigregister(CubicZeroCurve)

class LogCubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LogCubicZeroCurve_swiginit(self, _QuantExt.new_LogCubicZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.LogCubicZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.LogCubicZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.LogCubicZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.LogCubicZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.LogCubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_LogCubicZeroCurve

# Register LogCubicZeroCurve in _QuantExt:
_QuantExt.LogCubicZeroCurve_swigregister(LogCubicZeroCurve)

class ForwardFlatZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ForwardFlatZeroCurve_swiginit(self, _QuantExt.new_ForwardFlatZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.ForwardFlatZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.ForwardFlatZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.ForwardFlatZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.ForwardFlatZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.ForwardFlatZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_ForwardFlatZeroCurve

# Register ForwardFlatZeroCurve in _QuantExt:
_QuantExt.ForwardFlatZeroCurve_swigregister(ForwardFlatZeroCurve)

class BackwardFlatZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BackwardFlatZeroCurve_swiginit(self, _QuantExt.new_BackwardFlatZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.BackwardFlatZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.BackwardFlatZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.BackwardFlatZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.BackwardFlatZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.BackwardFlatZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_BackwardFlatZeroCurve

# Register BackwardFlatZeroCurve in _QuantExt:
_QuantExt.BackwardFlatZeroCurve_swigregister(BackwardFlatZeroCurve)

class MonotonicCubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.MonotonicCubicZeroCurve_swiginit(self, _QuantExt.new_MonotonicCubicZeroCurve(*args))

    def times(self) -> "std::vector< Time,std::allocator< Time > > const &":
        return _QuantExt.MonotonicCubicZeroCurve_times(self)

    def data(self) -> "std::vector< Real,std::allocator< Real > > const &":
        return _QuantExt.MonotonicCubicZeroCurve_data(self)

    def dates(self) -> "std::vector< Date,std::allocator< Date > > const &":
        return _QuantExt.MonotonicCubicZeroCurve_dates(self)

    def zeroRates(self) -> "std::vector< Rate,std::allocator< Rate > > const &":
        return _QuantExt.MonotonicCubicZeroCurve_zeroRates(self)

    def nodes(self) -> "std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >":
        return _QuantExt.MonotonicCubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantExt.delete_MonotonicCubicZeroCurve

# Register MonotonicCubicZeroCurve in _QuantExt:
_QuantExt.MonotonicCubicZeroCurve_swigregister(MonotonicCubicZeroCurve)


def as_zerocurve(curve: "YieldTermStructure") -> "ZeroCurvePtr":
    return _QuantExt.as_zerocurve(curve)
class Forward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forwardValue(self) -> "Real":
        return _QuantExt.Forward_forwardValue(self)

    def impliedYield(self, underlyingSpotValue: "Real", forwardValue: "Real", settlementDate: "Date", compoundingConvention: "Compounding", dayCounter: "DayCounter") -> "InterestRate":
        return _QuantExt.Forward_impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter)

    def __init__(self):
        _QuantExt.Forward_swiginit(self, _QuantExt.new_Forward())
    __swig_destroy__ = _QuantExt.delete_Forward

# Register Forward in _QuantExt:
_QuantExt.Forward_swigregister(Forward)

class FixedRateBondForward(Forward):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FixedRateBondForward_swiginit(self, _QuantExt.new_FixedRateBondForward(*args))

    def forwardPrice(self) -> "Real":
        return _QuantExt.FixedRateBondForward_forwardPrice(self)

    def cleanForwardPrice(self) -> "Real":
        return _QuantExt.FixedRateBondForward_cleanForwardPrice(self)

    def spotIncome(self, incomeDiscountCurve: "YieldTermStructureHandle") -> "Real":
        return _QuantExt.FixedRateBondForward_spotIncome(self, incomeDiscountCurve)

    def spotValue(self) -> "Real":
        return _QuantExt.FixedRateBondForward_spotValue(self)
    __swig_destroy__ = _QuantExt.delete_FixedRateBondForward

# Register FixedRateBondForward in _QuantExt:
_QuantExt.FixedRateBondForward_swigregister(FixedRateBondForward)

class Chile(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Chile_swiginit(self, _QuantExt.new_Chile())
    __swig_destroy__ = _QuantExt.delete_Chile

# Register Chile in _QuantExt:
_QuantExt.Chile_swigregister(Chile)

class FxIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.FxIndex_swiginit(self, _QuantExt.new_FxIndex(*args))

    def familyName(self) -> "std::string":
        return _QuantExt.FxIndex_familyName(self)

    def fixingDays(self) -> "QuantLib::Natural":
        return _QuantExt.FxIndex_fixingDays(self)

    def fixingDate(self, valueDate: "Date") -> "QuantLib::Date":
        return _QuantExt.FxIndex_fixingDate(self, valueDate)

    def sourceCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.FxIndex_sourceCurrency(self)

    def targetCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.FxIndex_targetCurrency(self)

    def valueDate(self, fixingDate: "Date") -> "QuantLib::Date":
        return _QuantExt.FxIndex_valueDate(self, fixingDate)

    def forecastFixing(self, fixingDate: "Date") -> "QuantLib::Real":
        return _QuantExt.FxIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate: "Date") -> "QuantLib::Real":
        return _QuantExt.FxIndex_pastFixing(self, fixingDate)
    __swig_destroy__ = _QuantExt.delete_FxIndex

# Register FxIndex in _QuantExt:
_QuantExt.FxIndex_swigregister(FxIndex)

class BMAIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BMAIndex_swiginit(self, _QuantExt.new_BMAIndex(*args))

    def name(self) -> "std::string":
        return _QuantExt.BMAIndex_name(self)

    def isValidFixingDate(self, fixingDate: "Date") -> "bool":
        return _QuantExt.BMAIndex_isValidFixingDate(self, fixingDate)

    def forwardingTermStructure(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure >":
        return _QuantExt.BMAIndex_forwardingTermStructure(self)

    def maturityDate(self, valueDate: "Date") -> "QuantLib::Date":
        return _QuantExt.BMAIndex_maturityDate(self, valueDate)

    def fixingSchedule(self, start: "Date", end: "Date") -> "QuantLib::Schedule":
        return _QuantExt.BMAIndex_fixingSchedule(self, start, end)
    __swig_destroy__ = _QuantExt.delete_BMAIndex

# Register BMAIndex in _QuantExt:
_QuantExt.BMAIndex_swigregister(BMAIndex)

class BMAIndexWrapper(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bma: "BMAIndex"):
        _QuantExt.BMAIndexWrapper_swiginit(self, _QuantExt.new_BMAIndexWrapper(bma))

    def name(self) -> "std::string":
        return _QuantExt.BMAIndexWrapper_name(self)

    def isValidFixingDate(self, fixingDate: "Date") -> "bool":
        return _QuantExt.BMAIndexWrapper_isValidFixingDate(self, fixingDate)

    def forwardingTermStructure(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure >":
        return _QuantExt.BMAIndexWrapper_forwardingTermStructure(self)

    def maturityDate(self, valueDate: "Date") -> "QuantLib::Date":
        return _QuantExt.BMAIndexWrapper_maturityDate(self, valueDate)

    def fixingSchedule(self, start: "Date", end: "Date") -> "QuantLib::Schedule":
        return _QuantExt.BMAIndexWrapper_fixingSchedule(self, start, end)

    def bma(self) -> "BMAIndexPtr":
        return _QuantExt.BMAIndexWrapper_bma(self)
    __swig_destroy__ = _QuantExt.delete_BMAIndexWrapper

# Register BMAIndexWrapper in _QuantExt:
_QuantExt.BMAIndexWrapper_swigregister(BMAIndexWrapper)

class AUDbbsw(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AUDbbsw_swiginit(self, _QuantExt.new_AUDbbsw(*args))
    __swig_destroy__ = _QuantExt.delete_AUDbbsw

# Register AUDbbsw in _QuantExt:
_QuantExt.AUDbbsw_swigregister(AUDbbsw)

class CZKPribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CZKPribor_swiginit(self, _QuantExt.new_CZKPribor(*args))
    __swig_destroy__ = _QuantExt.delete_CZKPribor

# Register CZKPribor in _QuantExt:
_QuantExt.CZKPribor_swigregister(CZKPribor)

class DEMLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DEMLibor_swiginit(self, _QuantExt.new_DEMLibor(*args))
    __swig_destroy__ = _QuantExt.delete_DEMLibor

# Register DEMLibor in _QuantExt:
_QuantExt.DEMLibor_swigregister(DEMLibor)

class DKKCibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DKKCibor_swiginit(self, _QuantExt.new_DKKCibor(*args))
    __swig_destroy__ = _QuantExt.delete_DKKCibor

# Register DKKCibor in _QuantExt:
_QuantExt.DKKCibor_swigregister(DKKCibor)

class HKDHibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.HKDHibor_swiginit(self, _QuantExt.new_HKDHibor(*args))
    __swig_destroy__ = _QuantExt.delete_HKDHibor

# Register HKDHibor in _QuantExt:
_QuantExt.HKDHibor_swigregister(HKDHibor)

class HUFBubor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.HUFBubor_swiginit(self, _QuantExt.new_HUFBubor(*args))
    __swig_destroy__ = _QuantExt.delete_HUFBubor

# Register HUFBubor in _QuantExt:
_QuantExt.HUFBubor_swigregister(HUFBubor)

class IDRIdrfix(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.IDRIdrfix_swiginit(self, _QuantExt.new_IDRIdrfix(*args))
    __swig_destroy__ = _QuantExt.delete_IDRIdrfix

# Register IDRIdrfix in _QuantExt:
_QuantExt.IDRIdrfix_swigregister(IDRIdrfix)

class INRMifor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.INRMifor_swiginit(self, _QuantExt.new_INRMifor(*args))
    __swig_destroy__ = _QuantExt.delete_INRMifor

# Register INRMifor in _QuantExt:
_QuantExt.INRMifor_swigregister(INRMifor)

class KRWKoribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.KRWKoribor_swiginit(self, _QuantExt.new_KRWKoribor(*args))
    __swig_destroy__ = _QuantExt.delete_KRWKoribor

# Register KRWKoribor in _QuantExt:
_QuantExt.KRWKoribor_swigregister(KRWKoribor)

class MXNTiie(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.MXNTiie_swiginit(self, _QuantExt.new_MXNTiie(*args))
    __swig_destroy__ = _QuantExt.delete_MXNTiie

# Register MXNTiie in _QuantExt:
_QuantExt.MXNTiie_swigregister(MXNTiie)

class MYRKlibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.MYRKlibor_swiginit(self, _QuantExt.new_MYRKlibor(*args))
    __swig_destroy__ = _QuantExt.delete_MYRKlibor

# Register MYRKlibor in _QuantExt:
_QuantExt.MYRKlibor_swigregister(MYRKlibor)

class NOKNibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NOKNibor_swiginit(self, _QuantExt.new_NOKNibor(*args))
    __swig_destroy__ = _QuantExt.delete_NOKNibor

# Register NOKNibor in _QuantExt:
_QuantExt.NOKNibor_swigregister(NOKNibor)

class NZDBKBM(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.NZDBKBM_swiginit(self, _QuantExt.new_NZDBKBM(*args))
    __swig_destroy__ = _QuantExt.delete_NZDBKBM

# Register NZDBKBM in _QuantExt:
_QuantExt.NZDBKBM_swigregister(NZDBKBM)

class PHPPhiref(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PHPPhiref_swiginit(self, _QuantExt.new_PHPPhiref(*args))
    __swig_destroy__ = _QuantExt.delete_PHPPhiref

# Register PHPPhiref in _QuantExt:
_QuantExt.PHPPhiref_swigregister(PHPPhiref)

class PLNWibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PLNWibor_swiginit(self, _QuantExt.new_PLNWibor(*args))
    __swig_destroy__ = _QuantExt.delete_PLNWibor

# Register PLNWibor in _QuantExt:
_QuantExt.PLNWibor_swigregister(PLNWibor)

class RUBMosprime(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RUBMosprime_swiginit(self, _QuantExt.new_RUBMosprime(*args))
    __swig_destroy__ = _QuantExt.delete_RUBMosprime

# Register RUBMosprime in _QuantExt:
_QuantExt.RUBMosprime_swigregister(RUBMosprime)

class SEKStibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SEKStibor_swiginit(self, _QuantExt.new_SEKStibor(*args))
    __swig_destroy__ = _QuantExt.delete_SEKStibor

# Register SEKStibor in _QuantExt:
_QuantExt.SEKStibor_swigregister(SEKStibor)

class SGDSibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SGDSibor_swiginit(self, _QuantExt.new_SGDSibor(*args))
    __swig_destroy__ = _QuantExt.delete_SGDSibor

# Register SGDSibor in _QuantExt:
_QuantExt.SGDSibor_swigregister(SGDSibor)

class SGDSor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SGDSor_swiginit(self, _QuantExt.new_SGDSor(*args))
    __swig_destroy__ = _QuantExt.delete_SGDSor

# Register SGDSor in _QuantExt:
_QuantExt.SGDSor_swigregister(SGDSor)

class SKKBribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SKKBribor_swiginit(self, _QuantExt.new_SKKBribor(*args))
    __swig_destroy__ = _QuantExt.delete_SKKBribor

# Register SKKBribor in _QuantExt:
_QuantExt.SKKBribor_swigregister(SKKBribor)

class THBBibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.THBBibor_swiginit(self, _QuantExt.new_THBBibor(*args))
    __swig_destroy__ = _QuantExt.delete_THBBibor

# Register THBBibor in _QuantExt:
_QuantExt.THBBibor_swigregister(THBBibor)

class TWDTaibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TWDTaibor_swiginit(self, _QuantExt.new_TWDTaibor(*args))
    __swig_destroy__ = _QuantExt.delete_TWDTaibor

# Register TWDTaibor in _QuantExt:
_QuantExt.TWDTaibor_swigregister(TWDTaibor)

class BRLCdi(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BRLCdi_swiginit(self, _QuantExt.new_BRLCdi(*args))
    __swig_destroy__ = _QuantExt.delete_BRLCdi

# Register BRLCdi in _QuantExt:
_QuantExt.BRLCdi_swigregister(BRLCdi)

class CHFTois(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CHFTois_swiginit(self, _QuantExt.new_CHFTois(*args))
    __swig_destroy__ = _QuantExt.delete_CHFTois

# Register CHFTois in _QuantExt:
_QuantExt.CHFTois_swigregister(CHFTois)

class CLPCamara(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CLPCamara_swiginit(self, _QuantExt.new_CLPCamara(*args))
    __swig_destroy__ = _QuantExt.delete_CLPCamara

# Register CLPCamara in _QuantExt:
_QuantExt.CLPCamara_swigregister(CLPCamara)

class COPIbr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.COPIbr_swiginit(self, _QuantExt.new_COPIbr(*args))
    __swig_destroy__ = _QuantExt.delete_COPIbr

# Register COPIbr in _QuantExt:
_QuantExt.COPIbr_swigregister(COPIbr)

class CORRA(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CORRA_swiginit(self, _QuantExt.new_CORRA(*args))
    __swig_destroy__ = _QuantExt.delete_CORRA

# Register CORRA in _QuantExt:
_QuantExt.CORRA_swigregister(CORRA)

class DKKOis(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DKKOis_swiginit(self, _QuantExt.new_DKKOis(*args))
    __swig_destroy__ = _QuantExt.delete_DKKOis

# Register DKKOis in _QuantExt:
_QuantExt.DKKOis_swigregister(DKKOis)

class SEKSior(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SEKSior_swiginit(self, _QuantExt.new_SEKSior(*args))
    __swig_destroy__ = _QuantExt.delete_SEKSior

# Register SEKSior in _QuantExt:
_QuantExt.SEKSior_swigregister(SEKSior)

class Tonar(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Tonar_swiginit(self, _QuantExt.new_Tonar(*args))
    __swig_destroy__ = _QuantExt.delete_Tonar

# Register Tonar in _QuantExt:
_QuantExt.Tonar_swigregister(Tonar)

class FXLinkedCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cashFlowDate: "Date", fixingDate: "Date", foreignAmount: "QuantLib::Real", fxIndex: "FxIndex", invertIndex: "bool"=False):
        _QuantExt.FXLinkedCashFlow_swiginit(self, _QuantExt.new_FXLinkedCashFlow(cashFlowDate, fixingDate, foreignAmount, fxIndex, invertIndex))

    def fxFixingDate(self) -> "QuantLib::Date":
        return _QuantExt.FXLinkedCashFlow_fxFixingDate(self)

    def fxIndex(self) -> "FxIndexPtr const":
        return _QuantExt.FXLinkedCashFlow_fxIndex(self)

    def invertFxIndex(self) -> "bool":
        return _QuantExt.FXLinkedCashFlow_invertFxIndex(self)

    def fxRate(self) -> "QuantLib::Real":
        return _QuantExt.FXLinkedCashFlow_fxRate(self)
    __swig_destroy__ = _QuantExt.delete_FXLinkedCashFlow

# Register FXLinkedCashFlow in _QuantExt:
_QuantExt.FXLinkedCashFlow_swigregister(FXLinkedCashFlow)

class FloatingRateFXLinkedNotionalCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fxFixingDate: "Date", foreignAmount: "QuantLib::Real", fxIndex: "FxIndex", invertFxIndex: "bool", underlying: "FloatingRateCoupon"):
        _QuantExt.FloatingRateFXLinkedNotionalCoupon_swiginit(self, _QuantExt.new_FloatingRateFXLinkedNotionalCoupon(fxFixingDate, foreignAmount, fxIndex, invertFxIndex, underlying))

    def nominal(self) -> "Real":
        return _QuantExt.FloatingRateFXLinkedNotionalCoupon_nominal(self)

    def rate(self) -> "Rate":
        return _QuantExt.FloatingRateFXLinkedNotionalCoupon_rate(self)

    def indexFixing(self) -> "Rate":
        return _QuantExt.FloatingRateFXLinkedNotionalCoupon_indexFixing(self)

    def setPricer(self, p: "FloatingRateCouponPricer") -> "void":
        return _QuantExt.FloatingRateFXLinkedNotionalCoupon_setPricer(self, p)
    __swig_destroy__ = _QuantExt.delete_FloatingRateFXLinkedNotionalCoupon

# Register FloatingRateFXLinkedNotionalCoupon in _QuantExt:
_QuantExt.FloatingRateFXLinkedNotionalCoupon_swigregister(FloatingRateFXLinkedNotionalCoupon)

class PriceTermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __deref__(self) -> "PriceTermStructure *":
        return _QuantExt.PriceTermStructure___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.PriceTermStructure___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.PriceTermStructure___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.PriceTermStructure_asObservable(self)

    def __init__(self):
        _QuantExt.PriceTermStructure_swiginit(self, _QuantExt.new_PriceTermStructure())
    __swig_destroy__ = _QuantExt.delete_PriceTermStructure

    def price(self, *args) -> "QuantLib::Real":
        return _QuantExt.PriceTermStructure_price(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.PriceTermStructure_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.PriceTermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.PriceTermStructure_allowsExtrapolation(self)

# Register PriceTermStructure in _QuantExt:
_QuantExt.PriceTermStructure_swigregister(PriceTermStructure)

class PriceTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PriceTermStructureHandle_swiginit(self, _QuantExt.new_PriceTermStructureHandle(*args))

    def __deref__(self) -> "boost::shared_ptr< PriceTermStructure >":
        return _QuantExt.PriceTermStructureHandle___deref__(self)

    def __nonzero__(self) -> "bool":
        return _QuantExt.PriceTermStructureHandle___nonzero__(self)

    def __bool__(self) -> "bool":
        return _QuantExt.PriceTermStructureHandle___bool__(self)

    def asObservable(self) -> "boost::shared_ptr< Observable >":
        return _QuantExt.PriceTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantExt.delete_PriceTermStructureHandle

    def price(self, *args) -> "QuantLib::Real":
        return _QuantExt.PriceTermStructureHandle_price(self, *args)

    def enableExtrapolation(self) -> "void":
        return _QuantExt.PriceTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self) -> "void":
        return _QuantExt.PriceTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self) -> "bool":
        return _QuantExt.PriceTermStructureHandle_allowsExtrapolation(self)

# Register PriceTermStructureHandle in _QuantExt:
_QuantExt.PriceTermStructureHandle_swigregister(PriceTermStructureHandle)

class RelinkablePriceTermStructureHandle(PriceTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.RelinkablePriceTermStructureHandle_swiginit(self, _QuantExt.new_RelinkablePriceTermStructureHandle(*args))

    def linkTo(self, arg2: "PriceTermStructure") -> "void":
        return _QuantExt.RelinkablePriceTermStructureHandle_linkTo(self, arg2)
    __swig_destroy__ = _QuantExt.delete_RelinkablePriceTermStructureHandle

# Register RelinkablePriceTermStructureHandle in _QuantExt:
_QuantExt.RelinkablePriceTermStructureHandle_swigregister(RelinkablePriceTermStructureHandle)

class LinearInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LinearInterpolatedPriceCurve_swiginit(self, _QuantExt.new_LinearInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.LinearInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.LinearInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_LinearInterpolatedPriceCurve

# Register LinearInterpolatedPriceCurve in _QuantExt:
_QuantExt.LinearInterpolatedPriceCurve_swigregister(LinearInterpolatedPriceCurve)

class BackwardFlatInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BackwardFlatInterpolatedPriceCurve_swiginit(self, _QuantExt.new_BackwardFlatInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.BackwardFlatInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.BackwardFlatInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_BackwardFlatInterpolatedPriceCurve

# Register BackwardFlatInterpolatedPriceCurve in _QuantExt:
_QuantExt.BackwardFlatInterpolatedPriceCurve_swigregister(BackwardFlatInterpolatedPriceCurve)

class LogLinearInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.LogLinearInterpolatedPriceCurve_swiginit(self, _QuantExt.new_LogLinearInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.LogLinearInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.LogLinearInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_LogLinearInterpolatedPriceCurve

# Register LogLinearInterpolatedPriceCurve in _QuantExt:
_QuantExt.LogLinearInterpolatedPriceCurve_swigregister(LogLinearInterpolatedPriceCurve)

class CubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CubicInterpolatedPriceCurve_swiginit(self, _QuantExt.new_CubicInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.CubicInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.CubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_CubicInterpolatedPriceCurve

# Register CubicInterpolatedPriceCurve in _QuantExt:
_QuantExt.CubicInterpolatedPriceCurve_swigregister(CubicInterpolatedPriceCurve)

class SplineCubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SplineCubicInterpolatedPriceCurve_swiginit(self, _QuantExt.new_SplineCubicInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.SplineCubicInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.SplineCubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_SplineCubicInterpolatedPriceCurve

# Register SplineCubicInterpolatedPriceCurve in _QuantExt:
_QuantExt.SplineCubicInterpolatedPriceCurve_swigregister(SplineCubicInterpolatedPriceCurve)

class MonotonicCubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.MonotonicCubicInterpolatedPriceCurve_swiginit(self, _QuantExt.new_MonotonicCubicInterpolatedPriceCurve(*args))

    def times(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.MonotonicCubicInterpolatedPriceCurve_times(self)

    def prices(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.MonotonicCubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _QuantExt.delete_MonotonicCubicInterpolatedPriceCurve

# Register MonotonicCubicInterpolatedPriceCurve in _QuantExt:
_QuantExt.MonotonicCubicInterpolatedPriceCurve_swigregister(MonotonicCubicInterpolatedPriceCurve)

class QLESwaptionVolCube2(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure: "SwaptionVolatilityStructureHandle", optionTenors: "PeriodVector", swapTenors: "PeriodVector", strikeSpreads: "DoubleVector", volSpreads: "QuoteHandleVectorVector", swapIndexBase: "SwapIndex", shortSwapIndexBase: "SwapIndex", vegaWeightedSmileFit: "bool", flatExtrapolation: "bool", volsAreSpreads: "bool"=True):
        _QuantExt.QLESwaptionVolCube2_swiginit(self, _QuantExt.new_QLESwaptionVolCube2(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndexBase, shortSwapIndexBase, vegaWeightedSmileFit, flatExtrapolation, volsAreSpreads))
    __swig_destroy__ = _QuantExt.delete_QLESwaptionVolCube2

# Register QLESwaptionVolCube2 in _QuantExt:
_QuantExt.QLESwaptionVolCube2_swigregister(QLESwaptionVolCube2)

class FxBlackVannaVolgaVolatilitySurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate: "Date", dates: "DateVector", atmVols: "DoubleVector", rr25d: "DoubleVector", bf25d: "DoubleVector", dc: "DayCounter", cal: "Calendar", fx: "QuoteHandle", dom: "YieldTermStructureHandle", fore: "YieldTermStructureHandle"):
        _QuantExt.FxBlackVannaVolgaVolatilitySurface_swiginit(self, _QuantExt.new_FxBlackVannaVolgaVolatilitySurface(refDate, dates, atmVols, rr25d, bf25d, dc, cal, fx, dom, fore))
    __swig_destroy__ = _QuantExt.delete_FxBlackVannaVolgaVolatilitySurface

# Register FxBlackVannaVolgaVolatilitySurface in _QuantExt:
_QuantExt.FxBlackVannaVolgaVolatilitySurface_swigregister(FxBlackVannaVolgaVolatilitySurface)

class BlackVarianceSurfaceMoneynessSpot(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cal: "Calendar", spot: "QuoteHandle", times: "DoubleVector", moneyness: "DoubleVector", blackVolMatrix: "QuoteHandleVectorVector", dayCounter: "DayCounter", stickyStrike: "bool"):
        _QuantExt.BlackVarianceSurfaceMoneynessSpot_swiginit(self, _QuantExt.new_BlackVarianceSurfaceMoneynessSpot(cal, spot, times, moneyness, blackVolMatrix, dayCounter, stickyStrike))
    __swig_destroy__ = _QuantExt.delete_BlackVarianceSurfaceMoneynessSpot

# Register BlackVarianceSurfaceMoneynessSpot in _QuantExt:
_QuantExt.BlackVarianceSurfaceMoneynessSpot_swigregister(BlackVarianceSurfaceMoneynessSpot)

class BlackVarianceSurfaceMoneynessForward(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cal: "Calendar", spot: "QuoteHandle", times: "DoubleVector", moneyness: "DoubleVector", blackVolMatrix: "QuoteHandleVectorVector", dayCounter: "DayCounter", forTS: "YieldTermStructureHandle", domTS: "YieldTermStructureHandle", stickyStrike: "bool"=False):
        _QuantExt.BlackVarianceSurfaceMoneynessForward_swiginit(self, _QuantExt.new_BlackVarianceSurfaceMoneynessForward(cal, spot, times, moneyness, blackVolMatrix, dayCounter, forTS, domTS, stickyStrike))
    __swig_destroy__ = _QuantExt.delete_BlackVarianceSurfaceMoneynessForward

# Register BlackVarianceSurfaceMoneynessForward in _QuantExt:
_QuantExt.BlackVarianceSurfaceMoneynessForward_swigregister(BlackVarianceSurfaceMoneynessForward)

class SwaptionVolCubeWithATM(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cube: "SwaptionVolatilityStructure"):
        _QuantExt.SwaptionVolCubeWithATM_swiginit(self, _QuantExt.new_SwaptionVolCubeWithATM(cube))
    __swig_destroy__ = _QuantExt.delete_SwaptionVolCubeWithATM

# Register SwaptionVolCubeWithATM in _QuantExt:
_QuantExt.SwaptionVolCubeWithATM_swigregister(SwaptionVolCubeWithATM)

class SwaptionVolatilityConstantSpread(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atm: "SwaptionVolatilityStructureHandle", cube: "SwaptionVolatilityStructureHandle"):
        _QuantExt.SwaptionVolatilityConstantSpread_swiginit(self, _QuantExt.new_SwaptionVolatilityConstantSpread(atm, cube))

    def atmVol(self) -> "QuantLib::Handle< QuantLib::SwaptionVolatilityStructure > const &":
        return _QuantExt.SwaptionVolatilityConstantSpread_atmVol(self)

    def cube(self) -> "QuantLib::Handle< QuantLib::SwaptionVolatilityStructure > const &":
        return _QuantExt.SwaptionVolatilityConstantSpread_cube(self)
    __swig_destroy__ = _QuantExt.delete_SwaptionVolatilityConstantSpread

# Register SwaptionVolatilityConstantSpread in _QuantExt:
_QuantExt.SwaptionVolatilityConstantSpread_swigregister(SwaptionVolatilityConstantSpread)

class SwapConventions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays: "QuantLib::Natural", fixedTenor: "Period", fixedCalendar: "Calendar", fixedConvention: "QuantLib::BusinessDayConvention", fixedDayCounter: "DayCounter", floatIndex: "IborIndex"):
        _QuantExt.SwapConventions_swiginit(self, _QuantExt.new_SwapConventions(settlementDays, fixedTenor, fixedCalendar, fixedConvention, fixedDayCounter, floatIndex))

    def settlementDays(self) -> "QuantLib::Natural":
        return _QuantExt.SwapConventions_settlementDays(self)

    def fixedTenor(self) -> "QuantLib::Period const &":
        return _QuantExt.SwapConventions_fixedTenor(self)

    def fixedCalendar(self) -> "QuantLib::Calendar const &":
        return _QuantExt.SwapConventions_fixedCalendar(self)

    def fixedConvention(self) -> "QuantLib::BusinessDayConvention":
        return _QuantExt.SwapConventions_fixedConvention(self)

    def fixedDayCounter(self) -> "QuantLib::DayCounter const &":
        return _QuantExt.SwapConventions_fixedDayCounter(self)

    def floatIndex(self) -> "IborIndexPtr const":
        return _QuantExt.SwapConventions_floatIndex(self)
    __swig_destroy__ = _QuantExt.delete_SwapConventions

# Register SwapConventions in _QuantExt:
_QuantExt.SwapConventions_swigregister(SwapConventions)

class SwaptionVolatilityConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SwaptionVolatilityConverter_swiginit(self, _QuantExt.new_SwaptionVolatilityConverter(*args))

    def convert(self) -> "boost::shared_ptr< QuantLib::SwaptionVolatilityStructure >":
        return _QuantExt.SwaptionVolatilityConverter_convert(self)

    def accuracy(self) -> "QuantLib::Real &":
        return _QuantExt.SwaptionVolatilityConverter_accuracy(self)

    def maxEvaluations(self) -> "QuantLib::Natural &":
        return _QuantExt.SwaptionVolatilityConverter_maxEvaluations(self)
    __swig_destroy__ = _QuantExt.delete_SwaptionVolatilityConverter

# Register SwaptionVolatilityConverter in _QuantExt:
_QuantExt.SwaptionVolatilityConverter_swigregister(SwaptionVolatilityConverter)

class BlackVolatilityWithATM(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, surface: "BlackVolTermStructure", spot: "QuoteHandle", yield1: "YieldTermStructureHandle", yield2: "YieldTermStructureHandle"):
        _QuantExt.BlackVolatilityWithATM_swiginit(self, _QuantExt.new_BlackVolatilityWithATM(surface, spot, yield1, yield2))

    def dayCounter(self) -> "QuantLib::DayCounter":
        return _QuantExt.BlackVolatilityWithATM_dayCounter(self)

    def maxDate(self) -> "QuantLib::Date":
        return _QuantExt.BlackVolatilityWithATM_maxDate(self)

    def maxTime(self) -> "QuantLib::Time":
        return _QuantExt.BlackVolatilityWithATM_maxTime(self)

    def referenceDate(self) -> "QuantLib::Date const &":
        return _QuantExt.BlackVolatilityWithATM_referenceDate(self)

    def calendar(self) -> "QuantLib::Calendar":
        return _QuantExt.BlackVolatilityWithATM_calendar(self)

    def settlementDays(self) -> "QuantLib::Natural":
        return _QuantExt.BlackVolatilityWithATM_settlementDays(self)

    def minStrike(self) -> "QuantLib::Rate":
        return _QuantExt.BlackVolatilityWithATM_minStrike(self)

    def maxStrike(self) -> "QuantLib::Rate":
        return _QuantExt.BlackVolatilityWithATM_maxStrike(self)
    __swig_destroy__ = _QuantExt.delete_BlackVolatilityWithATM

# Register BlackVolatilityWithATM in _QuantExt:
_QuantExt.BlackVolatilityWithATM_swigregister(BlackVolatilityWithATM)

class TNDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.TNDCurrency_swiginit(self, _QuantExt.new_TNDCurrency())
    __swig_destroy__ = _QuantExt.delete_TNDCurrency

# Register TNDCurrency in _QuantExt:
_QuantExt.TNDCurrency_swigregister(TNDCurrency)

class EGPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.EGPCurrency_swiginit(self, _QuantExt.new_EGPCurrency())
    __swig_destroy__ = _QuantExt.delete_EGPCurrency

# Register EGPCurrency in _QuantExt:
_QuantExt.EGPCurrency_swigregister(EGPCurrency)

class NGNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.NGNCurrency_swiginit(self, _QuantExt.new_NGNCurrency())
    __swig_destroy__ = _QuantExt.delete_NGNCurrency

# Register NGNCurrency in _QuantExt:
_QuantExt.NGNCurrency_swigregister(NGNCurrency)

class MADCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MADCurrency_swiginit(self, _QuantExt.new_MADCurrency())
    __swig_destroy__ = _QuantExt.delete_MADCurrency

# Register MADCurrency in _QuantExt:
_QuantExt.MADCurrency_swigregister(MADCurrency)

class KZTCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.KZTCurrency_swiginit(self, _QuantExt.new_KZTCurrency())
    __swig_destroy__ = _QuantExt.delete_KZTCurrency

# Register KZTCurrency in _QuantExt:
_QuantExt.KZTCurrency_swigregister(KZTCurrency)

class QARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.QARCurrency_swiginit(self, _QuantExt.new_QARCurrency())
    __swig_destroy__ = _QuantExt.delete_QARCurrency

# Register QARCurrency in _QuantExt:
_QuantExt.QARCurrency_swigregister(QARCurrency)

class BHDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.BHDCurrency_swiginit(self, _QuantExt.new_BHDCurrency())
    __swig_destroy__ = _QuantExt.delete_BHDCurrency

# Register BHDCurrency in _QuantExt:
_QuantExt.BHDCurrency_swigregister(BHDCurrency)

class OMRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.OMRCurrency_swiginit(self, _QuantExt.new_OMRCurrency())
    __swig_destroy__ = _QuantExt.delete_OMRCurrency

# Register OMRCurrency in _QuantExt:
_QuantExt.OMRCurrency_swigregister(OMRCurrency)

class AEDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.AEDCurrency_swiginit(self, _QuantExt.new_AEDCurrency())
    __swig_destroy__ = _QuantExt.delete_AEDCurrency

# Register AEDCurrency in _QuantExt:
_QuantExt.AEDCurrency_swigregister(AEDCurrency)

class PHPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.PHPCurrency_swiginit(self, _QuantExt.new_PHPCurrency())
    __swig_destroy__ = _QuantExt.delete_PHPCurrency

# Register PHPCurrency in _QuantExt:
_QuantExt.PHPCurrency_swigregister(PHPCurrency)

class CNHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CNHCurrency_swiginit(self, _QuantExt.new_CNHCurrency())
    __swig_destroy__ = _QuantExt.delete_CNHCurrency

# Register CNHCurrency in _QuantExt:
_QuantExt.CNHCurrency_swigregister(CNHCurrency)

class MXVCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.MXVCurrency_swiginit(self, _QuantExt.new_MXVCurrency())
    __swig_destroy__ = _QuantExt.delete_MXVCurrency

# Register MXVCurrency in _QuantExt:
_QuantExt.MXVCurrency_swigregister(MXVCurrency)

class CLFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.CLFCurrency_swiginit(self, _QuantExt.new_CLFCurrency())
    __swig_destroy__ = _QuantExt.delete_CLFCurrency

# Register CLFCurrency in _QuantExt:
_QuantExt.CLFCurrency_swigregister(CLFCurrency)

class CrossCcySwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CrossCcySwap_swiginit(self, _QuantExt.new_CrossCcySwap(*args))
    __swig_destroy__ = _QuantExt.delete_CrossCcySwap

# Register CrossCcySwap in _QuantExt:
_QuantExt.CrossCcySwap_swigregister(CrossCcySwap)

class CrossCcySwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CrossCcySwapEngine_swiginit(self, _QuantExt.new_CrossCcySwapEngine(*args))
    __swig_destroy__ = _QuantExt.delete_CrossCcySwapEngine

# Register CrossCcySwapEngine in _QuantExt:
_QuantExt.CrossCcySwapEngine_swigregister(CrossCcySwapEngine)

class CrossCcyFixFloatSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.CrossCcyFixFloatSwap_Receiver
    Payer = _QuantExt.CrossCcyFixFloatSwap_Payer

    def __init__(self, type: "CrossCcyFixFloatSwap::Type", fixedNominal: "QuantLib::Real", fixedCurrency: "Currency", fixedSchedule: "Schedule", fixedRate: "QuantLib::Rate", fixedDayCount: "DayCounter", fixedPaymentBdc: "QuantLib::BusinessDayConvention", fixedPaymentLag: "QuantLib::Natural", fixedPaymentCalendar: "Calendar", floatNominal: "QuantLib::Real", floatCurrency: "Currency", floatSchedule: "Schedule", floatIndex: "IborIndex", floatSpread: "QuantLib::Spread", floatPaymentBdc: "QuantLib::BusinessDayConvention", floatPaymentLag: "QuantLib::Natural", floatPaymentCalendar: "Calendar"):
        _QuantExt.CrossCcyFixFloatSwap_swiginit(self, _QuantExt.new_CrossCcyFixFloatSwap(type, fixedNominal, fixedCurrency, fixedSchedule, fixedRate, fixedDayCount, fixedPaymentBdc, fixedPaymentLag, fixedPaymentCalendar, floatNominal, floatCurrency, floatSchedule, floatIndex, floatSpread, floatPaymentBdc, floatPaymentLag, floatPaymentCalendar))

    def type(self) -> "CrossCcyFixFloatSwap::Type":
        return _QuantExt.CrossCcyFixFloatSwap_type(self)

    def fixedNominal(self) -> "QuantLib::Real":
        return _QuantExt.CrossCcyFixFloatSwap_fixedNominal(self)

    def fixedCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.CrossCcyFixFloatSwap_fixedCurrency(self)

    def fixedSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.CrossCcyFixFloatSwap_fixedSchedule(self)

    def fixedRate(self) -> "QuantLib::Rate":
        return _QuantExt.CrossCcyFixFloatSwap_fixedRate(self)

    def fixedDayCount(self) -> "QuantLib::DayCounter const &":
        return _QuantExt.CrossCcyFixFloatSwap_fixedDayCount(self)

    def fixedPaymentBdc(self) -> "QuantLib::BusinessDayConvention":
        return _QuantExt.CrossCcyFixFloatSwap_fixedPaymentBdc(self)

    def fixedPaymentLag(self) -> "QuantLib::Natural":
        return _QuantExt.CrossCcyFixFloatSwap_fixedPaymentLag(self)

    def fixedPaymentCalendar(self) -> "QuantLib::Calendar const &":
        return _QuantExt.CrossCcyFixFloatSwap_fixedPaymentCalendar(self)

    def floatNominal(self) -> "QuantLib::Real":
        return _QuantExt.CrossCcyFixFloatSwap_floatNominal(self)

    def floatCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.CrossCcyFixFloatSwap_floatCurrency(self)

    def floatSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.CrossCcyFixFloatSwap_floatSchedule(self)

    def floatSpread(self) -> "QuantLib::Rate":
        return _QuantExt.CrossCcyFixFloatSwap_floatSpread(self)

    def floatPaymentBdc(self) -> "QuantLib::BusinessDayConvention":
        return _QuantExt.CrossCcyFixFloatSwap_floatPaymentBdc(self)

    def floatPaymentLag(self) -> "QuantLib::Natural":
        return _QuantExt.CrossCcyFixFloatSwap_floatPaymentLag(self)

    def floatPaymentCalendar(self) -> "QuantLib::Calendar const &":
        return _QuantExt.CrossCcyFixFloatSwap_floatPaymentCalendar(self)

    def fairFixedRate(self) -> "QuantLib::Rate":
        return _QuantExt.CrossCcyFixFloatSwap_fairFixedRate(self)

    def fairSpread(self) -> "QuantLib::Spread":
        return _QuantExt.CrossCcyFixFloatSwap_fairSpread(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyFixFloatSwap

# Register CrossCcyFixFloatSwap in _QuantExt:
_QuantExt.CrossCcyFixFloatSwap_swigregister(CrossCcyFixFloatSwap)

class CrossCcyBasisSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payNominal: "QuantLib::Real", payCurrency: "Currency", paySchedule: "Schedule", payIndex: "IborIndex", paySpread: "QuantLib::Spread", recNominal: "QuantLib::Real", recCurrency: "Currency", recSchedule: "Schedule", recIndex: "IborIndex", recSpread: "QuantLib::Spread"):
        _QuantExt.CrossCcyBasisSwap_swiginit(self, _QuantExt.new_CrossCcyBasisSwap(payNominal, payCurrency, paySchedule, payIndex, paySpread, recNominal, recCurrency, recSchedule, recIndex, recSpread))

    def payNominal(self) -> "QuantLib::Real":
        return _QuantExt.CrossCcyBasisSwap_payNominal(self)

    def payCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.CrossCcyBasisSwap_payCurrency(self)

    def paySchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.CrossCcyBasisSwap_paySchedule(self)

    def paySpread(self) -> "QuantLib::Spread":
        return _QuantExt.CrossCcyBasisSwap_paySpread(self)

    def recNominal(self) -> "QuantLib::Real":
        return _QuantExt.CrossCcyBasisSwap_recNominal(self)

    def recCurrency(self) -> "QuantLib::Currency const &":
        return _QuantExt.CrossCcyBasisSwap_recCurrency(self)

    def recSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.CrossCcyBasisSwap_recSchedule(self)

    def recSpread(self) -> "QuantLib::Spread":
        return _QuantExt.CrossCcyBasisSwap_recSpread(self)

    def fairPaySpread(self) -> "QuantLib::Spread":
        return _QuantExt.CrossCcyBasisSwap_fairPaySpread(self)

    def fairRecSpread(self) -> "QuantLib::Spread":
        return _QuantExt.CrossCcyBasisSwap_fairRecSpread(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyBasisSwap

# Register CrossCcyBasisSwap in _QuantExt:
_QuantExt.CrossCcyBasisSwap_swigregister(CrossCcyBasisSwap)

class CrossCcyBasisMtMResetSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, foreignNominal: "Real", foreignCurrency: "Currency", foreignSchedule: "Schedule", foreignIndex: "IborIndex", foreignSpread: "Spread", domesticCurrency: "Currency", domesticSchedule: "Schedule", domesticIndex: "IborIndex", domesticSpread: "Spread", fxIdx: "FxIndex", invertFxIdx: "bool"=False, receiveDomestic: "bool"=True):
        _QuantExt.CrossCcyBasisMtMResetSwap_swiginit(self, _QuantExt.new_CrossCcyBasisMtMResetSwap(foreignNominal, foreignCurrency, foreignSchedule, foreignIndex, foreignSpread, domesticCurrency, domesticSchedule, domesticIndex, domesticSpread, fxIdx, invertFxIdx, receiveDomestic))

    def fairForeignSpread(self) -> "Spread":
        return _QuantExt.CrossCcyBasisMtMResetSwap_fairForeignSpread(self)

    def fairDomesticSpread(self) -> "Spread":
        return _QuantExt.CrossCcyBasisMtMResetSwap_fairDomesticSpread(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyBasisMtMResetSwap

# Register CrossCcyBasisMtMResetSwap in _QuantExt:
_QuantExt.CrossCcyBasisMtMResetSwap_swigregister(CrossCcyBasisMtMResetSwap)

class Deposit(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.Deposit_swiginit(self, _QuantExt.new_Deposit(*args))

    def fixingDate(self) -> "QuantLib::Date":
        return _QuantExt.Deposit_fixingDate(self)

    def startDate(self) -> "QuantLib::Date":
        return _QuantExt.Deposit_startDate(self)

    def maturityDate(self) -> "QuantLib::Date":
        return _QuantExt.Deposit_maturityDate(self)

    def fairRate(self) -> "QuantLib::Real":
        return _QuantExt.Deposit_fairRate(self)

    def leg(self) -> "QuantLib::Leg const &":
        return _QuantExt.Deposit_leg(self)
    __swig_destroy__ = _QuantExt.delete_Deposit

# Register Deposit in _QuantExt:
_QuantExt.Deposit_swigregister(Deposit)

class DepositEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DepositEngine_swiginit(self, _QuantExt.new_DepositEngine(*args))
    __swig_destroy__ = _QuantExt.delete_DepositEngine

# Register DepositEngine in _QuantExt:
_QuantExt.DepositEngine_swigregister(DepositEngine)

class OvernightIndexedBasisSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.OvernightIndexedBasisSwap_Receiver
    Payer = _QuantExt.OvernightIndexedBasisSwap_Payer

    def __init__(self, type: "OvernightIndexedBasisSwap::Type", nominal: "QuantLib::Real", oisSchedule: "Schedule", overnightIndex: "OvernightIndex", iborSchedule: "Schedule", iborIndex: "IborIndex", oisSpread: "QuantLib::Spread"=0.0, iborSpread: "QuantLib::Spread"=0.0):
        _QuantExt.OvernightIndexedBasisSwap_swiginit(self, _QuantExt.new_OvernightIndexedBasisSwap(type, nominal, oisSchedule, overnightIndex, iborSchedule, iborIndex, oisSpread, iborSpread))

    def nominal(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_nominal(self)

    def oisSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.OvernightIndexedBasisSwap_oisSchedule(self)

    def iborSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.OvernightIndexedBasisSwap_iborSchedule(self)

    def oisSpread(self) -> "QuantLib::Spread":
        return _QuantExt.OvernightIndexedBasisSwap_oisSpread(self)

    def iborSpread(self) -> "QuantLib::Spread":
        return _QuantExt.OvernightIndexedBasisSwap_iborSpread(self)

    def iborLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.OvernightIndexedBasisSwap_iborLeg(self)

    def overnightLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.OvernightIndexedBasisSwap_overnightLeg(self)

    def iborLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_iborLegBPS(self)

    def iborLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_iborLegNPV(self)

    def fairIborSpread(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_fairIborSpread(self)

    def overnightLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_overnightLegBPS(self)

    def overnightLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_overnightLegNPV(self)

    def fairOvernightSpread(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedBasisSwap_fairOvernightSpread(self)
    __swig_destroy__ = _QuantExt.delete_OvernightIndexedBasisSwap

# Register OvernightIndexedBasisSwap in _QuantExt:
_QuantExt.OvernightIndexedBasisSwap_swigregister(OvernightIndexedBasisSwap)

class Payment(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount: "QuantLib::Real const", currency: "Currency", date: "Date"):
        _QuantExt.Payment_swiginit(self, _QuantExt.new_Payment(amount, currency, date))

    def currency(self) -> "QuantLib::Currency":
        return _QuantExt.Payment_currency(self)

    def cashFlow(self) -> "SimpleCashFlowPtr":
        return _QuantExt.Payment_cashFlow(self)
    __swig_destroy__ = _QuantExt.delete_Payment

# Register Payment in _QuantExt:
_QuantExt.Payment_swigregister(Payment)

class PaymentDiscountingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.PaymentDiscountingEngine_swiginit(self, _QuantExt.new_PaymentDiscountingEngine(*args))

    def discountCurve(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure > const &":
        return _QuantExt.PaymentDiscountingEngine_discountCurve(self)

    def spotFX(self) -> "QuantLib::Handle< QuantLib::Quote > const &":
        return _QuantExt.PaymentDiscountingEngine_spotFX(self)
    __swig_destroy__ = _QuantExt.delete_PaymentDiscountingEngine

# Register PaymentDiscountingEngine in _QuantExt:
_QuantExt.PaymentDiscountingEngine_swigregister(PaymentDiscountingEngine)

class FxForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nominal1: "QuantLib::Real const &", currency1: "Currency", nominal2: "QuantLib::Real const &", currency2: "Currency", maturityDate: "Date", payCurrency1: "bool const &"):
        _QuantExt.FxForward_swiginit(self, _QuantExt.new_FxForward(nominal1, currency1, nominal2, currency2, maturityDate, payCurrency1))

    def fairForwardRate(self) -> "QuantLib::ExchangeRate const &":
        return _QuantExt.FxForward_fairForwardRate(self)

    def currency1Nominal(self) -> "QuantLib::Real":
        return _QuantExt.FxForward_currency1Nominal(self)

    def currency2Nominal(self) -> "QuantLib::Real":
        return _QuantExt.FxForward_currency2Nominal(self)

    def currency1(self) -> "QuantLib::Currency":
        return _QuantExt.FxForward_currency1(self)

    def currency2(self) -> "QuantLib::Currency":
        return _QuantExt.FxForward_currency2(self)

    def maturityDate(self) -> "QuantLib::Date":
        return _QuantExt.FxForward_maturityDate(self)

    def payCurrency1(self) -> "bool":
        return _QuantExt.FxForward_payCurrency1(self)
    __swig_destroy__ = _QuantExt.delete_FxForward

# Register FxForward in _QuantExt:
_QuantExt.FxForward_swigregister(FxForward)

class DiscountingFxForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountingFxForwardEngine_swiginit(self, _QuantExt.new_DiscountingFxForwardEngine(*args))
    __swig_destroy__ = _QuantExt.delete_DiscountingFxForwardEngine

# Register DiscountingFxForwardEngine in _QuantExt:
_QuantExt.DiscountingFxForwardEngine_swigregister(DiscountingFxForwardEngine)

class CommodityForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", currency: "Currency", position: "QuantLib::Position::Type", quantity: "QuantLib::Real", maturityDate: "Date", strike: "QuantLib::Real"):
        _QuantExt.CommodityForward_swiginit(self, _QuantExt.new_CommodityForward(name, currency, position, quantity, maturityDate, strike))

    def name(self) -> "std::string const &":
        return _QuantExt.CommodityForward_name(self)

    def currency(self) -> "QuantLib::Currency const &":
        return _QuantExt.CommodityForward_currency(self)

    def position(self) -> "QuantLib::Position::Type":
        return _QuantExt.CommodityForward_position(self)

    def quantity(self) -> "QuantLib::Real":
        return _QuantExt.CommodityForward_quantity(self)

    def maturityDate(self) -> "QuantLib::Date const &":
        return _QuantExt.CommodityForward_maturityDate(self)

    def strike(self) -> "QuantLib::Real":
        return _QuantExt.CommodityForward_strike(self)
    __swig_destroy__ = _QuantExt.delete_CommodityForward

# Register CommodityForward in _QuantExt:
_QuantExt.CommodityForward_swigregister(CommodityForward)

class DiscountingCommodityForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountingCommodityForwardEngine_swiginit(self, _QuantExt.new_DiscountingCommodityForwardEngine(*args))
    __swig_destroy__ = _QuantExt.delete_DiscountingCommodityForwardEngine

# Register DiscountingCommodityForwardEngine in _QuantExt:
_QuantExt.DiscountingCommodityForwardEngine_swigregister(DiscountingCommodityForwardEngine)

class DiscountingSwapEngineMultiCurve(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountingSwapEngineMultiCurve_swiginit(self, _QuantExt.new_DiscountingSwapEngineMultiCurve(*args))

    def discountCurve(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure >":
        return _QuantExt.DiscountingSwapEngineMultiCurve_discountCurve(self)
    __swig_destroy__ = _QuantExt.delete_DiscountingSwapEngineMultiCurve

# Register DiscountingSwapEngineMultiCurve in _QuantExt:
_QuantExt.DiscountingSwapEngineMultiCurve_swigregister(DiscountingSwapEngineMultiCurve)

class SubPeriodsCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Averaging = _QuantExt.SubPeriodsCoupon_Averaging
    Compounding = _QuantExt.SubPeriodsCoupon_Compounding

    def __init__(self, *args):
        _QuantExt.SubPeriodsCoupon_swiginit(self, _QuantExt.new_SubPeriodsCoupon(*args))

    def fixingDates(self) -> "std::vector< QuantLib::Date,std::allocator< QuantLib::Date > > const &":
        return _QuantExt.SubPeriodsCoupon_fixingDates(self)

    def accrualFractions(self) -> "std::vector< QuantLib::Time,std::allocator< QuantLib::Time > > const &":
        return _QuantExt.SubPeriodsCoupon_accrualFractions(self)

    def indexFixings(self) -> "std::vector< QuantLib::Rate,std::allocator< QuantLib::Rate > > const &":
        return _QuantExt.SubPeriodsCoupon_indexFixings(self)

    def valueDates(self) -> "std::vector< QuantLib::Date,std::allocator< QuantLib::Date > > const &":
        return _QuantExt.SubPeriodsCoupon_valueDates(self)

    def includeSpread(self) -> "bool":
        return _QuantExt.SubPeriodsCoupon_includeSpread(self)

    def spread(self) -> "QuantLib::Spread":
        return _QuantExt.SubPeriodsCoupon_spread(self)
    __swig_destroy__ = _QuantExt.delete_SubPeriodsCoupon

# Register SubPeriodsCoupon in _QuantExt:
_QuantExt.SubPeriodsCoupon_swigregister(SubPeriodsCoupon)

class SubPeriodsCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swapletRate(self) -> "QuantLib::Rate":
        return _QuantExt.SubPeriodsCouponPricer_swapletRate(self)
    __swig_destroy__ = _QuantExt.delete_SubPeriodsCouponPricer

# Register SubPeriodsCouponPricer in _QuantExt:
_QuantExt.SubPeriodsCouponPricer_swigregister(SubPeriodsCouponPricer)

class TenorBasisSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TenorBasisSwap_swiginit(self, _QuantExt.new_TenorBasisSwap(*args))

    def nominal(self) -> "QuantLib::Real":
        return _QuantExt.TenorBasisSwap_nominal(self)

    def payLongIndex(self) -> "bool":
        return _QuantExt.TenorBasisSwap_payLongIndex(self)

    def longSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.TenorBasisSwap_longSchedule(self)

    def longIndex(self) -> "IborIndexPtr const":
        return _QuantExt.TenorBasisSwap_longIndex(self)

    def longSpread(self) -> "QuantLib::Spread":
        return _QuantExt.TenorBasisSwap_longSpread(self)

    def longLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.TenorBasisSwap_longLeg(self)

    def shortSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.TenorBasisSwap_shortSchedule(self)

    def shortIndex(self) -> "IborIndexPtr const":
        return _QuantExt.TenorBasisSwap_shortIndex(self)

    def shortSpread(self) -> "QuantLib::Spread":
        return _QuantExt.TenorBasisSwap_shortSpread(self)

    def shortLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.TenorBasisSwap_shortLeg(self)

    def type(self) -> "SubPeriodsCoupon::Type":
        return _QuantExt.TenorBasisSwap_type(self)

    def shortPayTenor(self) -> "QuantLib::Period const &":
        return _QuantExt.TenorBasisSwap_shortPayTenor(self)

    def includeSpread(self) -> "bool":
        return _QuantExt.TenorBasisSwap_includeSpread(self)

    def longLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.TenorBasisSwap_longLegBPS(self)

    def longLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.TenorBasisSwap_longLegNPV(self)

    def fairLongLegSpread(self) -> "QuantLib::Rate":
        return _QuantExt.TenorBasisSwap_fairLongLegSpread(self)

    def shortLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.TenorBasisSwap_shortLegBPS(self)

    def shortLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.TenorBasisSwap_shortLegNPV(self)

    def fairShortLegSpread(self) -> "QuantLib::Rate":
        return _QuantExt.TenorBasisSwap_fairShortLegSpread(self)
    __swig_destroy__ = _QuantExt.delete_TenorBasisSwap

# Register TenorBasisSwap in _QuantExt:
_QuantExt.TenorBasisSwap_swigregister(TenorBasisSwap)

class SubPeriodsSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SubPeriodsSwap_swiginit(self, _QuantExt.new_SubPeriodsSwap(*args))

    def nominal(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_nominal(self)

    def isPayer(self) -> "bool":
        return _QuantExt.SubPeriodsSwap_isPayer(self)

    def fixedSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.SubPeriodsSwap_fixedSchedule(self)

    def fixedRate(self) -> "QuantLib::Rate":
        return _QuantExt.SubPeriodsSwap_fixedRate(self)

    def fixedLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.SubPeriodsSwap_fixedLeg(self)

    def floatSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.SubPeriodsSwap_floatSchedule(self)

    def type(self) -> "SubPeriodsCoupon::Type":
        return _QuantExt.SubPeriodsSwap_type(self)

    def floatPayTenor(self) -> "QuantLib::Period const &":
        return _QuantExt.SubPeriodsSwap_floatPayTenor(self)

    def floatLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.SubPeriodsSwap_floatLeg(self)

    def fairRate(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_fairRate(self)

    def fixedLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_fixedLegBPS(self)

    def fixedLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_fixedLegNPV(self)

    def floatLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_floatLegBPS(self)

    def floatLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.SubPeriodsSwap_floatLegNPV(self)
    __swig_destroy__ = _QuantExt.delete_SubPeriodsSwap

# Register SubPeriodsSwap in _QuantExt:
_QuantExt.SubPeriodsSwap_swigregister(SubPeriodsSwap)

class OvernightIndexedCrossCcyBasisSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payNominal: "QuantLib::Real", payCurrency: "Currency", paySchedule: "Schedule", payIndex: "OvernightIndex", paySpread: "QuantLib::Real", recNominal: "QuantLib::Real", recCurrency: "Currency", recSchedule: "Schedule", recIndex: "OvernightIndex", recSpread: "QuantLib::Real"):
        _QuantExt.OvernightIndexedCrossCcyBasisSwap_swiginit(self, _QuantExt.new_OvernightIndexedCrossCcyBasisSwap(payNominal, payCurrency, paySchedule, payIndex, paySpread, recNominal, recCurrency, recSchedule, recIndex, recSpread))

    def payNominal(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_payNominal(self)

    def payCurrency(self) -> "QuantLib::Currency":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_payCurrency(self)

    def paySchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_paySchedule(self)

    def paySpread(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_paySpread(self)

    def recNominal(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recNominal(self)

    def recCurrency(self) -> "QuantLib::Currency":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recCurrency(self)

    def recSchedule(self) -> "QuantLib::Schedule const &":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recSchedule(self)

    def recSpread(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recSpread(self)

    def payLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_payLeg(self)

    def recLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recLeg(self)

    def payLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_payLegBPS(self)

    def payLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_payLegNPV(self)

    def fairPayLegSpread(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_fairPayLegSpread(self)

    def recLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recLegBPS(self)

    def recLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_recLegNPV(self)

    def fairRecLegSpread(self) -> "QuantLib::Spread":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwap_fairRecLegSpread(self)
    __swig_destroy__ = _QuantExt.delete_OvernightIndexedCrossCcyBasisSwap

# Register OvernightIndexedCrossCcyBasisSwap in _QuantExt:
_QuantExt.OvernightIndexedCrossCcyBasisSwap_swigregister(OvernightIndexedCrossCcyBasisSwap)

class OvernightIndexedCrossCcyBasisSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ts1: "YieldTermStructureHandle", ccy1: "Currency", ts2: "YieldTermStructureHandle", ccy2: "Currency", fx: "QuoteHandle"):
        _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_swiginit(self, _QuantExt.new_OvernightIndexedCrossCcyBasisSwapEngine(ts1, ccy1, ts2, ccy2, fx))

    def ts1(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure >":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_ts1(self)

    def ts2(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure >":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_ts2(self)

    def ccy1(self) -> "QuantLib::Currency":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_ccy1(self)

    def ccy2(self) -> "QuantLib::Currency":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_ccy2(self)

    def fx(self) -> "QuantLib::Handle< QuantLib::Quote >":
        return _QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_fx(self)
    __swig_destroy__ = _QuantExt.delete_OvernightIndexedCrossCcyBasisSwapEngine

# Register OvernightIndexedCrossCcyBasisSwapEngine in _QuantExt:
_QuantExt.OvernightIndexedCrossCcyBasisSwapEngine_swigregister(OvernightIndexedCrossCcyBasisSwapEngine)

class CrossCcyBasisMtMResetSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CrossCcyBasisMtMResetSwapHelper_swiginit(self, _QuantExt.new_CrossCcyBasisMtMResetSwapHelper(*args))

    def swap(self) -> "CrossCcyBasisMtMResetSwapPtr":
        return _QuantExt.CrossCcyBasisMtMResetSwapHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyBasisMtMResetSwapHelper

# Register CrossCcyBasisMtMResetSwapHelper in _QuantExt:
_QuantExt.CrossCcyBasisMtMResetSwapHelper_swigregister(CrossCcyBasisMtMResetSwapHelper)

class CrossCcyBasisSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, spreadQuote: "QuoteHandle", spotFX: "QuoteHandle", settlementDays: "Natural", settlementCalendar: "Calendar", swapTenor: "Period", rollConvention: "BusinessDayConvention", flatIndex: "IborIndex", spreadIndex: "IborIndex", flatDiscountCurve: "YieldTermStructureHandle", spreadDiscountCurve: "YieldTermStructureHandle", eom: "bool"=False, flatIsDomestic: "bool"=True):
        _QuantExt.CrossCcyBasisSwapHelper_swiginit(self, _QuantExt.new_CrossCcyBasisSwapHelper(spreadQuote, spotFX, settlementDays, settlementCalendar, swapTenor, rollConvention, flatIndex, spreadIndex, flatDiscountCurve, spreadDiscountCurve, eom, flatIsDomestic))

    def swap(self) -> "CrossCcyBasisSwapPtr":
        return _QuantExt.CrossCcyBasisSwapHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyBasisSwapHelper

# Register CrossCcyBasisSwapHelper in _QuantExt:
_QuantExt.CrossCcyBasisSwapHelper_swigregister(CrossCcyBasisSwapHelper)

class TenorBasisSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.TenorBasisSwapHelper_swiginit(self, _QuantExt.new_TenorBasisSwapHelper(*args))

    def swap(self) -> "TenorBasisSwapPtr":
        return _QuantExt.TenorBasisSwapHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_TenorBasisSwapHelper

# Register TenorBasisSwapHelper in _QuantExt:
_QuantExt.TenorBasisSwapHelper_swigregister(TenorBasisSwapHelper)

class SubPeriodsSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.SubPeriodsSwapHelper_swiginit(self, _QuantExt.new_SubPeriodsSwapHelper(*args))

    def swap(self) -> "SubPeriodsSwapPtr":
        return _QuantExt.SubPeriodsSwapHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_SubPeriodsSwapHelper

# Register SubPeriodsSwapHelper in _QuantExt:
_QuantExt.SubPeriodsSwapHelper_swigregister(SubPeriodsSwapHelper)

class OIBSHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.OIBSHelper_swiginit(self, _QuantExt.new_OIBSHelper(*args))

    def swap(self) -> "OvernightIndexedBasisSwapPtr":
        return _QuantExt.OIBSHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_OIBSHelper

# Register OIBSHelper in _QuantExt:
_QuantExt.OIBSHelper_swigregister(OIBSHelper)

class BasisTwoSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.BasisTwoSwapHelper_swiginit(self, _QuantExt.new_BasisTwoSwapHelper(*args))

    def longSwap(self) -> "VanillaSwapPtr":
        return _QuantExt.BasisTwoSwapHelper_longSwap(self)

    def shortSwap(self) -> "VanillaSwapPtr":
        return _QuantExt.BasisTwoSwapHelper_shortSwap(self)
    __swig_destroy__ = _QuantExt.delete_BasisTwoSwapHelper

# Register BasisTwoSwapHelper in _QuantExt:
_QuantExt.BasisTwoSwapHelper_swigregister(BasisTwoSwapHelper)

class OICCBSHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays: "QuantLib::Natural", term: "Period", payIndex: "OvernightIndex", payTenor: "Period", recIndex: "OvernightIndex", recTenor: "Period", spreadQuote: "QuoteHandle", fixedDiscountCurve: "YieldTermStructureHandle", spreadQuoteOnPayLeg: "bool", fixedDiscountOnPayLeg: "bool"):
        _QuantExt.OICCBSHelper_swiginit(self, _QuantExt.new_OICCBSHelper(settlementDays, term, payIndex, payTenor, recIndex, recTenor, spreadQuote, fixedDiscountCurve, spreadQuoteOnPayLeg, fixedDiscountOnPayLeg))

    def swap(self) -> "OvernightIndexedCrossCcyBasisSwapPtr":
        return _QuantExt.OICCBSHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_OICCBSHelper

# Register OICCBSHelper in _QuantExt:
_QuantExt.OICCBSHelper_swigregister(OICCBSHelper)

class ImmFraRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.ImmFraRateHelper_swiginit(self, _QuantExt.new_ImmFraRateHelper(*args))
    __swig_destroy__ = _QuantExt.delete_ImmFraRateHelper

# Register ImmFraRateHelper in _QuantExt:
_QuantExt.ImmFraRateHelper_swigregister(ImmFraRateHelper)

class CrossCcyFixFloatSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.CrossCcyFixFloatSwapHelper_swiginit(self, _QuantExt.new_CrossCcyFixFloatSwapHelper(*args))

    def swap(self) -> "CrossCcyFixFloatSwapPtr":
        return _QuantExt.CrossCcyFixFloatSwapHelper_swap(self)
    __swig_destroy__ = _QuantExt.delete_CrossCcyFixFloatSwapHelper

# Register CrossCcyFixFloatSwapHelper in _QuantExt:
_QuantExt.CrossCcyFixFloatSwapHelper_swigregister(CrossCcyFixFloatSwapHelper)

class EquityForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &", currency: "Currency", longShort: "QuantLib::Position::Type const &", quantity: "QuantLib::Real const &", maturityDate: "Date", strike: "QuantLib::Real const &"):
        _QuantExt.EquityForward_swiginit(self, _QuantExt.new_EquityForward(name, currency, longShort, quantity, maturityDate, strike))

    def isExpired(self) -> "bool":
        return _QuantExt.EquityForward_isExpired(self)

    def name(self) -> "std::string const &":
        return _QuantExt.EquityForward_name(self)

    def currency(self) -> "QuantLib::Currency":
        return _QuantExt.EquityForward_currency(self)

    def longShort(self) -> "QuantLib::Position::Type":
        return _QuantExt.EquityForward_longShort(self)

    def quantity(self) -> "QuantLib::Real":
        return _QuantExt.EquityForward_quantity(self)

    def maturityDate(self) -> "QuantLib::Date":
        return _QuantExt.EquityForward_maturityDate(self)

    def strike(self) -> "QuantLib::Real":
        return _QuantExt.EquityForward_strike(self)
    __swig_destroy__ = _QuantExt.delete_EquityForward

# Register EquityForward in _QuantExt:
_QuantExt.EquityForward_swigregister(EquityForward)

class DiscountingEquityForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.DiscountingEquityForwardEngine_swiginit(self, _QuantExt.new_DiscountingEquityForwardEngine(*args))

    def calculate(self) -> "void":
        return _QuantExt.DiscountingEquityForwardEngine_calculate(self)

    def equityReferenceRateCurve(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure > const &":
        return _QuantExt.DiscountingEquityForwardEngine_equityReferenceRateCurve(self)

    def divYieldCurve(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure > const &":
        return _QuantExt.DiscountingEquityForwardEngine_divYieldCurve(self)

    def discountCurve(self) -> "QuantLib::Handle< QuantLib::YieldTermStructure > const &":
        return _QuantExt.DiscountingEquityForwardEngine_discountCurve(self)

    def equitySpot(self) -> "QuantLib::Handle< QuantLib::Quote > const &":
        return _QuantExt.DiscountingEquityForwardEngine_equitySpot(self)
    __swig_destroy__ = _QuantExt.delete_DiscountingEquityForwardEngine

# Register DiscountingEquityForwardEngine in _QuantExt:
_QuantExt.DiscountingEquityForwardEngine_swigregister(DiscountingEquityForwardEngine)

class AverageOIS(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _QuantExt.AverageOIS_Receiver
    Payer = _QuantExt.AverageOIS_Payer

    def __init__(self, *args):
        _QuantExt.AverageOIS_swiginit(self, _QuantExt.new_AverageOIS(*args))

    def type(self) -> "AverageOIS::Type":
        return _QuantExt.AverageOIS_type(self)

    def nominal(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_nominal(self)

    def nominals(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.AverageOIS_nominals(self)

    def fixedRate(self) -> "QuantLib::Rate":
        return _QuantExt.AverageOIS_fixedRate(self)

    def fixedRates(self) -> "std::vector< QuantLib::Rate,std::allocator< QuantLib::Rate > > const &":
        return _QuantExt.AverageOIS_fixedRates(self)

    def fixedDayCounter(self) -> "QuantLib::DayCounter const &":
        return _QuantExt.AverageOIS_fixedDayCounter(self)

    def overnightIndex(self) -> "OvernightIndexPtr const":
        return _QuantExt.AverageOIS_overnightIndex(self)

    def rateCutoff(self) -> "QuantLib::Natural":
        return _QuantExt.AverageOIS_rateCutoff(self)

    def onSpread(self) -> "QuantLib::Spread":
        return _QuantExt.AverageOIS_onSpread(self)

    def onSpreads(self) -> "std::vector< QuantLib::Spread,std::allocator< QuantLib::Spread > > const &":
        return _QuantExt.AverageOIS_onSpreads(self)

    def onGearing(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_onGearing(self)

    def onGearings(self) -> "std::vector< QuantLib::Real,std::allocator< QuantLib::Real > > const &":
        return _QuantExt.AverageOIS_onGearings(self)

    def onDayCounter(self) -> "QuantLib::DayCounter const &":
        return _QuantExt.AverageOIS_onDayCounter(self)

    def fixedLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.AverageOIS_fixedLeg(self)

    def overnightLeg(self) -> "QuantLib::Leg const &":
        return _QuantExt.AverageOIS_overnightLeg(self)

    def fixedLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_fixedLegBPS(self)

    def fixedLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_fixedLegNPV(self)

    def fairRate(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_fairRate(self)

    def overnightLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_overnightLegBPS(self)

    def overnightLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.AverageOIS_overnightLegNPV(self)

    def fairSpread(self) -> "QuantLib::Spread":
        return _QuantExt.AverageOIS_fairSpread(self)
    __swig_destroy__ = _QuantExt.delete_AverageOIS

# Register AverageOIS in _QuantExt:
_QuantExt.AverageOIS_swigregister(AverageOIS)

class AverageONIndexedCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Takada = _QuantExt.AverageONIndexedCouponPricer_Takada
    _None = _QuantExt.AverageONIndexedCouponPricer__None

    def __init__(self, *args):
        _QuantExt.AverageONIndexedCouponPricer_swiginit(self, _QuantExt.new_AverageONIndexedCouponPricer(*args))

    def initialize(self, coupon: "QuantLib::FloatingRateCoupon const &") -> "void":
        return _QuantExt.AverageONIndexedCouponPricer_initialize(self, coupon)

    def swapletRate(self) -> "QuantLib::Rate":
        return _QuantExt.AverageONIndexedCouponPricer_swapletRate(self)
    __swig_destroy__ = _QuantExt.delete_AverageONIndexedCouponPricer

# Register AverageONIndexedCouponPricer in _QuantExt:
_QuantExt.AverageONIndexedCouponPricer_swigregister(AverageONIndexedCouponPricer)

class QLECreditDefaultSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.QLECreditDefaultSwap_swiginit(self, _QuantExt.new_QLECreditDefaultSwap(*args))

    def side(self) -> "QuantLib::Protection::Side":
        return _QuantExt.QLECreditDefaultSwap_side(self)

    def notional(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_notional(self)

    def runningSpread(self) -> "QuantLib::Rate":
        return _QuantExt.QLECreditDefaultSwap_runningSpread(self)

    def settlesAccrual(self) -> "bool":
        return _QuantExt.QLECreditDefaultSwap_settlesAccrual(self)

    def paysAtDefaultTime(self) -> "bool":
        return _QuantExt.QLECreditDefaultSwap_paysAtDefaultTime(self)

    def coupons(self) -> "QuantLib::Leg const &":
        return _QuantExt.QLECreditDefaultSwap_coupons(self)

    def protectionStartDate(self) -> "QuantLib::Date const &":
        return _QuantExt.QLECreditDefaultSwap_protectionStartDate(self)

    def protectionEndDate(self) -> "QuantLib::Date const &":
        return _QuantExt.QLECreditDefaultSwap_protectionEndDate(self)

    def fairUpfront(self) -> "QuantLib::Rate":
        return _QuantExt.QLECreditDefaultSwap_fairUpfront(self)

    def fairSpread(self) -> "QuantLib::Rate":
        return _QuantExt.QLECreditDefaultSwap_fairSpread(self)

    def couponLegBPS(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_couponLegBPS(self)

    def upfrontBPS(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_upfrontBPS(self)

    def couponLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_couponLegNPV(self)

    def defaultLegNPV(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_defaultLegNPV(self)

    def upfrontNPV(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_upfrontNPV(self)

    def accrualRebateNPV(self) -> "QuantLib::Real":
        return _QuantExt.QLECreditDefaultSwap_accrualRebateNPV(self)

    def maturity(self) -> "QuantLib::Date":
        return _QuantExt.QLECreditDefaultSwap_maturity(self)

    def impliedHazardRate(self, targetNPV: "QuantLib::Real", discountCurve: "YieldTermStructureHandle", dayCounter: "DayCounter", recoveryRate: "QuantLib::Real"=0.4, accuracy: "QuantLib::Real"=1.0e-6) -> "QuantLib::Rate":
        return _QuantExt.QLECreditDefaultSwap_impliedHazardRate(self, targetNPV, discountCurve, dayCounter, recoveryRate, accuracy)

    def conventionalSpread(self, conventionalRecovery: "QuantLib::Real", discountCurve: "YieldTermStructureHandle", dayCounter: "DayCounter") -> "QuantLib::Rate":
        return _QuantExt.QLECreditDefaultSwap_conventionalSpread(self, conventionalRecovery, discountCurve, dayCounter)
    __swig_destroy__ = _QuantExt.delete_QLECreditDefaultSwap

# Register QLECreditDefaultSwap in _QuantExt:
_QuantExt.QLECreditDefaultSwap_swigregister(QLECreditDefaultSwap)

class QLEMidPointCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability: "DefaultProbabilityTermStructureHandle", recoveryRate: "QuantLib::Real", discountCurve: "YieldTermStructureHandle"):
        _QuantExt.QLEMidPointCdsEngine_swiginit(self, _QuantExt.new_QLEMidPointCdsEngine(probability, recoveryRate, discountCurve))
    __swig_destroy__ = _QuantExt.delete_QLEMidPointCdsEngine

# Register QLEMidPointCdsEngine in _QuantExt:
_QuantExt.QLEMidPointCdsEngine_swigregister(QLEMidPointCdsEngine)

class CdsOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swap: "QLECreditDefaultSwap", exercise: "Exercise", knocksOut: "bool"=True):
        _QuantExt.CdsOption_swiginit(self, _QuantExt.new_CdsOption(swap, exercise, knocksOut))

    def underlyingSwap(self) -> "QLECreditDefaultSwapPtr const":
        return _QuantExt.CdsOption_underlyingSwap(self)

    def atmRate(self) -> "QuantLib::Rate":
        return _QuantExt.CdsOption_atmRate(self)

    def riskyAnnuity(self) -> "QuantLib::Real":
        return _QuantExt.CdsOption_riskyAnnuity(self)

    def impliedVolatility(self, price: "QuantLib::Real", termStructure: "YieldTermStructureHandle", probability: "DefaultProbabilityTermStructureHandle", recoveryRate: "QuantLib::Real", accuracy: "QuantLib::Real"=1.e-4, maxEvaluations: "QuantLib::Size"=100, minVol: "QuantLib::Volatility"=1.0e-7, maxVol: "QuantLib::Volatility"=4.0) -> "QuantLib::Volatility":
        return _QuantExt.CdsOption_impliedVolatility(self, price, termStructure, probability, recoveryRate, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _QuantExt.delete_CdsOption

# Register CdsOption in _QuantExt:
_QuantExt.CdsOption_swigregister(CdsOption)

class BlackCdsOptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability: "DefaultProbabilityTermStructureHandle", recoveryRate: "QuantLib::Real", termStructure: "YieldTermStructureHandle", vol: "BlackVolTermStructureHandle"):
        _QuantExt.BlackCdsOptionEngine_swiginit(self, _QuantExt.new_BlackCdsOptionEngine(probability, recoveryRate, termStructure, vol))
    __swig_destroy__ = _QuantExt.delete_BlackCdsOptionEngine

# Register BlackCdsOptionEngine in _QuantExt:
_QuantExt.BlackCdsOptionEngine_swigregister(BlackCdsOptionEngine)

class AverageOISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _QuantExt.AverageOISRateHelper_swiginit(self, _QuantExt.new_AverageOISRateHelper(*args))

    def onSpread(self) -> "QuantLib::Real":
        return _QuantExt.AverageOISRateHelper_onSpread(self)

    def averageOIS(self) -> "AverageOISPtr":
        return _QuantExt.AverageOISRateHelper_averageOIS(self)
    __swig_destroy__ = _QuantExt.delete_AverageOISRateHelper

# Register AverageOISRateHelper in _QuantExt:
_QuantExt.AverageOISRateHelper_swigregister(AverageOISRateHelper)

class Portfolio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _QuantExt.Portfolio_swiginit(self, _QuantExt.new_Portfolio())

    def addDerivative(self, d: "boost::shared_ptr< Swap >") -> "void":
        return _QuantExt.Portfolio_addDerivative(self, d)

    def NPV(self) -> "Real":
        return _QuantExt.Portfolio_NPV(self)
    __swig_destroy__ = _QuantExt.delete_Portfolio

# Register Portfolio in _QuantExt:
_QuantExt.Portfolio_swigregister(Portfolio)



