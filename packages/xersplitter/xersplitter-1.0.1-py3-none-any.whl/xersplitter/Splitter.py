import csv
import sys
import os
import webbrowser
import time
import PySimpleGUI as sg
import argparse
import _thread
import openpyxl as xl

def InitParser():
    global parser 
    parser = argparse.ArgumentParser(description="A script to parse those pesky .xer files from Primavera P6", prog="xersplitter")

    fileTypeGroup = parser.add_mutually_exclusive_group()
    fileTypeGroup.add_argument("-csv", help="Comma seperated output", action="store_const", dest="type", const="csv")
    fileTypeGroup.add_argument("-xlsx", help="Excel file output", action="store_const",dest="type", const="xlsx")

    parser.add_argument("-i","--inputFile", help="The path to the input .xer file",type=str,default="", metavar="")
    parser.add_argument("-o","--outputDir", help="The directory where the output files will be placed", type=str,default="",metavar="")
    parser.add_argument("-cli", "--suppressGui", help="Hide the GUI - opens by default" ,action="store_true")
    parser.add_argument("-a", "--allTables", help="Parse all tables - Skips possibly problematic RISKTYPE & POBS tables by default", action="store_true")

    parser.set_defaults(type="csv")
    
    args = parser.parse_args()

    return args

def ConstructGUI(args):
    sg.theme("Default1")

    OptionsLayout = [      
            [sg.Checkbox('Ignore Problematic Tables',key='-IGNORETABLES-', default=(not args.allTables), tooltip="Ignores RISKTYPE & POBS Tables:\nThey are auto-generated by P6 and have been known to cause problems")],
            [sg.Frame(title='Output File Type',layout=[     
                [sg.Radio('.csv', 'type', key='-TYPECSV-', default=(args.type=='csv')), sg.Radio('.xlsx', "type",key='-TYPEXLSX-', default=(args.type=="xlsx"))]])
            ]
    ]

    mainLayout = [
        [sg.Text('.XER File', size=(20,1))],      
        [sg.InputText(size=(35,1), key='-INPUTFILE-', default_text=(args.inputFile)), sg.FileBrowse(file_types=(('P6 XER File', '*.xer'),))],
        [sg.Text('Output Folder', size=(20,1))],
        [sg.InputText(size=(35,1), key='-OUTPUTFOLDER-', default_text=(args.outputDir)), sg.FolderBrowse()],
        [sg.Frame(title='Options',layout=OptionsLayout)],
        [sg.Text('_' * 50)],
        [sg.Text('Press \'Split\' to begin', key="-WORKINGTEXT-"), sg.Text("", size=(35,1), justification="right", visible=False, key="-STATSTEXT-")],
        [sg.Output(size=(50,15), key='-OUTPUT-')],
        [sg.Button(button_text='Split', key="-SPLIT-"), 
            sg.Button(button_text="Clear"), 
            sg.CloseButton("Close", key="-STOPBUTTON-"), 
            sg.Text("github.com/JaiLaff", size=(27,1),justification = "right", enable_events=True, key="-GITHUB-", tooltip="Click to go to the Github Repo!")
        ]
    ]

    global totalTables
    global wrTables
    global totalRows
    global wrRows

    totalTables = wrTables = totalRows = wrRows = 0

    global window
    window = sg.Window("XER Splitter", mainLayout, finalize=True)

    introText = "Welcome to the XER Splitter\n\n"
    window["-OUTPUT-"].update(introText)

    while True:
        event, values = window.read()

        if event in (sg.WIN_CLOSED, 'Exit', "Close"):
            break

        if event == "Clear":
            window['-OUTPUT-'].update("")

        if event == "-SPLIT-":
            window['-WORKINGTEXT-'].update(value="Working...")
            window['-SPLIT-'].update(disabled=True)
            if values["-TYPECSV-"]: args.type='csv'
            if values["-TYPEXLSX-"]: args.type='xlsx'
            args.inputFile = values["-INPUTFILE-"]
            args.outputDir = values["-OUTPUTFOLDER-"]
            args.allTables = not values["-IGNORETABLES-"]

            StartThread(args)

        if event == "-GITHUB-":
            webbrowser.open("https://github.com/JaiLaff")

        

def UpdateGui(args, success=None):
    if args.suppressGui: return

    global window
    if success == True:
        window['-WORKINGTEXT-'].update(value="Complete!")
        window['-SPLIT-'].update(disabled=False)
    
    if success == False:
        window['-WORKINGTEXT-'].update(value="Error Found")
        window['-SPLIT-'].update(disabled=False)
    
    window["-STATSTEXT-"].update(visible=True)

    valueString = f"{str(wrRows)}/{str(totalRows)} rows, {str(wrTables)}/{str(totalTables)} tables"
    
    window["-STATSTEXT-"].update(value=valueString)


########### THE SCRIPT #############

def CheckDirectories(args):


    if not os.path.exists(args.inputFile):
        print(f"ERROR: Could not find target xer file \"{args.inputFile}\"")
        return False

    if not os.path.exists(args.outputDir):
        print(f"INFO: Could not find target output directory \"{args.outputDir}\"")
        print(f"Attempting to create target output directory...")
        
        try:
            os.makedirs(args.outputDir)
        except BaseException as e:
            print(f"ERROR: Failed to create target output directory \"{args.outputDir}\"")
            print(f"{type(e).__name__} was caught")
            print(str(e))
            return False
        else: print(f"Target output directory \"{args.outputDir}\" created successfully.")
    
    return True

def PreCheck(args):
    print("INFO: Beginning PreCheck of the XER File")
    
    eof = False

    global totalTables
    global totalRows

    try:
        with open(args.inputFile, "r", encoding="cp1252", errors="ignore") as xer:
            

            while not eof:
                rowType = xer.readline(2)
                if rowType == "%T": totalTables += 1
                elif rowType in ["%R", "%F"]: totalRows += 1
                elif rowType == "%E": eof = True
                
            UpdateGui(args)

    except BaseException as e:
        print("Critical error during Pre Check of XER File")
        print(f"{type(e).__name__} was caught")
        print(str(e))
        return False

    print("INFO: Pre Check completed successfully")
    print(f"{totalRows} rows and {totalTables} found")
    return True


def WriteCSV(outputDir, tableTitle, rows):

    try:
        with open(os.path.join(outputDir,tableTitle + ".csv"), "w+", newline="") as outFile:

            csv.writer(outFile, quoting=csv.QUOTE_NONNUMERIC).writerows(rows)
    except BaseException as e:
        print(f"Critical error during writing of table {tableTitle}")
        print(f"{type(e).__name__} was caught")
        print(str(e))
    else:
        print(f"INFO: {tableTitle} written to file successfully")

def WriteXLSX(outputDir, tableTitle, rows):
    try:
        wb = None
        sheetToWrite = None
        if not os.path.exists(outputDir):
            # New excel workbook
            wb = xl.Workbook()
            sheetToWrite = wb.active
            sheetToWrite.title = tableTitle
        else:
            # open existing workbook
            wb = xl.load_workbook(outputDir)
            sheetToWrite = wb.create_sheet(tableTitle)

        # The write
        for row, rowval in enumerate(rows, start=1):
            for col, colval in enumerate(rowval, start=1):
                sheetToWrite.cell(row=row, column=col).value = colval
        wb.save(outputDir)

    except BaseException as e:
        print(f"Critical error during writing of table {tableTitle}")
        print(f"{type(e).__name__} was caught")
        print(str(e))
    else:
        print(f"INFO: {tableTitle} written to file successfully")


def WriteTable(args, tableTitle="", rows=[]):
    print(f"Writing: {tableTitle} with {len(rows)} rows")

    if args.type == "csv":
        WriteCSV(args.outputDir,tableTitle, rows)
    elif args.type == "xlsx":
        # constructing output file dir
        tail = os.path.split(args.inputFile)[1]
        filename = tail[:-3]
        outputDir = os.path.join(args.outputDir, filename)
        WriteXLSX(outputDir + "xlsx",tableTitle, rows)
    
    global wrTables
    global wrRows

    wrTables += 1
    wrRows += len(rows)
    UpdateGui(args)

def Split(args):

    eof = False
    tableTitle = ""
    rows = []

    try:
        with open(args.inputFile, 'r', encoding="cp1252", errors="ignore") as xer:
            while not eof:
                currentLine = xer.readline().split('\t')
                currentLine[len(currentLine)-1] = currentLine[len(currentLine)-1][:-1]

                rowType = currentLine[0]

                if rowType == "%E":
                    eof = True

                if rowType == "%T":

                    # Write previous table if available and flush the rows
                    if len(rows) != 0:
                        WriteTable(args, tableTitle=tableTitle, rows=rows)
                        rows.clear()

                    tableTitle = currentLine[1]

                    if not args.allTables:
                        if tableTitle in ["POBS","RISKTYPE"]:
                            print(f"Found table \"{tableTitle}\" - Skipping")
                            
                            while xer.readline(2) != "%T":
                                # save line position for when a table is found
                                savedLine = xer.tell()

                            # new table found -> go back to the line and read the whole line
                            xer.seek(savedLine)
                            continue

                    print(f"Found table \"{tableTitle}\"")

                if rowType in ["%R", "%F"]:
                    currentLine.pop(0)
                    rows.append(currentLine)

            # Write remaining tables
            if len(rows) != 0:
                        WriteTable(args, tableTitle=tableTitle, rows=rows)
                        rows.clear()

    except BaseException as e:
        print(f"Critical error splitting XER")
        print(f"{type(e).__name__} was caught")
        print(str(e))
    else:
        print(f"INFO: Split complete successfully")
        return True
    

def SplitXer(args):
    print("INFO: Settings Confirmed")
    print(args)

    if not CheckDirectories(args): 
        UpdateGui(args,success=False)
        return
    
    if not PreCheck(args):
        UpdateGui(args,success=False)
        return
    
    if not Split(args):
        UpdateGui(args,success=False)
        return

    UpdateGui(args,success=True)
    

def StartThread(args):
    print("INFO: Starting Compute Thread...")
    _thread.start_new_thread(SplitXer, (args,))

def Main():
    args = InitParser()
    
    if not args.suppressGui: ConstructGUI(args)
    else: SplitXer(args)

if __name__ == "__main__":
    Main()
    