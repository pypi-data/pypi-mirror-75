#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of Pymetrick.  The COPYRIGHT file at the top level of
# this repository contains the full copyright notices and license terms.

"""Modulo para gestionar identificacion fiscal y monedas"""

try:
    from pymetrick.version import author as __author__, version as __version__, license as __license__, copyright as __copyright__
except ImportError:
    raise ImportError(
        'Failed to find (autogenerated) version.py '
    )

__date__ = '2012-09-21'
__credits__ = ''
__text__ = 'Tratamiento fiscal, bancos y monedas'
__file__ = 'exchequer.py'

#--- CHANGES ------------------------------------------------------------------
# 2012-09-21 v0.01 PL: - First version

import sys, os, imp
import string
import re
import urllib.request
import ssl
import logging
import logging.handlers

try:
    import simplejson as json
except:
    import json

'''
DEBUG - debug message
INFO - info message
WARNING - warn message
ERROR - error message
CRITICAL - critical message
'''
if str(os.environ.get('PYMETRICK_LOG_LEVEL',None)).upper() in ('DEBUG','INFO','WARNING','ERROR','CRITICAL'):
    LOG_LEVEL = eval('.'.join(['logging',str(os.environ.get('PYMETRICK_LOG_LEVEL')).upper()]))
else:
    LOG_LEVEL = eval('logging.WARNING')
LOG_FILENAME = '-'.join([os.path.abspath(__file__).split(os.sep)[len(os.path.abspath(__file__).split(os.sep))-1],])[:-3]
LOG = logging.getLogger(LOG_FILENAME)

if 'LD_LIBRARY_PATH' in list(os.environ.keys()):
    # CGI environment
    sys.stdout = sys.stderr
    logging.basicConfig(stream = sys.stderr, level=LOG_LEVEL, format='%(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
else:
    # not CGI environment
    logging.basicConfig(stream=sys.stderr)
    hdlr = logging.handlers.RotatingFileHandler(filename=LOG_FILENAME+'.log',mode='a', encoding='utf-8', maxBytes=1048576, backupCount=3)
    formatter = logging.Formatter('%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
    hdlr.setFormatter(formatter)
    LOG.addHandler(hdlr)
    LOG.setLevel(LOG_LEVEL)

def validate_EORI(iso_country_2='ES',nif=''):
    '''Tax license validation
       @parameters
           iso_country_2: ISO country. ES(default)
           nif:   tax license
       @return
           iso_country_2.nif  <-- if it's right
           &iso_country_2.nif <-- if it's wrong
    '''
    try:
        _nif = " ".join(re.findall("[a-zA-Z0-9]+",nif)).upper().replace(' ','')
        if iso_country_2=='AT':
            # AUSTRIA
            pass
        elif iso_country_2=='BE':
            # BELGICA
            pass
        elif iso_country_2=='BG':
            # BULGARIA
            pass
        elif iso_country_2=='CY':
            # CHIPRE
            pass
        elif iso_country_2=='CZ':
            # CHEQUIA
            pass
        elif iso_country_2=='DE':
            # ALEMANIA
            pass
        elif iso_country_2=='DK':
            # DINAMARCA
            pass
        elif iso_country_2=='EE':
            # ESTONIA
            pass
        elif iso_country_2=='EL':
            # GRECIA
            pass
        elif iso_country_2=='ES':
            _nif = " ".join(re.findall("[a-zA-Z0-9]+",nif)).upper().replace(' ','')
            ''' NIF 8 digitos + 1 caracter o 1 caracter + 7 digitos + 1 caracter
                CIF 7 digitos + 1 caracter de control
            '''
            ALPHA_NIF = 'TRWAGMYFPDXBNJZSQVHLCKE'
            '''Entidades juridicas con animo de lucro'''
            ALPHA_CIF_a = 'JABCDEFGHI'
            '''Personas juridicas sin animo de lucro '''
            ALPHA_CIF_b = 'NPQRSW'
            '''Personas fisicas extranjeras, menores de 14 o no residentes'''
            ALPHA_CIF_c = 'KLMXYZ'
            '''Comprobar si es un NIF'''
            if len(_nif)>0:
                if _nif[0] in '0123456789':
                    _nif_number = ' '.join(re.findall("[0-9]+",_nif))
                    ctrl = (int(_nif_number))%23
                    __nif = _nif_number+ALPHA_NIF[ctrl]
                    if __nif.strip().upper() == _nif:
                        __nif = _nif_number.zfill(8)+ALPHA_NIF[ctrl]
                        return (iso_country_2,__nif)
                else:
                    '''Comprobar si es una Persona fisica extranjera, menor de 14 o no residente'''
                    if _nif[0] in ALPHA_CIF_c:
                        _nif_number = ' '.join(re.findall("[0-9]+",_nif))
                        '''Si contiene 7 digitos y comienza por X Y Z, sustituir X Y Z por 0 1 2'''
                        ctrl = int(_nif_number)
                        if len(_nif_number) == 7 and len(_nif) == 9:
                            if _nif[0] in 'XYZ':
                                n = {'X':'0','Y':'1','Z':'2'}
                                ctrl = int(n[_nif[0]]+_nif_number)
                        ctrl = ctrl%23
                        __nif = _nif[0]+_nif_number+ALPHA_NIF[ctrl]
                        if __nif.strip().upper() == _nif:
                            __nif = _nif[0]+_nif_number.zfill(7)+ALPHA_NIF[ctrl]
                            return (iso_country_2,__nif)
                    '''Comprobar si es una Persona juridica sin animo de lucro'''
                    if _nif[0] in ALPHA_CIF_a:
                        if 7<len(_nif)<=9:
                            _nif_number = ' '.join(re.findall("[0-9]+",_nif))
                            '''obtener posicion par e impar'''
                            n = 0
                            n_ctrl = 0
                            for n in range(0,len(_nif_number)-1):
                                if (n+1)%2 == 0:
                                    n_ctrl += int(_nif_number[n])
                                else:
                                    n_ctrl += (int(_nif_number[n])*2%10)+int(int(_nif_number[n])*2/10)
                            ctrl = n_ctrl%10
                            ctrl = 10 - ctrl
                            if ctrl>9:
                                ctrl = 0
                            __nif = _nif[0]+_nif_number[0:7]+repr(ctrl)
                            if __nif.strip().upper() == _nif:
                                __nif = _nif[0]+_nif_number[0:7].zfill(7)+repr(ctrl)
                                return (iso_country_2,__nif)
                    '''Comprobar si es una Persona juridica sin animo de lucro'''
                    if _nif[0] in ALPHA_CIF_b:
                        if 7<len(_nif)<=9:
                            _nif_number = ' '.join(re.findall("[0-9]+",_nif))
                            '''obtener posicion par e impar'''
                            n = 0
                            n_ctrl = 0
                            for n in range(0,len(_nif_number)-1):
                                if (n+1)%2 == 0 == 0:
                                    n_ctrl += int(_nif_number[n])
                                else:
                                    n_ctrl += (int(_nif_number[n])*2%10)+int(int(_nif_number[n])*2/10)
                            ctrl = n_ctrl%10
                            ctrl = 10 - ctrl
                            __nif = _nif[0]+_nif_number[0:7]+chr(ctrl)
                            if __nif.strip().upper() == _nif:
                                __nif = _nif[0]+_nif_number[0:7].zfill(7)+chr(ctrl)
                                return (iso_country_2,__nif)
            # identificacion fiscal ES incorrecta
            return (iso_country_2,'&'+_nif)
        elif iso_country_2=='FI':
            # FINLANDIA
            pass
        elif iso_country_2=='FR':
            # FRANCIA
            pass
        elif iso_country_2=='HR':
            # CROACIA
            pass
        elif iso_country_2=='HU':
            # HUNGRIA
            pass
        elif iso_country_2=='IE':
            # IRLANDA
            pass
        elif iso_country_2=='IT':
            # ITALIA
            pass
        elif iso_country_2=='LT':
            # LITUANIA
            pass
        elif iso_country_2=='LU':
            # LUXEMBURGO
            pass
        elif iso_country_2=='LV':
            # LETONIA
            pass
        elif iso_country_2=='MT':
            # MALTA
            pass
        elif iso_country_2=='NL':
            # PAISES BAJOS
            pass
        elif iso_country_2=='PL':
            # POLONIA
            pass
        elif iso_country_2=='PT':
            # PORTUGAL
            pass
        elif iso_country_2=='RO':
            # RUMANIA
            pass
        elif iso_country_2=='SE':
            # SUECIA
            pass
        elif iso_country_2=='SI':
            # ESLOVENIA
            pass
        elif iso_country_2=='SK':
            # ESLOVAQUIA
            pass
        else:
            # identificacion fiscal ajena
            return ('00',_nif)

        # identificacion fiscal NO comprobada
        return (iso_country_2,_nif)
    except Exception as e:
        if hasattr(e, 'message'):
            LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
        else:
            LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))



def currencyExchangeEUR(dest=None):
    '''Get daily list of changes from ECB in XML format
       and extract currency exchange information from 1 EUR
       @parameters
           dest: ISO currency
       @return
           [changes,symbol]  <-- if it's right
           [0,'']            <-- if it's wrong
    '''
    try:
        currency_list = list()
        currency_dict = dict()
        url = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"
        if (not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None)): 
            ssl._create_default_https_context = ssl._create_unverified_context
        currency = urllib.request.urlopen(url, context=ssl.SSLContext()).read()
        buscar = b"currency\s\'[\w{3}]\s\'?rate=\'(\d{4,7}.)\'/>"
        l_currency = re.findall(b"currency='[\w]{3}'\srate='[\d]{1,5}[.]?[\d]{1,5}'",currency)
        for m in l_currency:
            currency_list = list(m.decode().replace('currency=','').replace(' rate','').replace("'",'').split('='))
            currency_dict[currency_list[0]]=float(currency_list[1])
        if dest is not None and dest in currency_dict:
            symbol = currencyCode(code=dest)[-1]
            return [currency_dict[dest],symbol]
        else:
            return [0,'']
    except Exception as e:
        if hasattr(e, 'message'):
            LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
        else:
            LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))


def currencyCode(code='EUR'):
    '''Check currency
       @parameters
           code: ISO currency
       @return
           [ISO currency,symbol]  <-- if it's right
           ['','']                <-- if it's wrong
    '''
    try:
        _code =''
        # return [ISO, symbol]
        _code_list = ['','']
        currency_dict = {'USD':'$',
                        'EUR':'eur|€',
                        'JPY':'yen|円|¥',
                        'BGN':'lev|leva|лев|лева',
                        'CZK':'koruna česká|Kč',
                        'DKK':'krone|kroner|kr',
                        'GBP':'pound sterling|£',
                        'HUF':'forint',
                        'PLN':'esloti|złoty|zł',
                        'RON':'leu|lei',
                        'SEK':'krona|kronor',
                        'CHF':'franken|franc|franco',
                        'ISK':'króna|krónur|kr',
                        'NOK':'krone|kroner|kr',
                        'HRK':'kuna',
                        'RUB':'rublo|рубль|₽',
                        'TRY':'lira|Türk lirası',
                        'AUD':'australian dollar',
                        'BRL':'real|reais|R$',
                        'CAD':'canadian dollar|dollar canadien',
                        'CNY':'renminbi|RMB|yuan|人民币|人民幣|¥',
                        'HKD':'港元|港幣|HK$',
                        'IDR':'rupia|rupiah|Rp',
                        'ILS':'שקל חדש|₪',
                        'INR':'rupia|रुपया| روپیہ|₹',
                        'KRW':'대한민국 원|大韓民國 圓|daehan minguk weon|taehan minkuk wŏn|원|圓|weon|wŏn|₩',
                        'MXN':'peso mexicano|$',
                        'MYR':'ringgit|ريڠݢيت مليسيا|RM',
                        'NZD':'new zealand dollar|NZ$',
                        'PHP':'piso|php|₱',
                        'SGD':'singaporean dollar|元|வெள்ளி|ringgit|新加坡元|சிங்கப்பூர் வெள்ளி|S$',
                        'THB':'baht|บาท|฿',
                        'ZAR':'rand|R'
                       }
        if code.upper() in currency_dict.keys():
            _code = code
        else:
            for n in currency_dict.keys():
                currency_list = {x.lower() if type(x).__name__=='str' else x for x in currency_dict[n].split('|')}
                if code in currency_list:
                    _code = n
        if len(_code)>0 and _code in currency_dict.keys():
            # [ISO, symbol]
            _code_list = [_code,currency_dict[_code].split('|')[-1]]
        return _code_list
    except Exception as e:
        if hasattr(e, 'message'):
            LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
        else:
            LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

if __name__ == '__main__' :
    print ('''copyright {0}'''.format( __copyright__))
    print ('''license {0}'''.format( __license__))
    print ('''version {0}'''.format( __version__))
    if len(sys.argv) < 2:
        sys.stderr.write("for help use -h o --help")
    elif sys.argv[1]=='-h' or sys.argv[1]=='--help':
        print ('''
        Tratamiento de identificaciones fiscales\n\n
        y gestion de monedas                        ''')

