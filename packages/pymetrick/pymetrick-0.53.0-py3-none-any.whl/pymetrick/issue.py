#!/usr/bin/env python3
# -*- coding: iso-8859-1 -*-

# This file is part of Pymetrick.  The COPYRIGHT file at the top level of
# this repository contains the full copyright notices and license terms.

"""Modulo para emitir documentos"""
from __future__ import division, with_statement

try:
    from pymetrick.version import author as __author__, version as __version__, license as __license__, copyright as __copyright__
except ImportError:
    raise ImportError(
        'Failed to find (autogenerated) version.py '
    )

__date__ = '2019-09-08'
__modify__ = '2019-09-08'
__credits__ = ''
__text__ = 'Issue documents'
__file__ = 'issue.py'

#--- CHANGES ------------------------------------------------------------------
# 2019-09-08 v0.50.0 PL: - First version




import os, sys, zlib, struct, re, tempfile, struct
import copy
from datetime import datetime
from functools import wraps
import math
import errno

import logging
import logging.handlers

from pymetrick.fpdf import FPDF

from pymetrick.ttfonts import TTFontFile
from pymetrick.fonts import fpdf_charwidths
from pymetrick.php import substr, sprintf, print_r, UTF8ToUTF16BE, UTF8StringToArray
from pymetrick.py3k import PY3K, pickle, urlopen, Image, basestring, unicode, exception, b, hashpath

'''
DEBUG - debug message
INFO - info message
WARNING - warn message
ERROR - error message
CRITICAL - critical message
'''
if str(os.environ.get('PYMETRICK_LOG_LEVEL',None)).upper() in ('DEBUG','INFO','WARNING','ERROR','CRITICAL'):
    LOG_LEVEL = eval('.'.join(['logging',str(os.environ.get('PYMETRICK_LOG_LEVEL')).upper()]))
else:
    LOG_LEVEL = eval('logging.WARNING')
LOG_FILENAME = '-'.join([os.path.abspath(__file__).split(os.sep)[len(os.path.abspath(__file__).split(os.sep))-1],])[:-3]
LOG = logging.getLogger(LOG_FILENAME)

if 'LD_LIBRARY_PATH' in list(os.environ.keys()):
    # CGI environment
    sys.stdout = sys.stderr
    logging.basicConfig(stream = sys.stderr, level=LOG_LEVEL, format='%(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
else:
    # not CGI environment
    logging.basicConfig(stream=sys.stderr)
    hdlr = logging.handlers.RotatingFileHandler(filename=LOG_FILENAME+'.log',mode='a', encoding='utf-8', maxBytes=1048576, backupCount=3)
    formatter = logging.Formatter('%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s')
    hdlr.setFormatter(formatter)
    LOG.addHandler(hdlr)
    LOG.setLevel(LOG_LEVEL)

class Order(FPDF):

    def config(self,*args,**kwargs):
        ''' * logo          text  imagen logotipo
            * letterhead    list  membrete
            * client        list  datos de cliente
            * title         text  tipo de documento
            * title_head    list  titulo columnas
            * title_line    list  datos de documento
            * body_head     list  titulo columnas
              body_line     dict  lineas detalle
            * footer_head   list  titulos pie
              footer_line   dict  lineas pie
            * terms_of_sale text  Condiciones
            * authorization text  autorizacion legal
        '''
        try:
            self.allowed_data = {'logo':'','letterhead':list(),'client':list(),'title':'','title_head':list(),'title_line':list(),'body_head':list(),'footer_head':list(),'terms_of_sale':'','authorization':''}
            for n in list(kwargs.keys()):
                if n in self.allowed_data:
                    self.allowed_data[n] = kwargs[n]

            # Add page
            self.add_page()
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def header(self):
        try:
            # lineas
            self.set_line_width(width=0.03)
            self.rounded_rect(100,12,105,35.5,0.9)     # datos cliente
            self.rounded_rect(10,49,195,9.5,0.5)       # datos documento
            self.set_line_width(width=0.1)
            self.rounded_rect(10,60,195,193.5,0.5)     # detalle pedido
            self.set_line_width(width=0.07)
            self.line(11,65,204,65)
            self.set_line_width(width=0.1)
            self.rounded_rect(10,255,195,25,0.5)       # total pedido
            self.set_line_width(width=0.07)
            self.line(11,260,204,260)
            self.set_line_width(width=0.1)
            # sombras
            self.line(205.3,13,205.3,47)
            self.line(205.3,50,205.3,57)
            self.line(205.3,61,205.3,251)
            self.line(205.3,256,205.3,279)

            # Logo
            if self.allowed_data['logo'] is not None:
                self.image(self.allowed_data['logo'], 10, 8, 20)
            # Arial bold 15
            self.set_font('Arial', '', 6)
            # letterhead = ['RAZON SOCIAL','DIRECCION','COD.POSTAL-LOCALIDAD','PROVINCIA','CIF','TELEFONO','PAGINA WEB','CORREO_ELECTRONICO']
            nY = 15
            for n in self.allowed_data['letterhead']:
                if nY == 15:
                    self.set_font('Arial','B',8)
                else:
                    self.set_font('Arial','',6)
                self.text(33, nY, n)
                nY += 3
            # client = ['RAZON SOCIAL','DIRECCION','COD.POSTAL-LOCALIDAD','PROVINCIA','CIF','TELEFONO','PAGINA WEB','CORREO_ELECTRONICO']
            # Arial bold 15
            self.set_font('Arial', '', 9)
            nY = 15
            for n in self.allowed_data['client']:
                self.text(103, nY, n)
                nY += 3
            # title
            self.set_font('Arial','B',10);
            self.text(11,46,self.allowed_data['title'])
            self.set_font('Courier','',8);
            # registro
            if len(self.allowed_data['authorization'])>0:
                self.rotateText(8,250,self.allowed_data['authorization'],90)

            # background color
            #self.set_fill_color(211,211,211)   # grey
            #pdf.cell(190, 6, 'Testing...', 0, 1, 'L', fill=True)
            #pdf.cell(193, 6, 'Testing...', 0, 1, 'L', fill=False)
            # textos
            self.set_font('Courier','',9);
            # title_head 'NUM.ALBARAN    FECHA'
            if len(self.allowed_data['title_head'])>0:
                self.text(11,52,self.allowed_data['title_head'])
            # title_line '2017000100    07/11/2017'
            if len(self.allowed_data['title_line'])>0:
                self.text(11,55,self.allowed_data['title_line'])

            #  body_head '{0:^5s} {1:^13s} {2:^38s} {3:^8s} {4:^5s} {5:^8s} {6:^12s} {7:^4s}% {8:^3s} {9:^13s}'.format('REF.','EAN13','PRODUCTO','PZS/CAJA','CAJAS','UNIDADES','PRECIO','DTO.','IVA','IMPORTE')
            self.set_font('Courier','B',8);
            self.set_fill_color(211,211,211)   # background cell color grey
            self.set_xy(11, 61)   # 11,64 with .text
            if len(self.allowed_data['body_head'])>0:
                self.cell(193,3,self.allowed_data['body_head'],0,1,'L', fill=True)
            # footer_head '{0:^1s} {1:^9s} {2:^6s}% {3:^8s} {4:^9s} {5:^5s}% {6:^7s} {7:^5s}% {8:^9s} {9:^9s}'.format(' ','Imp.Neto','Dto.','Imp.Dto.','Base Imp.','IVA','Imp.IVA','R.EQ.','Imp.R.EQ.','Total')
            self.set_xy(11, 256)   # 11,258 with .text
            if len(self.allowed_data['footer_head'])>0:
                self.cell(193,3,self.allowed_data['footer_head'],0,1,'L', fill=True)
            # configurar documento
            if len(self.allowed_data['title'])>0:
                self.set_title(self.allowed_data['title'])
            if len(self.allowed_data['letterhead'])>0:
                self.set_author(self.allowed_data['letterhead'][0])
                self.set_creator('pymetrick')

            # Line break
            self.ln(20)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))

    # Page footer
    def footer(self):
        try:
            # Position at 1.5 cm from bottom
            self.set_y(-15)
            # Arial italic 7
            self.set_font('Arial', 'I', 7)
            # Page number
            self.cell(0, 5, 'Pagina ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')
            # Terms
            self.set_y(-12)
            self.set_font('Arial','', 5)
            self.multi_cell( w=200, h=3, txt=self.allowed_data['terms_of_sale'], border = 0, align = 'J', fill = False, split_only=False)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))

    def rotateText(self,x,y,txt,angle):
        #Text rotated around its origin
        try:
            self.rotate(angle,x,y)
            self.text(x,y,txt)
            self.rotate(0)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))

    def rotateImage(self,file,x,y,w,h,angle):
        #Image rotated around its upper-left corner
        try:
            self.rotate(angle,x,y)
            self.image(file,x,y,w,h)
            self.rotate(0)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def rounded_rect(self,x, y, w, h, r,corners='1234',style=''):
        "Draw a rounded rectangle"
        try:
            if(style=='F'):
                op='f'
            elif(style=='FD' or style=='DF'):
                op='B'
            else:
                op='S'

            myArc = 4/3 * (math.sqrt(2) - 1);
            self._out(sprintf('%.2f %.2f m',(x+r)*self.k,(self.h-y)*self.k ))

            xc = x+w-r;
            yc = y+r;
            self._out(sprintf('%.2f %.2f l', xc*self.k,(self.h-y)*self.k ))
            if (corners.find('2') < 0):
                self._out(sprintf('%.2f %.2f l', (x+w)*self.k,(self.h-y)*self.k ))
            else:
                self._arc(xc + r*myArc, yc - r, xc + r, yc - r*myArc, xc + r, yc)

            xc = x+w-r;
            yc = y+h-r;
            self._out(sprintf('%.2f %.2f l',(x+w)*self.k,(self.h-yc)*self.k));
            if (corners.find('3') < 0):
                self._out(sprintf('%.2f %.2f l',(x+w)*self.k,(self.h-(y+h))*self.k));
            else:
                self._arc(xc + r, yc + r*myArc, xc + r*myArc, yc + r, xc, yc + r)

            xc = x+r;
            yc = y+h-r;
            self._out(sprintf('%.2f %.2f l',xc*self.k,(self.h-(y+h))*self.k));
            if (corners.find('4') < 0):
                self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.h-(y+h))*self.k))
            else:
                self._arc(xc - r*myArc, yc + r, xc - r, yc + r*myArc, xc - r, yc)

            xc = x+r ;
            yc = y+r;
            self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.h-yc)*self.k ))
            if (corners.find('1') < 0):
                self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.hp-y)*self.k ))
                self._out(sprintf('%.2f %.2f l',(x+r)*self.k,(self.h-y)*self.k ))
            else:
                self._arc(xc - r, yc - r*myArc, xc - r*myArc, yc - r, xc, yc - r)
            self._out(op);
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def _arc(self, x1, y1, x2, y2, x3, y3):
        try:
            h = self.h
            self._out(sprintf('%.2f %.2f %.2f %.2f %.2f %.2f c', x1*self.k, (h-y1)*self.k,
                x2*self.k, (h-y2)*self.k, x3*self.k, (h-y3)*self.k))
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    # EAN14 and UPC-A
    def EAN13(self, x, y, barcode_, h=16, w=.35):
        try:
            self.__barcode__(x,y,barcode_,h,w,13)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def UPC_A(self, x, y, barcode_, h=16, w=.35):
        try:
            self.__barcode__(x,y,barcode_,h,w,12)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def getCheckDigit(self, barcode_):
        # Compute the check digit
        try:
            sum=0
            for i in range(1,12,2):
                sum += 3*int(barcode_[i])
            for i in range(0,11,2):
                sum+=int(barcode_[i])
            r=sum%10
            if(r>0):
                r=10-r
            return str(r)
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def testCheckDigit(self, barcode_):
        #Test validity of check digit
        try:
            sum=0
            for i in range(1,12,2):
                sum += 3*int(barcode_[i])
            for i in range(0,11,2):
                sum += int(barcode_[i])
            return (sum+int(barcode_[-1:]))%10==0
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))


    def __barcode__(self, x, y, barcode_, h, w, lng):
        try:
            # Padding
            barcode_=barcode_.rjust(lng-1,'0')
            if lng==12:
                barcode_ = '0' + barcode_
            # Add or control the check digit
            if len(barcode_) == 12:
                barcode_ += self.getCheckDigit(barcode_)
            elif not self.testCheckDigit(barcode_):
                self.error('Incorrect check digit')
            #Convert digits to bars
            codes={
                'A':{
                    '0':'0001101','1':'0011001','2':'0010011','3':'0111101','4':'0100011',
                    '5':'0110001','6':'0101111','7':'0111011','8':'0110111','9':'0001011'},
                'B':{
                    '0':'0100111','1':'0110011','2':'0011011','3':'0100001','4':'0011101',
                    '5':'0111001','6':'0000101','7':'0010001','8':'0001001','9':'0010111'},
                'C':{
                    '0':'1110010','1':'1100110','2':'1101100','3':'1000010','4':'1011100',
                    '5':'1001110','6':'1010000','7':'1000100','8':'1001000','9':'1110100'}
                }
            parities={
                '0':['A','A','A','A','A','A'],
                '1':['A','A','B','A','B','B'],
                '2':['A','A','B','B','A','B'],
                '3':['A','A','B','B','B','A'],
                '4':['A','B','A','A','B','B'],
                '5':['A','B','B','A','A','B'],
                '6':['A','B','B','B','A','A'],
                '7':['A','B','A','B','A','B'],
                '8':['A','B','A','B','B','A'],
                '9':['A','B','B','A','B','A']
                }
            code_='101';
            p=parities[barcode_[0]]
            for i in range(1,7):
                code_ +=codes[p[i-1]][barcode_[i]]
            code_ +='01010'
            for i in range(7,13):
                code_ +=codes['C'][barcode_[i]]
            code_ +='101'
            #Draw bars
            for i in range(0,len(code_)):
                if code_[i]=='1':
                    self.rect(x+i*w,y,w,h,'F')
            #Print text uder barcode
            self.set_font('Arial','',12);
            self.text(x,y+h+11/self.k,barcode_[-lng:])
        except Exception as e:
            tb = sys.exc_info()[2]
            LOG.error('<%s> in line %s !!!' % (str(e),tb.tb_lineno))

class Tag(FPDF):
    """ Print tag for store with image and more data
       @parameters on dict with keys:
       logo          text  image logo
       dealer        text  dealer name
       provider      list  provider data [provider code, item number]
       sku           text  sku of product
       name          text  name of product
       EAN13         text  codebar of product
       rate          list  rate of product

       @return file.pdf

       @example: label_list (list) with sku codes of products or codebars.
        if len(label_list)>0:
            pdf = Tag(orientation='P',unit='mm',format='A4')
            pdf.alias_nb_pages()
            pdf.set_line_width(width=0.1)
            pdf.set_compression(compress=2)
            pdf.set_margins(9,1,-5)
            p = list()
            bd = mainSQLite()
            for n in range(0,len(label_list)):
                if len(label_list[n])>0:
                    g = dict()
                    g['logo'] = image_path+'logo.png'
                    g['img'] = image_path+regs[0]+'.jpg'
                    g['dealer'] = dealer_name
                    g['sku'] = regs[0]
                    g['provider'] = [regs[2].lstrip('0'),regs[3].replace('None','')]
                    g['name'] = regs[1]
                    if len(regs[5])>0:
                        g['EAN13'] = regs[5][1:-1]
                    else:
                        g['EAN13'] = '9990000'+regs[0]
                    g['rate'] = [(('%.4f' % regs[4]).rstrip('0').rstrip('.')).replace('.',','),'EUR.']
                    p.append(g)

            pdf.config(p)
            pdf.output("labelpdf.pdf","F")
    """

    def config(self,*args,**kwargs):
        try:
            self.allowed_data = {'logo':'','img':'','dealer':'','sku':'','provider':list(),'EAN13':'','name':'','rate':list()}
            self.tags = list()
            for n in args[0]:      # list of data label
                _tag = copy.deepcopy(self.allowed_data)
                for m in self.allowed_data.keys():
                    _tag[m] = n[m]
                self.tags.append(_tag)
            self.add_page()       # parent function
            self.body_page()
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    def body_page(self):

        try:

            self.tag = dict()
            self.tag_list = list()
            for m in range(len(self.tags)):
                self.tag = dict()
                for n in list(self.tags[m].keys()):
                    if n in self.allowed_data:
                        self.tag[n] = self.tags[m][n]

                self.tag_list.append(self.tag)

            nY = 16
            np = 0
            for m in range(len(self.tag_list)):
                # Arial bold 15
                self.set_font('Arial', '', 6)
                # Logo
                if os.path.isfile(self.tag_list[m]['logo']):
                    self.image(self.tag_list[m]['logo'], 10, nY-7, 10)
                # legalname
                self.set_font('Arial','B',8)
                self.text(33, nY-7, self.tag_list[m]['dealer'])

                # SKU
                self.set_font('Arial','B',24)
                self.text(150, nY-2, self.tag_list[m]['sku'])
                
                if os.path.isfile(self.tag_list[m]['img']):
                    self.image(self.tag_list[m]['img'], x=20, y=nY+2, h=40, type='jpg')

                # Codebar
                if len(self.tag_list[m]['EAN13'])>0:
                    self.EAN13(33,nY-4,self.tag_list[m]['EAN13'],h=4)

                # Product name
                if len(self.tag_list[m]['name'])>24:
                    self.set_font('Arial','',24)
                    self.text(70, nY+14, self.tag_list[m]['name'][0:24])
                    self.text(70, nY+24, self.tag_list[m]['name'][25:48])
                else:
                    self.set_font('Arial','',24)
                    self.text(70, nY+14, self.tag_list[m]['name'])

                # Rate
                self.set_font('Arial','B',28)
                self.text(120, nY+43, ' '.join(self.tag_list[m]['rate']))

                # Provider and Item number
                self.set_font('Arial','B',20)
                self.text(70, nY+43, ' '.join(self.tag_list[m]['provider']))

                nY += 56
                np += 1

                if np == 5:
                    self.add_page()
                    nY = 16
                    np = 0
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    def header(self):

        try:

            # lineas
            self.set_line_width(width=0.1)
            self.line(11,6,204,6)
            self.line(11,62,204,62)
            self.line(11,118,204,118)
            self.line(11,174,204,174)
            self.line(11,230,204,230)
            self.line(11,286,204,286)
             # textos
            self.set_font('Courier','',8);
            # configurar documento
            self.set_creator('pymetrick')

            # Line break
            self.ln(20)
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    # Page footer
    def footer(self):
        # Position at 1.5 cm from bottom
        pass

    def rotateText(self,x,y,txt,angle):
        #Text rotated around its origin
        self.rotate(angle,x,y)
        self.text(x,y,txt)
        self.rotate(0)

    def rotateImage(self,file,x,y,w,h,angle):
        #Image rotated around its upper-left corner
        self.rotate(angle,x,y)
        self.image(file,x,y,w,h)
        self.rotate(0)

    def rounded_rect(self,x, y, w, h, r,corners='1234',style=''):
        "Draw a rounded rectangle"

        try:
            if(style=='F'):
                op='f'
            elif(style=='FD' or style=='DF'):
                op='B'
            else:
                op='S'

            myArc = 4/3 * (math.sqrt(2) - 1);
            self._out(sprintf('%.2f %.2f m',(x+r)*self.k,(self.h-y)*self.k ))

            xc = x+w-r;
            yc = y+r;
            self._out(sprintf('%.2f %.2f l', xc*self.k,(self.h-y)*self.k ))
            if (corners.find('2') < 0):
                self._out(sprintf('%.2f %.2f l', (x+w)*self.k,(self.h-y)*self.k ))
            else:
                self._arc(xc + r*myArc, yc - r, xc + r, yc - r*myArc, xc + r, yc)

            xc = x+w-r;
            yc = y+h-r;
            self._out(sprintf('%.2f %.2f l',(x+w)*self.k,(self.h-yc)*self.k));
            if (corners.find('3') < 0):
                self._out(sprintf('%.2f %.2f l',(x+w)*self.k,(self.h-(y+h))*self.k));
            else:
                self._arc(xc + r, yc + r*myArc, xc + r*myArc, yc + r, xc, yc + r)

            xc = x+r;
            yc = y+h-r;
            self._out(sprintf('%.2f %.2f l',xc*self.k,(self.h-(y+h))*self.k));
            if (corners.find('4') < 0):
                self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.h-(y+h))*self.k))
            else:
                self._arc(xc - r*myArc, yc + r, xc - r, yc + r*myArc, xc - r, yc)

            xc = x+r ;
            yc = y+r;
            self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.h-yc)*self.k ))
            if (corners.find('1') < 0):
                self._out(sprintf('%.2f %.2f l',(x)*self.k,(self.hp-y)*self.k ))
                self._out(sprintf('%.2f %.2f l',(x+r)*self.k,(self.h-y)*self.k ))
            else:
                self._arc(xc - r, yc - r*myArc, xc - r*myArc, yc - r, xc, yc - r)
            self._out(op);

        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    def _arc(self, x1, y1, x2, y2, x3, y3):
        h = self.h
        self._out(sprintf('%.2f %.2f %.2f %.2f %.2f %.2f c', x1*self.k, (h-y1)*self.k,
            x2*self.k, (h-y2)*self.k, x3*self.k, (h-y3)*self.k))

    # EAN14 and UPC-A
    def EAN13(self, x, y, barcode_, h=16, w=.35):
        self.__barcode__(x,y,barcode_,h,w,13)

    def UPC_A(self, x, y, barcode_, h=16, w=.35):
        self.__barcode__(x,y,barcode_,h,w,12)

    def getCheckDigit(self, barcode_):
        # Compute the check digit
        try:

            sum=0
            for i in range(1,12,2):
                sum += 3*int(barcode_[i])
            for i in range(0,11,2):
                sum+=int(barcode_[i])
            r=sum%10
            if(r>0):
                r=10-r
            return str(r)
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    def testCheckDigit(self, barcode_):
        #Test validity of check digit
        try:
            sum=0
            for i in range(1,12,2):
                sum += 3*int(barcode_[i])
            for i in range(0,11,2):
                sum += int(barcode_[i])
            return (sum+int(barcode_[-1:]))%10==0
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

    def __barcode__(self, x, y, barcode_, h, w, lng):

        try:
            # Padding
            barcode_=barcode_.rjust(lng-1,'0')
            if lng==12:
                barcode_ = '0' + barcode_
            # Add or control the check digit
            if len(barcode_) == 12:
                barcode_ += self.getCheckDigit(barcode_)
            elif not self.testCheckDigit(barcode_):
                self.error('Incorrect check digit')
            #Convert digits to bars
            codes={
                'A':{
                    '0':'0001101','1':'0011001','2':'0010011','3':'0111101','4':'0100011',
                    '5':'0110001','6':'0101111','7':'0111011','8':'0110111','9':'0001011'},
                'B':{
                    '0':'0100111','1':'0110011','2':'0011011','3':'0100001','4':'0011101',
                    '5':'0111001','6':'0000101','7':'0010001','8':'0001001','9':'0010111'},
                'C':{
                    '0':'1110010','1':'1100110','2':'1101100','3':'1000010','4':'1011100',
                    '5':'1001110','6':'1010000','7':'1000100','8':'1001000','9':'1110100'}
                }
            parities={
                '0':['A','A','A','A','A','A'],
                '1':['A','A','B','A','B','B'],
                '2':['A','A','B','B','A','B'],
                '3':['A','A','B','B','B','A'],
                '4':['A','B','A','A','B','B'],
                '5':['A','B','B','A','A','B'],
                '6':['A','B','B','B','A','A'],
                '7':['A','B','A','B','A','B'],
                '8':['A','B','A','B','B','A'],
                '9':['A','B','B','A','B','A']
                }
            code_='101';
            p=parities[barcode_[0]]
            for i in range(1,7):
                code_ +=codes[p[i-1]][barcode_[i]]
            code_ +='01010'
            for i in range(7,13):
                code_ +=codes['C'][barcode_[i]]
            code_ +='101'
            #Draw bars
            for i in range(0,len(code_)):
                if code_[i]=='1':
                    self.rect(x+i*w,y,w,h,'F')
            #Print text uder barcode
            self.set_font('Arial','',12);
            self.text(x,y+h+11/self.k,barcode_[-lng:])
        except Exception as e:
            if hasattr(e, 'message'):
                LOG.error('<%s> in line %s !!!' % (e.message,format(sys.exc_info()[-1].tb_lineno)))
            else:
                LOG.error('<%s> in line %s !!!' % (e,format(sys.exc_info()[-1].tb_lineno)))

if __name__ == "__main__":

    print ('''copyright {0}'''.format( __copyright__))
    print ('''license {0}'''.format( __license__))
    print ('''version {0}'''.format( __version__))
    if len(sys.argv) < 2:
        sys.stderr.write("For help use -h o --help")
    elif sys.argv[1]=='-h' or sys.argv[1]=='--help':
        print (''' Issue documents ''')




    
