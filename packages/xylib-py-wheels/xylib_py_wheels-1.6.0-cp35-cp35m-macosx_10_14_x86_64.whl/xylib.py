# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _xylib
else:
    import _xylib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


XYLIB_VERSION = _xylib.XYLIB_VERSION
class xylibFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_xylib.xylibFormat_name_get, _xylib.xylibFormat_name_set)
    desc = property(_xylib.xylibFormat_desc_get, _xylib.xylibFormat_desc_set)
    exts = property(_xylib.xylibFormat_exts_get, _xylib.xylibFormat_exts_set)
    binary = property(_xylib.xylibFormat_binary_get, _xylib.xylibFormat_binary_set)
    multiblock = property(_xylib.xylibFormat_multiblock_get, _xylib.xylibFormat_multiblock_set)
    valid_options = property(_xylib.xylibFormat_valid_options_get, _xylib.xylibFormat_valid_options_set)

    def __init__(self):
        _xylib.xylibFormat_swiginit(self, _xylib.new_xylibFormat())
    __swig_destroy__ = _xylib.delete_xylibFormat

# Register xylibFormat in _xylib:
_xylib.xylibFormat_swigregister(xylibFormat)


def xylib_get_version() -> "char const *":
    return _xylib.xylib_get_version()

def xylib_get_format(n: "int") -> "xylibFormat const *":
    return _xylib.xylib_get_format(n)

def xylib_get_format_by_name(name: "char const *") -> "xylibFormat const *":
    return _xylib.xylib_get_format_by_name(name)

def xylib_load_file(path: "char const *", format_name: "char const *", options: "char const *") -> "void *":
    return _xylib.xylib_load_file(path, format_name, options)

def xylib_get_block(dataset: "void *", block: "int") -> "void *":
    return _xylib.xylib_get_block(dataset, block)

def xylib_count_columns(block: "void *") -> "int":
    return _xylib.xylib_count_columns(block)

def xylib_count_rows(block: "void *", column: "int") -> "int":
    return _xylib.xylib_count_rows(block, column)

def xylib_get_data(block: "void *", column: "int", row: "int") -> "double":
    return _xylib.xylib_get_data(block, column, row)

def xylib_dataset_metadata(dataset: "void *", key: "char const *") -> "char const *":
    return _xylib.xylib_dataset_metadata(dataset, key)

def xylib_block_metadata(block: "void *", key: "char const *") -> "char const *":
    return _xylib.xylib_block_metadata(block, key)

def xylib_free_dataset(dataset: "void *") -> "void":
    return _xylib.xylib_free_dataset(dataset)
class FormatInfo(xylibFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ctor = property(_xylib.FormatInfo_ctor_get, _xylib.FormatInfo_ctor_set)
    checker = property(_xylib.FormatInfo_checker_get, _xylib.FormatInfo_checker_set)

    def __init__(self, name_: "char const *", desc_: "char const *", exts_: "char const *", binary_: "bool", multiblock_: "bool", ctor_: "xylib::FormatInfo::t_ctor", checker_: "xylib::FormatInfo::t_checker", valid_options_: "char const *"=None):
        _xylib.FormatInfo_swiginit(self, _xylib.new_FormatInfo(name_, desc_, exts_, binary_, multiblock_, ctor_, checker_, valid_options_))
    __swig_destroy__ = _xylib.delete_FormatInfo

# Register FormatInfo in _xylib:
_xylib.FormatInfo_swigregister(FormatInfo)

class FormatError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg: "std::string const &"):
        _xylib.FormatError_swiginit(self, _xylib.new_FormatError(msg))
    __swig_destroy__ = _xylib.delete_FormatError

# Register FormatError in _xylib:
_xylib.FormatError_swigregister(FormatError)

class RunTimeError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg: "std::string const &"):
        _xylib.RunTimeError_swiginit(self, _xylib.new_RunTimeError(msg))
    __swig_destroy__ = _xylib.delete_RunTimeError

# Register RunTimeError in _xylib:
_xylib.RunTimeError_swigregister(RunTimeError)

class Column(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _xylib.delete_Column

    def get_name(self) -> "std::string const &":
        return _xylib.Column_get_name(self)

    def get_point_count(self) -> "int":
        return _xylib.Column_get_point_count(self)

    def get_value(self, n: "int") -> "double":
        return _xylib.Column_get_value(self, n)

    def get_min(self) -> "double":
        return _xylib.Column_get_min(self)

    def get_max(self, point_count: "int"=0) -> "double":
        return _xylib.Column_get_max(self, point_count)

    def get_step(self) -> "double":
        return _xylib.Column_get_step(self)

# Register Column in _xylib:
_xylib.Column_swigregister(Column)

class MetaData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def has_key(self, key: "std::string const &") -> "bool":
        return _xylib.MetaData_has_key(self, key)

    def get(self, key: "std::string const &") -> "std::string const &":
        return _xylib.MetaData_get(self, key)

    def size(self) -> "size_t":
        return _xylib.MetaData_size(self)

    def get_key(self, index: "size_t") -> "std::string const &":
        return _xylib.MetaData_get_key(self, index)

    def __init__(self):
        _xylib.MetaData_swiginit(self, _xylib.new_MetaData())
    __swig_destroy__ = _xylib.delete_MetaData

    def clear(self) -> "void":
        return _xylib.MetaData_clear(self)

    def set(self, key: "std::string const &", val: "std::string const &") -> "bool":
        return _xylib.MetaData_set(self, key, val)

# Register MetaData in _xylib:
_xylib.MetaData_swigregister(MetaData)

class Block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    meta = property(_xylib.Block_meta_get, _xylib.Block_meta_set)

    def __init__(self):
        _xylib.Block_swiginit(self, _xylib.new_Block())
    __swig_destroy__ = _xylib.delete_Block

    def get_name(self) -> "std::string const &":
        return _xylib.Block_get_name(self)

    def get_column_count(self) -> "int":
        return _xylib.Block_get_column_count(self)

    def get_column(self, n: "int") -> "xylib::Column const &":
        return _xylib.Block_get_column(self, n)

    def get_point_count(self) -> "int":
        return _xylib.Block_get_point_count(self)

    def add_column(self, c: "Column", append: "bool"=True) -> "void":
        return _xylib.Block_add_column(self, c, append)

    def del_column(self, n: "int") -> "xylib::Column *":
        return _xylib.Block_del_column(self, n)

    def set_name(self, name: "std::string const &") -> "void":
        return _xylib.Block_set_name(self, name)

# Register Block in _xylib:
_xylib.Block_swigregister(Block)
cvar = _xylib.cvar
Block.index_column = _xylib.cvar.Block_index_column

class DataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    fi = property(_xylib.DataSet_fi_get)
    meta = property(_xylib.DataSet_meta_get, _xylib.DataSet_meta_set)
    __swig_destroy__ = _xylib.delete_DataSet

    def get_block_count(self) -> "int":
        return _xylib.DataSet_get_block_count(self)

    def get_block(self, n: "int") -> "xylib::Block const *":
        return _xylib.DataSet_get_block(self, n)

    def load_data(self, f: "std::istream &", path: "char const *") -> "void":
        return _xylib.DataSet_load_data(self, f, path)

    def clear(self) -> "void":
        return _xylib.DataSet_clear(self)

    def has_option(self, t: "std::string const &") -> "bool":
        return _xylib.DataSet_has_option(self, t)

    def add_block(self, block: "Block") -> "void":
        return _xylib.DataSet_add_block(self, block)

    def set_options(self, options: "std::string const &") -> "void":
        return _xylib.DataSet_set_options(self, options)

    def is_valid_option(self, opt: "std::string const &") -> "bool":
        return _xylib.DataSet_is_valid_option(self, opt)

# Register DataSet in _xylib:
_xylib.DataSet_swigregister(DataSet)


def load_file(*args) -> "xylib::DataSet *":
    return _xylib.load_file(*args)

def load_string(*args) -> "xylib::DataSet *":
    return _xylib.load_string(*args)

def get_wildcards_string(*args) -> "std::string":
    return _xylib.get_wildcards_string(*args)

def is_directory(path: "std::string const &") -> "bool":
    return _xylib.is_directory(path)


