<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>22/11/2014 13:38:43</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><type>json</type><name>AGENT_GUI</name><description /><value>{"name": "agent.win.sikulix", "type": "sikulixserver"}</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>APP_CACHE_9</name><description /><value>clipboard</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>FWK_TEXT_10</name><description /><value>clipboard</value><color /><scope>local</scope></parameter><parameter><type>snapshot-image</type><name>IMG_4</name><description /><value>iVBORw0KGgoAAAANSUhEUgAAABEAAAAOCAYAAADJ7fe0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAJ9JREFUKJFj/P////8Jk2cwUAJYYAwXd0+Ciqcu2MiQneCPQqtLsjEwwlxibWVGliuOHjuFcImZiTFZhvRPms7ARJZONIBhyP///xn+//+PoRCbGFZD/v//z8DIyMjAyMgI14RPM06XwAAjIyMKjc9AnIaguwTZMHTAgsxB9gY2l6BbAJNjQVeAz0ZcBlMliuEu6Z80nWxDGP8TE4cEAAAezUCeVPS1TwAAAABJRU5ErkJggg==</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>IMG_4_SIMILAR</name><description /><value>0.9</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>TEXT_11</name><description /><value>exit</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>TEXT_2</name><description /><value>cmd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>TEXT_5</name><description /><value>cls &amp; ver</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_FWK</name><description /><value>30.0</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_GUI</name><description /><value>15.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_GUI</name><description /><value /><type>sikulixserver</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="GUI_Automation_Capture")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_GUI = SutAdapters.GUI.Sikuli(parent=self, agent=input('AGENT_GUI'), debug=input('DEBUG'))

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_WIN, modifier=None, special=None, other='r', repeat=0)
		APP_RET1 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET1 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeText( text=input('TEXT_2'), description="" )
		APP_RET2 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET2 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ENTER, modifier=None, special=None, other=None, repeat=0)
		APP_RET3 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET3 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.waitImage( img=input('IMG_4'), description="", similar=input('IMG_4_SIMILAR'), timeout=input('TIMEOUT_GUI') )
		APP_RET4 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET4 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeText( text=input('TEXT_5'), description="" )
		APP_RET5 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET5 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=None, modifier=None, special=SutAdapters.GUI.KEY_ENTER, other=None, repeat=0)
		APP_RET6 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET6 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_CTRL, modifier=None, special=None, other='a', repeat=0)
		APP_RET7 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET7 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_CTRL, modifier=None, special=None, other='c', repeat=0)
		APP_RET8 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET8 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.getTextClipboard( description="" )
		APP_RET9 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET9 is None:
			self.abort("Unable to ")
	
		##CAPTURE_FRAMEWORK>
		self.info(txt=Cache().get(name=input('FWK_TEXT_10')))
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeText( text=input('TEXT_11'), description="" )
		APP_RET11 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET11 is None:
			self.abort("Unable to ")
	
		##CAPTURE>
		actionId = self.ADP_GUI.typeShorcut(key=None, modifier=None, special=SutAdapters.GUI.KEY_ENTER, other=None, repeat=0)
		APP_RET12 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET12 is None:
			self.abort("Unable to ")
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1416659923.99</testdevelopment>
</file>