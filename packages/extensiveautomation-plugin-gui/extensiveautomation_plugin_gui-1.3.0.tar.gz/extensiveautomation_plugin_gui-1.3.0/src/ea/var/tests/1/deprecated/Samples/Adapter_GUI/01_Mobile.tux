<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>10/03/2017 12:58:42</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><type>json</type><name>AGENT_ANDROID</name><description /><value>{"name": "", "type": "adb"}</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_CACHE_29</name><description /><value>fgd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_CMD_17</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_PKG_19</name><description /><value>gfdgfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_PKG_20</name><description /><value>aaaaaa</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_SH_18</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_TEXT_28</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_22</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_23</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_24</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_25</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_26</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_27</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_28</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_CLS_29</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_21</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_22</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_23</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_24</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_25</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_26</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_27</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_28</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_29</name><description /><value>gfdgfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_22</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_23</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_24</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_25</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_26</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_27</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_28</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_PKG_29</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_22</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_23</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_24</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_25</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_26</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_27</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_28</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_29</name><description /><value>gf</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_START_X_31</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_START_X_32</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_START_Y_31</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_START_Y_32</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_STOP_X_31</name><description /><value>3</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_STOP_X_32</name><description /><value>3</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_STOP_Y_31</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_STOP_Y_32</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_21</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_22</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_23</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>alias</type><name>ANDROID_UI_TXT_24</name><description /><value>GFD</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_25</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_26</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_27</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_28</name><description /><value>gfdmlmllm</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_29</name><description /><value>gfd</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_X_26</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_X_30</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_Y_26</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>ANDROID_UI_Y_30</name><description /><value>2</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>GFD</name><description /><value /><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_ANDROID</name><description /><value>15.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_ANDROID</name><description /><value /><type>adb</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="Testcase generated by test assistant")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_ANDROID = SutAdapters.GUI.Adb(parent=self, agent=input('AGENT_ANDROID'), debug=input('DEBUG'))

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE_ANDROID>
		ANDROID_RET1 = self.ADP_ANDROID.doWakeupUnlock(timeout=input('TIMEOUT_ANDROID'))
		if not ANDROID_RET1:
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.wakeUp()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.unlock()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.reboot()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.sleep()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.freezeRotation()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.unfreezeRotation()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.bootloader()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.recovery()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.openNotification()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.openQuickSettings()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.deviceInfo()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.getLogs()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.clearLogs()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.typeShortcut(shortcut=SutAdapters.GUI.ADB_KEY_HOME)
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.typeKeyCode(code=2)
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.input(command=input('ANDROID_CMD_17'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.shell(command=input('ANDROID_SH_18'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.stopApplication(packageName=input('ANDROID_PKG_19'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.resetApplication(packageName=input('ANDROID_PKG_20'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.clearTextElement(text=input('ANDROID_UI_TXT_21'),description=input('ANDROID_UI_DESCR_21'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.clickElement(text=input('ANDROID_UI_TXT_22'),description=input('ANDROID_UI_DESCR_22'),className=input('ANDROID_UI_CLS_22'),resourceId=input('ANDROID_UI_RES_22'),packageName=input('ANDROID_UI_PKG_22'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.longClickElement(text=input('ANDROID_UI_TXT_23'),description=input('ANDROID_UI_DESCR_23'),className=input('ANDROID_UI_CLS_23'),resourceId=input('ANDROID_UI_RES_23'),packageName=input('ANDROID_UI_PKG_23'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.existElement(text=input('ANDROID_UI_TXT_24'),description=input('ANDROID_UI_DESCR_24'),className=input('ANDROID_UI_CLS_24'),resourceId=input('ANDROID_UI_RES_24'),packageName=input('ANDROID_UI_PKG_24'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.waitElement(text=input('ANDROID_UI_TXT_25'),description=input('ANDROID_UI_DESCR_25'),className=input('ANDROID_UI_CLS_25'),resourceId=input('ANDROID_UI_RES_25'),packageName=input('ANDROID_UI_PKG_25'), timeout=input('TIMEOUT_ANDROID'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.dragElement(endX=input('ANDROID_UI_X_26'),endY=input('ANDROID_UI_Y_26'),text=input('ANDROID_UI_TXT_26'),description=input('ANDROID_UI_DESCR_26'),className=input('ANDROID_UI_CLS_26'),resourceId=input('ANDROID_UI_RES_26'),packageName=input('ANDROID_UI_PKG_26'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		ANDROID_RET27 = self.ADP_ANDROID.doWaitClickElement(text=input('ANDROID_UI_TXT_27'),description=input('ANDROID_UI_DESCR_27'),className=input('ANDROID_UI_CLS_27'),resourceId=input('ANDROID_UI_RES_27'),packageName=input('ANDROID_UI_PKG_27'), timeout=input('TIMEOUT_ANDROID'))
		if not ANDROID_RET27:
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.typeTextElement(newText=Cache().get(name=input('ANDROID_TEXT_28')),text=Cache().get(name=input('ANDROID_UI_TXT_28')),description=input('ANDROID_UI_DESCR_28'),className=input('ANDROID_UI_CLS_28'),resourceId=input('ANDROID_UI_RES_28'),packageName=input('ANDROID_UI_PKG_28'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.getTextElement(text=Cache().get(name=input('ANDROID_UI_TXT_29')),description=input('ANDROID_UI_DESCR_29'),className=input('ANDROID_UI_CLS_29'),resourceId=input('ANDROID_UI_RES_29'),packageName=input('ANDROID_UI_PKG_29'))
		ANDROID_RET29 = self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId)
		if ANDROID_RET29 is None:
			self.abort("Unable to ")
		else:
			Cache().set(name=input('ANDROID_CACHE_29'), data=ANDROID_RET29.get('GUI', 'value'))
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.clickPosition(x=input('ANDROID_UI_X_30'),y=input('ANDROID_UI_Y_30'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.dragPosition(startX=input('ANDROID_UI_START_X_31'),startY=input('ANDROID_UI_START_Y_31'),endX=input('ANDROID_UI_STOP_X_31'),endY=input('ANDROID_UI_STOP_Y_31'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.swipePosition(startX=input('ANDROID_UI_START_X_32'),startY=input('ANDROID_UI_START_Y_32'),endX=input('ANDROID_UI_STOP_X_32'),endY=input('ANDROID_UI_STOP_Y_32'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1489147122.800864</testdevelopment>
</file>