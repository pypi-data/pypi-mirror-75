<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>25/02/2017 12:19:20</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><color /><description /><type>bool</type><name>DEBUG</name><value>False</value><scope>local</scope></parameter><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter><parameter><color /><description /><type>bool</type><name>VERBOSE</name><value>True</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>dummy</type><name>AGENT</name><value>agent-dummy01</value></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose=description('summary'))
	self.setRequirement(requirement=description('requirement'))

	# steps description
	self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
def prepare(self):
	self.VAL_STR = TestValidators.String()
	self.VAL_INT = TestValidators.Integer()
def definition(self):
	# starting initial step
	if self.step1.isEnabled():
		self.step1.start()
		
		first_name = self.VAL_STR.getRandom(length=8, withLetterLowerCase=True, withLetterUpperCase=True)
		last_name = self.VAL_STR.getRandom(length=8, withLetterLowerCase=True, withLetterUpperCase=True)
		username = self.VAL_STR.getRandom(length=8, withLetterLowerCase=True, withLetterUpperCase=True)
		password = self.VAL_STR.getRandom(length=10, withLetterLowerCase=True, withLetterUpperCase=True, withPunctuation=True)
		
		Trace(self).warning(txt="First name: %s" % first_name)
		Trace(self).warning(txt="Last name: %s" % last_name )
		Trace(self).warning(txt="Username: %s" % username)
		Trace(self).warning(txt="Password: %s" % password )
		
		birth_month = "April"
		birth_day= self.VAL_INT.getRandom(imin=1, imax=28)
		birth_year = "19%s" % self.VAL_INT.getRandom(imin=50, imax=80)
		
		gender = "Other"
		
		Cache().set(name="first_name", data=first_name, flag=False)
		Cache().set(name="last_name", data=last_name, flag=False)
		Cache().set(name="username", data=username, flag=False)
		Cache().set(name="password", data=password, flag=False)
		
		Cache().set(name="birth_month", data=birth_month, flag=False)
		Cache().set(name="birth_day", data=birth_day, flag=False)
		Cache().set(name="birth_year", data=birth_year, flag=False)
		
		Cache().set(name="gender", data=gender, flag=False)
		
		self.step1.setPassed(actual="success")
def cleanup(self, aborted):
	pass]]></testdefinition>
<testdevelopment>1488021560.56764</testdevelopment>
</file>