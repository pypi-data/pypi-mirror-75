<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><inputs-parameters><parameter><type>json</type><name>AGENT_GUI</name><description /><value>{"name": "", "type": "sikulixserver"}</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>FWK_WAIT_1</name><description /><value>5</value><color /><scope>local</scope></parameter><parameter><type>snapshot-image</type><name>IMG_2</name><description>D&#233;tection du r&#233;pertoire 'Basics'</description><value>iVBORw0KGgoAAAANSUhEUgAAAF4AAAAXCAIAAAAN52+dAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEEElEQVRYhe1YS2wbVRQ9b2wnTYJCKSKwQOVjd1AiI5BYxbXEol3EtVCkouxACotEs2pkxALRBSt2KNYsEJFXWSFEN0SqGSTURSVrtojIEDwZobak4d/Gidvannn3djGO/+OECJxK9ZFlvbnvfo7Ou+/NRzAzBugG5bgJPLoYSOOLgTS+CPY4a3a3Cnu3rfqlCASee/28EhzqC7HjR7DH3N0frw2Vt2W55F0ShH1rXb34YV+IHT8EEfnN/WJ8VvopS9KpW4JPPFOpSNd1yHVIOixdkIQSjH/8XV/Y9hW9ukZKWdy5Q64DgJlPvfza6LMvjYLBDIBlldwyy0px+1afyPYXvaRx7u8pQycCwyMAjzw5cfqNs87ODQgAAswQCngEOCEfjPeLbV/R6w41+tRE9K33pi68M3Xh3Renz1Xv2CI4DAbLCssquxWWVZYOs2wJs/W4Ukdct/87srYe9/LVB4f0PxJ6dU1geKzy1zqzCwYExl54E0pACY2Uf/veKf4KAGAwQLI9Mpa2cksRj5yqqbSSOCq/FkSWcrn/078VBzzXMDmQDpMTGHma3HJp89s965vhiVeZXJYOS5fJAfse5Iio0fq40U1x3faWVNP2TZrR5tNhiOt2rQtsfT5lminVS9QWYuvxuK5riqJoRnOXtXZxh+Eo0rhMLshhWRFKgMkRECIQAgSTy+QwuRD+8cZaJjZ5BgAMTd24TEREZM1dmddtAGZ+cpWIiLKLmaRmwNDUVDRLRGSl80nNgK3P1wyUjW5s7uu9tJqOxdIWUW5psz0EgJnamCVqtGpH6e5p/400zJKl43WHu3tblovjkxfHwuflg7vjU2+Hxp9nclg66NTGTKnemnwyub+zrDwySc+opkxzYxNAbC4ZAQAkZheRt65Z+Vj6gwQARJJzscyaEVGjyCQVzQASK912pd0RAmDf0vBpK31g2gOlqdzbYVmtd8f9G9eL+S+L61/s/vz1vZvXRXC4tqGEKJVKLZGxtEVEVjpmNq2JZ6zhkKdPYoWIaHataYsdBe2lD5XWV5pqtVr85w8ml0nWfkzsVpkkSFb/tsq//wCWYBJC2dra6pIispTLwlscRNSomfrUj4WxlonNJc81fOzsFXNxNmHrmm4DiRWy0rG8dbMpxBM90hHShUZH6ba0PoeN7ztUMBgMnApv/1lpsnX3rDLCJ0828jAze3/AzOeF5fgrytnlQs4b1ZZiermwCjbfV5UUAGDhqrwUZjT5LFyVMwzmVM1lermQO539ysscvvTRQiCpZKaXC7m2ELvQqF5jMtNeOqe2pA1310BI2XHr3QcRua7rN9tIIUQoFDrQrR22Hp/HqncSPZLo9VyjKMrQ0OPynt2JXl3zmGPwKcsXA2l8MZDGFw8BNTG6F8W3ib8AAAAASUVORK5CYII=</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>IMG_2_SIMILAR</name><description /><value>0.7</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>SERVER_ADDRESS</name><description>On remplit le champ avec l'adresse du serveur</description><value /><color /><scope>local</scope></parameter><parameter><type>str</type><name>SERVER_LOGIN</name><description>On remplit le champ avec le nom utilisateur</description><value /><color /><scope>local</scope></parameter><parameter><type>str</type><name>SERVER_PASSWORD</name><description>On remplit le champ avec le mot de passe utilisateur</description><value /><color /><scope>local</scope></parameter><parameter><type>alias</type><name>TEXT_10</name><description>On remplit le champ avec le mot de passe utilisateur</description><value>SERVER_PASSWORD</value><color /><scope>local</scope></parameter><parameter><type>alias</type><name>TEXT_6</name><description>On remplit le champ avec l'adresse du serveur</description><value>SERVER_ADDRESS</value><color /><scope>local</scope></parameter><parameter><type>alias</type><name>TEXT_8</name><description>On remplit le champ avec le nom utilisateur</description><value>SERVER_LOGIN</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_FWK</name><description /><value>30.0</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_GUI</name><description /><value>15.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_GUI</name><description /><value /><type>sikulixserver</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><value>1.0</value><name>TIMEOUT</name><type>float</type><scope>local</scope></parameter></outputs-parameters><descriptions><description><value>admin</value><key>author</key></description><description><value>30/01/2016 19:22:53</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>CONNECTION</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="GUI_Automation_Capture")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="Détection du répertoire 'Basics'\n- Navigation dans le menu 'Scheduler' et 'Get Started'\n- Ouverture de la fenêtre de connexion\n- Position de la sélection sur le bouton 'Cancel', ensuite 'address'\n- On remplit le champ avec l'adresse du serveur\n- Position du focus sur le champ texte 'username'\n- On remplit le champ avec le nom utilisateur\n- Position du focus sur le champ texte 'password'\n- On remplit le champ avec le mot de passe utilisateur\n- Connexion au serveur", summary="Détection du répertoire 'Basics'\n- Navigation dans le menu 'Scheduler' et 'Get Started'\n- Ouverture de la fenêtre de connexion\n- Position de la sélection sur le bouton 'Cancel', ensuite 'address'\n- On remplit le champ avec l'adresse du serveur\n- Position du focus sur le champ texte 'username'\n- On remplit le champ avec le nom utilisateur\n- Position du focus sur le champ texte 'password'\n- On remplit le champ avec le mot de passe utilisateur\n- Connexion au serveur", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_GUI = SutAdapters.GUI.Sikuli(parent=self, agent=input('AGENT_GUI'), debug=input('DEBUG'))

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE_FRAMEWORK>
		self.wait(timeout=input('FWK_WAIT_1'))
	
		##CAPTURE>Détection du répertoire 'Basics'
		actionId = self.ADP_GUI.waitClickImage( img=input('IMG_2'), description="Détection du répertoire 'Basics'", similar=input('IMG_2_SIMILAR'), timeout=input('TIMEOUT_GUI') )
		APP_RET2 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET2 is None:
			self.abort("Unable to détection du répertoire 'basics'")
	
		##CAPTURE>Navigation dans le menu 'Scheduler' et 'Get Started'
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ALT, modifier=None, special=None, other='s', repeat=2)
		APP_RET3 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET3 is None:
			self.abort("Unable to navigation dans le menu 'scheduler' et 'get started'")
	
		##CAPTURE>Ouverture de la fenêtre de connexion
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ENTER, modifier=None, special=None, other=None, repeat=0)
		APP_RET4 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET4 is None:
			self.abort("Unable to ouverture de la fenêtre de connexion")
	
		##CAPTURE>Position de la sélection sur le bouton 'Cancel', ensuite 'address'
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_TAB, modifier=None, special=None, other=None, repeat=1)
		APP_RET5 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET5 is None:
			self.abort("Unable to position de la sélection sur le bouton 'cancel', ensuite 'address'")
	
		##CAPTURE>On remplit le champ avec l'adresse du serveur
		actionId = self.ADP_GUI.typeText( text=input('TEXT_6'), description="On remplit le champ avec l'adresse du serveur" )
		APP_RET6 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET6 is None:
			self.abort("Unable to on remplit le champ avec l'adresse du serveur")
	
		##CAPTURE>Position du focus sur le champ texte 'username'
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_TAB, modifier=None, special=None, other=None, repeat=0)
		APP_RET7 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET7 is None:
			self.abort("Unable to position du focus sur le champ texte 'username'")
	
		##CAPTURE>On remplit le champ avec le nom utilisateur
		actionId = self.ADP_GUI.typeText( text=input('TEXT_8'), description="On remplit le champ avec le nom utilisateur" )
		APP_RET8 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET8 is None:
			self.abort("Unable to on remplit le champ avec le nom utilisateur")
	
		##CAPTURE>Position du focus sur le champ texte 'password'
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_TAB, modifier=None, special=None, other=None, repeat=0)
		APP_RET9 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET9 is None:
			self.abort("Unable to position du focus sur le champ texte 'password'")
	
		##CAPTURE>On remplit le champ avec le mot de passe utilisateur
		actionId = self.ADP_GUI.typeText( text=input('TEXT_10'), description="On remplit le champ avec le mot de passe utilisateur" )
		APP_RET10 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET10 is None:
			self.abort("Unable to on remplit le champ avec le mot de passe utilisateur")
	
		##CAPTURE>Connexion au serveur
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ENTER, modifier=None, special=None, other=None, repeat=0)
		APP_RET11 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET11 is None:
			self.abort("Unable to connexion au serveur")
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1454178173.993759</testdevelopment>
</file>