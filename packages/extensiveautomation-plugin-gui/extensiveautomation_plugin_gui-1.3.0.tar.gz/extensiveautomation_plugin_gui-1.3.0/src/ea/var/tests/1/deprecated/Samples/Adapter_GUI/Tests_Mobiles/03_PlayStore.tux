<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>17/03/2016 13:37:00</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><type>json</type><name>AGENT_ANDROID</name><description /><value>{"name": "", "type": "adb"}</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_PKG_4</name><description /><value>com.android.vending</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_PKG_8</name><description /><value>com.android.vending</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_DESCR_5</name><description /><value>Play Store</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_RES_6</name><description /><value>com.android.vending:id/title</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_5</name><description /><value>Play Store</value><color /><scope>local</scope></parameter><parameter><type>str</type><name>ANDROID_UI_TXT_6</name><description /><value>GAMES</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>int</type><name>FWK_WAIT_7</name><description /><value>4</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_ANDROID</name><description /><value>15.0</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_FWK</name><description /><value>30.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_ANDROID</name><description /><value /><type>adb</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="GUI_Automation_Capture")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_ANDROID = SutAdapters.GUI.Adb(parent=self, agent=input('AGENT_ANDROID'), debug=input('DEBUG'))

	

def definition(self):
	if self.step1.isEnabled():
		self.step1.start()
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.wakeUp()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.unlock()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.typeShortcut(shortcut=SutAdapters.GUI.ADB_KEY_HOME)
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.stopApplication(packageName=input('ANDROID_PKG_4'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		ANDROID_RET5 = self.ADP_ANDROID.doWaitClickElement(text=input('ANDROID_UI_TXT_5'),description=input('ANDROID_UI_DESCR_5'), timeout=input('TIMEOUT_ANDROID'))
		if not ANDROID_RET5:
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		ANDROID_RET6 = self.ADP_ANDROID.doWaitClickElement(text=input('ANDROID_UI_TXT_6'),resourceId=input('ANDROID_UI_RES_6'), timeout=input('TIMEOUT_ANDROID'))
		if not ANDROID_RET6:
			self.abort("Unable to ")
	
		##CAPTURE_FRAMEWORK>
		self.wait(timeout=input('FWK_WAIT_7'))
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.stopApplication(packageName=input('ANDROID_PKG_8'))
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		##CAPTURE_ANDROID>
		actionId = self.ADP_ANDROID.sleep()
		if not self.ADP_ANDROID.isActionAccepted(timeout=input('TIMEOUT_ANDROID'), actionId=actionId):
			self.abort("Unable to ")
	
		self.step1.setPassed("test terminated")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1458218220.164818</testdevelopment>
</file>