<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>25/03/2016 08:23:48</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><type>json</type><name>AGENT_GUI</name><description /><value>{"name": "agent.win.sikulix", "type": "sikulixserver"}</value><color /><scope>local</scope></parameter><parameter><type>bool</type><name>DEBUG</name><description /><value>False</value><color /><scope>local</scope></parameter><parameter><type>snapshot-image</type><name>IMG_1</name><description /><value>iVBORw0KGgoAAAANSUhEUgAAAEsAAAAkCAYAAADB7MdlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAG8UlEQVRoge2Zf0xb1xXHPw8BKQlappauSBMRYYapzIsyzU0znGkLLVGMV0SZZDWpMrRss1Utm1kz/lpWLVUUrUNV8B9bB1UzNWyk9RpkNTGvIhprpmAijawRc50Fv1EUpAi6bGobWHCG790f7+FfpM+PjoQR8ZUAv/uOL+d+7/med985ipRSsgZLKFhpB1YTCjMvukdXyo3VgcLcgS8/tBJurA4sIut2uPKHXoSUSCGQUiKEREqRGhNSsu6+Eqq27Wb9p8vutM8rBktkCSnZu2dP6lqmfukIBl9n69atDF/op3p74z1LmKUEL4UAICkEyaQgmUySTCaZN34AysrK2P6IgytDZ+6ctysMS5GVOl1IkOSeNPTrEydO6BMWFy+bc/9vsBRZQuiEpIiSWSqkpeWbfP/AD/D725Aiz7Ft0IejXMFRrrC/WzMGNU5+Q0mNHx00m0DlaHnaNr/98sGaDKVAgpHcRXZs5RAnpDCZSeXoXghMSUam+rE918rJCYA4m56VjExJRi50ou31MWTqUR0HLxj2vV768tovDyyRFZu5yNO/e4xtL5Wz7aVy9r62k9Pvvk62KI3oM4uswRB9+5pxAuBi3/NwdkADXDjrDZvKGmxLWUF9My1EuTqxlC99MuQl6/cXf8ZY6TDjH5ynWPmIZGIGCuHYxUMk+Y9hJUmlNZO3p0ktypbq6tR1hc3OaDyebZRFqAUMhuhzeNhRqV8OtWdItF1NjaWlqnK03GlENDARYL9hlw+mZF26qnJpugul9B0euF9Qul7yqQ2Cv18b5u1vx/G88TXOvPtalg6FMJPhx2Oy26kvUG1mpMOVxzrCi9uVtP0ZPxXGHWeHIc+pflp6jnByApwuL32qQchgCM2xENEwORCEjA00gylZw+MvU1L6PkIoSKkg0f8O//AjTl36DSVs5ORfu7Kk+Enfyyu8Q/oiXSEcmTt/Wxg560InW3pC2fkq9QBppG9hrKqWLZfHmASG1CgNz3rgzTCTaJx/Exp2WRO+KVl/uz7AXAISCZifVygu2MCfnpnhX/++zuGwn7/E/kz8w8t6Upd6/jJL8Lmyy5UlAPVdBPZFeG/cgveVfg4/H+WVhafqRID9qQdInIOOBTs3DQQ5P6Fy7rKHHfVuGohxdSLMWdISNsVEwJwsRSqEnprhR48e54F1mzn9rSmuz07j+tXD3EwkuHFzFgUFKdOJ3jTBV9VmRIJKz3PGrg6qGdGhcq6njs1VFhYAVHgPpZ+q4zFGHbVsApgIc3ZkwcrGjiY4e+AIWpObCmzsaIpy7pcxaHKnJGyK8Zg5WQ+V2FEoYOfnPPzWE+Wfs+/zxK/tzCYSzM8rrCvcwOfv/yIFSnoaYSbDSj/He8FvyITeIfZUAlVjvJI6N2WMW4L+VH3xQIDJ+nYO0saT5QqOAzFsjrRVxS4PjKQlV7HLg9YTtSxB6ttRMot/3aPZVYe33vkF07MRjj15ihuJD/l65yZuzN3kVgLmEoJtD38F36NtPF7TBEBRUSE/f+EFGr/7E6srXVUwjSzXl37MlWvX+E5PI08ff5wPZm6SmJPMJSQPbvwsj9U04PpCC0VFhRQV6W9OIt8J3jIWn9Qd5Xfq8Gntf5lGFoCC4Hjf9zil9ZCUSURS4au2nWxO1PBgchNSSL1UI4VRupE84fvpHVnSSiMvWWtIY60GvwSskbUELKpnXZxeCTdWB5S1vqF1WKqU9vbmb1isLylh9+7dlJXdm/V3WOaGRbi/H3dj4z1L2LI2LB5xODh9eq1hYXxYa1jkxbI2LFQfiqKgKArOgLbothZwojgDLL6z8HUFX1ZhU8WnOMmaSvWh+FTQAjhz7/0PuOsNC18j9EuJlP3Y21pzFqLS0RYx9cXV7KU7lMGWNkaUCMGwljEUpa62Gmx+huQQ/iUV9T8ed7dhoYbo9jajF41dtHeSvcjAEejspM7Mmepa6qJjqcjTwkHsnZ0QWygqaoSD4HEvE0MZyEvWsbeXr2GR2nEDtho7kYVFagFaY4focudxyObGQxCdY52YWncN9u4QerzFiUXs1NggW6LG54B5GjCcIeBUUna67FVzsv44pjLw3t1oWGgEWoN42vM1KgBs1NgjRiDFieHBbXPR7I0yppETvbmI0BZr1iu7/V4ibR0s7utoBJzVBD1x3U5KuozJTMl6Y/Rl7rsLDQst0ErQ86rl3JLKW2qIbrveZ6yu1SWdG73ZqKNzYUNczXgxCM5yJkww4uXQbZwxPTqMTg9QuhGEgKRQKC5Yz8Az0/xjZprDYT+3bhWx4TOFCCkoQMnbsLDV2ImE4mC0UfWF1dLRFiFCNUpb2rbaCfEh/+0brkbeUmujeJu79LndHugIE46C59Xlz1cA/wX+FLmY1MnwLAAAAABJRU5ErkJggg==</value><color /><scope>local</scope></parameter><parameter><type>snapshot-image</type><name>IMG_1_1</name><description /><value>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</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>IMG_1_SIMILAR</name><description /><value>0.7</value><color /><scope>local</scope></parameter><parameter><type>float</type><name>TIMEOUT_GUI</name><description /><value>15.0</value><color /><scope>local</scope></parameter></inputs-parameters><agents><agent><name>AGENT_GUI</name><description /><value /><type>sikulixserver</type></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="GUI_Automation_Capture")

	# steps description
	self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_GUI = SutAdapters.GUI.Sikuli(parent=self, agent=input('AGENT_GUI'), debug=input('DEBUG'))

	

def definition(self):
	##CAPTURE>
	if self.step1.isEnabled():
		self.step1.start()
		
		#code = "Settings.Highlight = True;find(__IMG1__).nearby(500).click(__IMG2__)"
		code = "o = Env.getOS(); v = Env.getOSVersion(); print(o); print(v)"
		#code = "s = Env.getSikuliVersion(); print(s)"
		#code = "l = Env.getMouseLocation(); print(l)"
		#code = "popup(\"Hello World\")"
		actionId = self.ADP_GUI.rawAction(rawCode=code, img1=input('IMG_1'), img2=input('IMG_1_1'), description='unknown')
		rsp = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if not rsp:
			self.step1.setFailed("Unable to get response ")
		else:
			out = rsp.get("GUI", "out")
			self.warning( out )
			self.step1.setPassed("Executing with success: ")

def cleanup(self, aborted):
	if aborted: self.step1.setFailed(aborted)
]]></testdefinition>
<testdevelopment>1458890628.847943</testdevelopment>
</file>