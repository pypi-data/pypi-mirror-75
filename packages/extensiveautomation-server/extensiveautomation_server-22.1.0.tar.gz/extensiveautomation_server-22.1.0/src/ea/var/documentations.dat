(lp0
(dp1
S'type'
p2
S'package'
p3
sS'modules'
p4
(lp5
(dp6
S'desc'
p7
S'This library enable to create testcase with step support.'
p8
sS'classes'
p9
(lp10
(dp11
S'functions'
p12
(lp13
(dp14
S'args'
p15
(lp16
S'parent'
p17
asg2
S'method'
p18
sS'name'
p19
S'__init__'
p20
sg7
S'\n        Constructor for a break point\n        '
p21
sasg2
S'class'
p22
sg19
S'BreakPoint'
p23
sg7
S'\n    Add a break point \n    '
p24
sa(dp25
g12
(lp26
(dp27
g15
(lp28
sg2
g18
sg19
S'all'
p29
sg7
S'\n        Return all content from the cache\n        \n        @return: content\n        @rtype: object/none\n        '
p30
sa(dp31
g15
(lp32
S'data'
p33
aS'regexp'
p34
asg2
g18
sg19
S'capture'
p35
sg7
S'\n        Capture group of characters and save it in cache\n        \n        @param data: raw data\n        @type name: string\n        \n        @param regexp: reg exp used to capture string (example: (?P<R>.*) ) \n        @type regexp: string\n        '
p36
sa(dp37
g15
(lp38
g19
asg2
g18
sg19
S'delete'
p39
sg7
S'\n        Delete data from the temporary storage according to the name passed as argument.\n\n        @param name: key name\n        @type name: string\n        \n        @return: True on success, False otherwise\n        @rtype: boolean\n        '
p40
sa(dp41
g15
(lp42
g19
asg2
g18
sg19
S'get'
p43
sg7
S'\n        Load data from the temporary storage according to the name passed as argument.\n        \n        @param name: key name\n        @type name: string\n        \n        @return: data saved or None if empty\n        @rtype: object/none\n        '
p44
sa(dp45
g2
g18
sg15
(lp46
g29
asS'default-args'
p47
(lp48
(g29
I00
tp49
asg19
S'reset'
p50
sg7
S'\n        Reset data from the temporary storage.\n        Reminder: all keys startswiths "_" are not removed\n        '
p51
sa(dp52
g2
g18
sg15
(lp53
g19
ag33
aS'flag'
p54
asg47
(lp55
(g54
I00
tp56
asg19
S'set'
p57
sg7
S'\n        Save data in the temporary storage. \n        Prefix the name with _ if you want to keep the key in the cache even with a reset\n       \n        @param name: key name\n        @type name: string\n        \n        @param data: data to save\n        @type data: string/object\n        '
p58
sasg2
g22
sg19
S'Cache'
p59
sg7
S'\n    Cache storage based on key, value\n    Shared between all testcases.\n    '
p60
sa(dp61
g12
(lp62
(dp63
g2
g18
sg15
(lp64
S'ask'
p65
aS'timeout'
p66
aS'default'
p67
aS'cache'
p68
asg47
(lp69
(g66
F30.0
tp70
a(g67
S'None'
p71
tp72
a(g68
S''
p73
tp74
asg19
S'interact'
p75
sg7
S'\n        Ask a value to the tester during the execution of a test\n\n        @param ask: ask what\n        @type ask: string\n\n        @param default: provide a default value\n        @type default: string/none\n\n        @param cache: max time to respond (default=30s)\n        @type cache: float\n        \n        @param timeout: key name\n        @type timeout: string\n\n        @return: user response\n        @rtype: string\n        '
p76
sasg2
g22
sg19
S'Interact'
p77
sg7
S'\n    Interact with user\n    '
p78
sa(dp79
g12
(lp80
(dp81
g15
(lp82
g17
asg2
g18
sg19
g20
sg7
S'\n        Constructor for a break point\n        Parent should be equal to a testcase\n        '
p83
sa(dp84
g15
(lp85
S'folder'
p86
asg2
g18
sg19
S'addFolder'
p87
sg7
S'\n        Add folder in the private area\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p88
sa(dp89
g15
(lp90
S'destname'
p91
ag33
asg2
g18
sg19
S'appendFile'
p92
sg7
S'\n        Append binary data in file. These datas are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p93
sa(dp94
g15
(lp95
S'filename'
p96
asg2
g18
sg19
S'getFile'
p97
sg7
S'\n        Get file in private area\n        \n        @param filename: filename to read\n        @type filename: string\n        \n        @return: file content\n        @rtype: string\n        '
p98
sa(dp99
g15
(lp100
sg2
g18
sg19
S'getPath'
p101
sg7
S'\n        Return path to access to the private area of the testcase\n        \n        @return: public path\n        @rtype: string\n        '
p102
sa(dp103
g15
(lp104
g91
ag33
asg2
g18
sg19
S'saveFile'
p105
sg7
S'\n        Storing binary data in file. These datas are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p106
sasg2
g22
sg19
S'Private'
p107
sg7
S'\n    Private storage files\n    '
p108
sa(dp109
g12
(lp110
(dp111
g15
(lp112
g17
asg2
g18
sg19
g20
sg7
S'\n        Constructor for a break point\n        Parent should be equal to a testcase\n        '
p113
sa(dp114
g15
(lp115
g86
asg2
g18
sg19
g87
sg7
S'\n        Add folder in the public area\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p116
sa(dp117
g15
(lp118
S'pathfile'
p119
ag33
asg2
g18
sg19
g92
sg7
S'\n        Append data in file in public area\n\n        @param pathfile: destination path file\n        @type pathfile: string\n\n        @param data: data to save\n        @type data: string\n        '
p120
sa(dp121
g15
(lp122
g119
asg2
g18
sg19
g97
sg7
S'\n        Get file from the public area\n        \n        @param pathfile: filename to read\n        @type pathfile: string\n        \n        @return: file content\n        @rtype: string\n        '
p123
sa(dp124
g15
(lp125
sg2
g18
sg19
g101
sg7
S'\n        Return path to access to public area\n        \n        @return: public path\n        @rtype: string\n        '
p126
sa(dp127
g15
(lp128
g119
ag33
asg2
g18
sg19
g105
sg7
S'\n        Save file in public area\n\n        @param pathfile: destination path file\n        @type pathfile: string\n\n        @param data: data to save\n        @type data: string\n        '
p129
sasg2
g22
sg19
S'Public'
p130
sg7
S'\n    Public storage files\n    '
p131
sa(dp132
g12
(lp133
(dp134
g2
g18
sg15
(lp135
g17
aS'tcid_'
p136
aS'id_'
p137
aS'expected_'
p138
aS'action_'
p139
aS'summary_'
p140
aS'enabled'
p141
aS'thumbnail'
p142
asg47
(lp143
(g141
I01
tp144
a(g142
S'None'
p145
tp146
asg19
g20
sg7
S'\n        Constructor for a step\n\n        @param tcid_:\n        @type tcid_:\n\n        @param id_:\n        @type id_:\n\n        @param expected_:\n        @type expected_:\n\n        @param action_:\n        @type action_:\n\n        @param summary_:\n        @type summary_:\n        '
p147
sa(dp148
g15
(lp149
sg2
g18
sg19
S'getId'
p150
sg7
S'\n        Return id\n        '
p151
sa(dp152
g15
(lp153
sg2
g18
sg19
S'isEnabled'
p154
sg7
S'\n        Return True if the step is enabled\n\n        @return: True for enabled, False otherwise\n        @rtype: boolean\n        '
p155
sa(dp156
g15
(lp157
S'description'
p158
asg2
g18
sg19
S'setDescription'
p159
sg7
S'\n        Set action to execute the step\n\n        @param description: description\n        @type description: string\n        '
p160
sa(dp161
g15
(lp162
sg2
g18
sg19
S'setDisabled'
p163
sg7
S'\n        Disable the step\n\n        '
p164
sa(dp165
g15
(lp166
sg2
g18
sg19
S'setEnabled'
p167
sg7
S'\n        Enable the step\n        '
p168
sa(dp169
g15
(lp170
S'expected'
p171
asg2
g18
sg19
S'setExpected'
p172
sg7
S'\n        Step the result expected\n\n        @param expected: expected\n        @type expected: string\n        '
p173
sa(dp174
g2
g18
sg15
(lp175
S'actual'
p176
ag142
aS'chart'
p177
asg47
(lp178
(g142
S'None'
p179
tp180
a(g177
S'None'
p181
tp182
asg19
S'setFailed'
p183
sg7
S'\n        Set the result of the testcase to failed\n\n        @param actual: result description\n        @type actual: string\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @param chart: chart, only displayed in html report (default=None)\n        @type chart: string/none\n        '
p184
sa(dp185
g2
g18
sg15
(lp186
g176
ag142
ag177
asg47
(lp187
(g142
S'None'
p188
tp189
a(g177
S'None'
p190
tp191
asg19
S'setPassed'
p192
sg7
S'\n        Set the result of the testcase to passed\n\n        @param actual: result description\n        @type actual: string\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @param chart: chart, only displayed in html report (default=None)\n        @type chart: string/none\n        '
p193
sa(dp194
g15
(lp195
S'summary'
p196
asg2
g18
sg19
S'setSummary'
p197
sg7
S'\n        Set the summary\n\n        @param summary: summary\n        @type summary: string\n        '
p198
sa(dp199
g15
(lp200
sg2
g18
sg19
S'start'
p201
sg7
S'\n        Begin to run the step\n        '
p202
sasg2
g22
sg19
S'Step'
p203
sg7
S'\n    Step with definition result support.\n\n    3 states supported:\n        - UNDEFINED\n        - FAIL\n        - PASSED\n    '
p204
sa(dp205
g12
(lp206
(dp207
g2
g18
sg15
(lp208
S'err'
p209
asg47
(lp210
(g209
S'None'
p211
tp212
asg19
S'interrupt'
p213
sg7
S'\n        Use this function to stop the testcase before the end\n        Cleanup is called automatically and the aborted argument contains the reason of the interruption\n        \n        @param err: error message\n        @type err: string/none\n        '
p214
sa(dp215
g2
g18
sg15
(lp216
g209
asg47
(lp217
(g209
S'None'
p218
tp219
asg19
S'terminate'
p220
sg7
S'\n        Use this function to stop the test before the end\n        Cleanup is called automatically and the aborted argument contains the reason of the termination\n        \n        @param err: error message\n        @type err: string/none\n        '
p221
sasg2
g22
sg19
S'Test'
p222
sg7
S'\n    Test handler\n    '
p223
sa(dp224
g12
(lp225
(dp226
g2
g18
sg15
(lp227
S'suffix'
p228
aS'testName'
p229
asg47
(lp230
(g228
S'None'
p231
tp232
a(g229
S'None'
p233
tp234
asg19
g20
sg7
S'\n        Construct TestCase\n        '
p235
sa(dp236
g2
g18
sg15
(lp237
g171
ag158
ag196
ag141
ag142
asg47
(lp238
(g141
I01
tp239
a(g142
S'None'
p240
tp241
asg19
S'addStep'
p242
sg7
S'\n        Add step to the testcase with description and expected result passed as arguments.\n\n        @param expected: describe expected result\n        @type expected: string\n\n        @param description: step description\n        @type description: string\n\n        @param summary: very short description\n        @type summary: string\n        \n        @param enabled: enable the step (default=True)\n        @type enabled: boolean\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @return: step object\n        @rtype: Step\n        '
p243
sa(dp244
g15
(lp245
g19
asg2
g18
sg19
S'findAdapter'
p246
sg7
S'\n        Return adapter in shared mode according to the name\n\n        @param name: adapter name\n        @type name: string\n\n        @return: adapter objected or not if not found\n        @rtype: adapter\n        '
p247
sa(dp248
g15
(lp249
sg2
g18
sg19
g150
sg7
S'\n        Return the id of the testcase\n        \n        @return: testcase id\n        @rtype: integer\n        '
p250
sa(dp251
g15
(lp252
sg2
g18
sg19
S'getPreviousStep'
p253
sg7
S'\n        Return the previous step if exists otherwise none\n\n        @return: step object\n        @rtype: step/none\n        '
p254
sa(dp255
g15
(lp256
g19
asg2
g18
sg19
S'setName'
p257
sg7
S'\n        Set the name of the testcase\n\n        @param name: testcase name\n        @type name: string\n        '
p258
sa(dp259
g15
(lp260
S'purpose'
p261
asg2
g18
sg19
S'setPurpose'
p262
sg7
S'\n        Set the purpose of the testcase\n\n        @param purpose: purpose description\n        @type purpose: string\n        '
p263
sa(dp264
g15
(lp265
S'requirement'
p266
asg2
g18
sg19
S'setRequirement'
p267
sg7
S'\n        Set the requirement of the testcase\n\n        @param requirement: requirement description\n        @type requirement: string\n        '
p268
sasg2
g22
sg19
S'TestCase'
p269
sg7
S'\n    Basic test case with steps definition support.\n\n    @param suffix: add a suffix to the testcase name\n    @type suffix: string \n    '
p270
sa(dp271
g12
(lp272
(dp273
g2
g18
sg15
(lp274
S'fmt'
p275
asg47
(lp276
(g275
S'%Y-%m-%d %H:%M:%S'
p277
tp278
asg19
S'local'
p279
sg7
S'\n        Return local time\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @return: local time\n        @rtype: string\n        '
p280
sa(dp281
g2
g18
sg15
(lp282
g66
aS'localshift'
p283
asg47
(lp284
(g283
I01
tp285
asg19
S'sleep'
p286
sg7
S'\n        Sleep in seconds with time shifting support\n        \n        @param timeout: in second\n        @type timeout: integer\n        \n        @param localshift: local shift (default=True)\n        @type localshift: boolean\n        '
p287
sa(dp288
g2
g18
sg15
(lp289
S'dt'
p290
ag275
ag283
aS'delta'
p291
asg47
(lp292
(g290
S'1970-01-01 00:00:00'
p293
tp294
a(g275
g277
tp295
a(g283
I01
tp296
a(g291
I0
tp297
asg19
S'sleepUntil'
p298
sg7
S'\n        Sleep until a specific date and time with time shifting support\n        \n        @param dt: date and time (default=1970-01-01 00:00:00)\n        @type dt: string\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @param localshift: local shift (default=True)\n        @type localshift: boolean\n\n        @param delta: shift the date in seconds (default=0s)\n        @type delta: integer\n        '
p299
sa(dp300
g2
g18
sg15
(lp301
g275
asg47
(lp302
(g275
g277
tp303
asg19
S'utc'
p304
sg7
S'\n        Return UTC time\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @return: utc time\n        @rtype: string\n        '
p305
sa(dp306
g15
(lp307
g66
asg2
g18
sg19
S'wait'
p308
sg7
S'\n        Just wait during the timeout passed as argument\n\n        @param timeout: in second\n        @type timeout: float\n        '
p309
sa(dp310
g2
g18
sg15
(lp311
g290
ag275
ag291
asg47
(lp312
(g290
g293
tp313
a(g275
g277
tp314
a(g291
I0
tp315
asg19
S'waitUntil'
p316
sg7
S'\n        Just wait until the date and time passed in argument\n\n        @param dt: date and time (default=1970-01-01 00:00:00)\n        @type dt: string\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n\n        @param delta: shift the date in seconds (default=0s)\n        @type delta: integer\n        '
p317
sasg2
g22
sg19
S'Timer'
p318
sg7
S'\n    Time handler\n    '
p319
sa(dp320
g12
(lp321
(dp322
g2
g18
sg15
(lp323
S'txt'
p324
aS'bold'
p325
aS'italic'
p326
aS'multiline'
p327
aS'raw'
p328
asg47
(lp329
(g325
I00
tp330
a(g326
I00
tp331
a(g327
I00
tp332
a(g328
I00
tp333
asg19
S'error'
p334
sg7
S'\n        Display an error message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p335
sa(dp336
g2
g18
sg15
(lp337
g324
ag325
ag326
ag327
ag328
asg47
(lp338
(g325
I00
tp339
a(g326
I00
tp340
a(g327
I00
tp341
a(g328
I00
tp342
asg19
S'info'
p343
sg7
S'\n        Display an information message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p344
sa(dp345
g2
g18
sg15
(lp346
g324
ag325
ag326
ag327
ag328
asg47
(lp347
(g325
I00
tp348
a(g326
I00
tp349
a(g327
I00
tp350
a(g328
I00
tp351
asg19
S'warning'
p352
sg7
S'\n        Display an warning message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p353
sasg2
g22
sg19
S'Trace'
p354
sg7
S'\n    Trace message in your test\n    '
p355
sasg2
S'module'
p356
sg19
S'TestExecutor'
p357
sS'realname'
p358
S'ea.testexecutorlib.TestExecutorLib'
p359
sa(dp360
g7
S'The library provides somes importants operators.'
p361
sg9
(lp362
(dp363
g12
(lp364
(dp365
g15
(lp366
sg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to match anything\n        '
p367
sasg2
g22
sg19
S'Any'
p368
sg7
S'\n    Any\n    '
p369
sa(dp370
g12
(lp371
(dp372
g2
g18
sg15
(lp373
S'needle'
p374
aS'AND'
p375
aS'OR'
p376
asg47
(lp377
(g375
I01
tp378
a(g376
I00
tp379
asg19
g20
sg7
S'\n        This class provides an operator to check if a string contains the characters passed as argument.\n\n        @param needle: the string(s) to search\n        @type needle: string or list\n\n        @param AND: and condition (default=True)\n        @type AND: boolean\n\n        @param OR: or condition (default=False)\n        @type OR: boolean\n        '
p380
sa(dp381
g15
(lp382
S'haystack'
p383
asg2
g18
sg19
S'seekIn'
p384
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n    \n        @return: True if needle found \n        @rtype: boolean\n        '
p385
sasg2
g22
sg19
S'Contains'
p386
sa(dp387
g12
(lp388
(dp389
g15
(lp390
g374
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string ends with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p391
sa(dp392
g15
(lp393
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the end\n        @rtype: boolean\n        '
p394
sasg2
g22
sg19
S'Endswith'
p395
sa(dp396
g12
(lp397
(dp398
g2
g18
sg15
(lp399
S'x'
p400
aS'equal'
p401
asg47
(lp402
(g401
I00
tp403
asg19
g20
sg7
S'\n        This class provides an operator to check if an integer is greater than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n\n        @param equal: greater or equal than (default=False)\n        @type equal: boolean\n        '
p404
sa(dp405
g15
(lp406
S'y'
p407
asg2
g18
sg19
S'comp'
p408
sg7
S'\n        Compare y with x\n        If y is greater than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if greater \n        @rtype: boolean\n        '
p409
sasg2
g22
sg19
S'GreaterThan'
p410
sa(dp411
g12
(lp412
(dp413
g2
g18
sg15
(lp414
g400
ag401
asg47
(lp415
(g401
I00
tp416
asg19
g20
sg7
S'\n        This class provides an operator to check if an integer is lower than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n\n        @param equal: greater or equal than (default=False)\n        @type equal: boolean\n        '
p417
sa(dp418
g15
(lp419
g407
asg2
g18
sg19
g408
sg7
S'\n        Compare y with x\n        If y is lower than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if lower \n        @rtype: boolean\n        '
p420
sasg2
g22
sg19
S'LowerThan'
p421
sa(dp422
g12
(lp423
(dp424
g2
g18
sg15
(lp425
g374
ag375
ag376
asg47
(lp426
(g375
I01
tp427
a(g376
I00
tp428
asg19
g20
sg7
S'\n        This class provides an operator to check if a string not constains the characters passed as argument.\n\n        @param needle: the string(s) to search\n        @type needle: string or list\n\n        @param AND: and condition (default=True)\n        @type AND: boolean\n\n        @param OR: or condition (default=False)\n        @type OR: boolean\n        '
p429
sa(dp430
g15
(lp431
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found \n        @rtype: boolean\n        '
p432
sasg2
g22
sg19
S'NotContains'
p433
sa(dp434
g12
(lp435
(dp436
g15
(lp437
g374
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string not ends with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p438
sa(dp439
g15
(lp440
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found on the end\n        @rtype: boolean\n        '
p441
sasg2
g22
sg19
S'NotEndswith'
p442
sa(dp443
g12
(lp444
(dp445
g15
(lp446
g400
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if an integer is not greater than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n        '
p447
sa(dp448
g15
(lp449
g407
asg2
g18
sg19
g408
sg7
S'\n        Compare y with x\n        If y is not greater than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if greater \n        @rtype: boolean\n        '
p450
sasg2
g22
sg19
S'NotGreaterThan'
p451
sa(dp452
g12
(lp453
(dp454
g15
(lp455
g400
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if an integer is not lower than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n        '
p456
sa(dp457
g15
(lp458
g407
asg2
g18
sg19
g408
sg7
S'\n        Compare y with x\n        If y is not lower than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if lower \n        @rtype: boolean\n        '
p459
sasg2
g22
sg19
S'NotLowerThan'
p460
sa(dp461
g12
(lp462
(dp463
g15
(lp464
g374
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to not match a specific regular expression.\n\n        @param needle: the regular expression\n        @type needle: string\n        '
p465
sa(dp466
g15
(lp467
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking to not match the needle in the haystack\n        If needle not match, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p468
sasg2
g22
sg19
S'NotRegEx'
p469
sa(dp470
g12
(lp471
(dp472
g15
(lp473
g374
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string not starts with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p474
sa(dp475
g15
(lp476
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found on the start\n        @rtype: boolean\n        '
p477
sasg2
g22
sg19
S'NotStartswith'
p478
sa(dp479
g12
(lp480
(dp481
g15
(lp482
g374
asg2
g18
sg19
g20
sg7
S"\n        This class provides an operator to match a specific regular expression.\n        \n        Special characters\n            \\   escape special characters\n            .   matches any character\n            ^   matches beginning of string\n            $   matches end of string\n            [5b-d]  matches any chars '5', 'b', 'c' or 'd'\n            [^a-c6]     matches any char except 'a', 'b', 'c' or '6'\n            R|S     matches either regex R or regex S\n            ()  creates a capture group and indicates precedence\n\n        Quantifiers\n            *   0 or more (append ? for non-greedy)\n            +   1 or more (append ? for non-greedy)\n            ?   0 or 1 (append ? for non-greedy)\n            {m}     exactly mm occurrences\n            {m, n}  from m to n. m defaults to 0, n to infinity\n            {m, n}?     from m to n, as few as possible\n\n        Special sequences\n            \\A  start of string\n            \x08  matches empty string at word boundary (between \\w and \\W)\n            \\B  matches empty string not at word boundary\n            \\d  digit\n            \\D  non-digit\n            \\s  whitespace: [\t\n\r\x0c\x0b]\n            \\S  non-whitespace\n            \\w  alphanumeric: [0-9a-zA-Z_]\n            \\W  non-alphanumeric\n            \\Z  end of string\n            \\g<id>  matches a previously defined group\n            (?iLmsux)   matches empty string, sets re.X flags\n            (?:...)     non-capturing version of regular parentheses\n            (?P...)     matches whatever matched previously named group\n            (?P=)   digit\n            (?#...)     a comment; ignored\n            (?=...)     lookahead assertion: matches without consuming\n            (?!...)     negative lookahead assertion\n            (?<=...)    lookbehind assertion: matches if preceded\n            (?<!...)    negative lookbehind assertion\n            (?(id)yes|no)   match 'yes' if group 'id' matched, else 'no'\n\n        @param needle: the regular expression to match\n        @type needle: string\n        "
p483
sa(dp484
g15
(lp485
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking to match the needle in the haystack\n        If needle match, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p486
sasg2
g22
sg19
S'RegEx'
p487
sg7
S'\n    RegEx\n    '
p488
sa(dp489
g12
(lp490
(dp491
g15
(lp492
g374
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string starts with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p493
sa(dp494
g15
(lp495
g383
asg2
g18
sg19
g384
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p496
sasg2
g22
sg19
S'Startswith'
p497
sasg2
g356
sg19
S'TestOperators'
p498
sg358
S'ea.testexecutorlib.TestOperatorsLib'
p499
sa(dp500
g7
S'The library provides validation of input text, generic or not.'
p501
sg9
(lp502
(dp503
g12
(lp504
(dp505
g15
(lp506
sg2
g18
sg19
g20
sg7
S'\n        Validator for emails, according to the RFC5322 and RFC3696 which returns True if the email is valid, and False otherwise.\n        '
p507
sa(dp508
g15
(lp509
S'email'
p510
asg2
g18
sg19
S'isValid'
p511
sg7
S'\n        Check if the format of the email gived as argument is valid\n\n        @param email: email to evaluate\n        @type email: unknown\n\n        @return: True if valid or False otherwise\n        @rtype: boolean\n        '
p512
sasg2
g22
sg19
S'Email'
p513
sa(dp514
g12
(lp515
(dp516
g15
(lp517
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for float or can be also used to generate some random float number\n        '
p518
sa(dp519
g2
g18
sg15
(lp520
S'fmin'
p521
aS'fmax'
p522
asg47
(lp523
(g521
F0.0
tp524
a(g522
F10.0
tp525
asg19
S'getRandom'
p526
sg7
S'\n        Returns a floating-point random value from the interval [fmin,fmax]\n\n        @param fmin: minimun value of the interval\n        @type fmin: float\n\n        @param fmax: maximum value of the interval\n        @type fmax: float\n\n        @return:  a floating-point random value\n        @rtype: float\n        '
p527
sa(dp528
g15
(lp529
S'n'
p530
asg2
g18
sg19
g511
sg7
S'\n        Returns True if the argument n is valid, and False otherwise.\n\n        @param n: argument to evaluate\n        @type n: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p531
sasg2
g22
sg19
S'Float'
p532
sa(dp533
g12
(lp534
(dp535
g15
(lp536
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for ftp url according to the rfc1738 which returns True if the ftp url is valid, and False otherwise.\n        '
p537
sa(dp538
g15
(lp539
S'url'
p540
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the ftp url gived as argument is valid\n\n        @param ftp: ftp url to evaluate\n        @type ftp: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p541
sasg2
g22
sg19
S'FtpUrl'
p542
sa(dp543
g12
(lp544
(dp545
g15
(lp546
sg2
g18
sg19
g20
sg7
S'\n        Validator for domain, according to the RFC1738 which returns True if the hostname is valid, and False otherwise.\n        '
p547
sa(dp548
g15
(lp549
S'hostname'
p550
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the hostname gived as argument is valid\n\n        @param hostname: hostname to evaluate\n        @type hostname: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p551
sasg2
g22
sg19
S'Hostname'
p552
sa(dp553
g12
(lp554
(dp555
g15
(lp556
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for http url according to the rfc1738 which returns True if the http url is valid, and False otherwise.\n        '
p557
sa(dp558
g2
g18
sg15
(lp559
g540
aS'https'
p560
asg47
(lp561
(g560
I00
tp562
asg19
g511
sg7
S'\n        Check if the format of the http url gived as argument is valid\n\n        @param url: http url to evaluate\n        @type url: unknown\n\n        @param https: secure http\n        @type https: boolean\n\n        @return: valid or not\n        @rtype: boolean\n        '
p563
sasg2
g22
sg19
S'HttpUrl'
p564
sa(dp565
g12
(lp566
(dp567
g2
g18
sg15
(lp568
S'separator'
p569
asg47
(lp570
(g569
S'.'
p571
tp572
asg19
g20
sg7
S'\n        This class provides a validator for ip v4 address or can be also used to generate random ip or more.\n\n        @param separator: separator (default=.)\n        @type separator: string\n        '
p573
sa(dp574
g15
(lp575
sg2
g18
sg19
S'getBroadcast'
p576
sg7
S'\n        Return a broadcast IP address (255.255.255.255)\n\n        @return: ip address\n        @rtype: string\n        '
p577
sa(dp578
g15
(lp579
sg2
g18
sg19
S'getLocalhost'
p580
sg7
S'\n        Return a localhost IP address\n\n        @return: ip address\n        @rtype: string\n        '
p581
sa(dp582
g15
(lp583
sg2
g18
sg19
S'getNull'
p584
sg7
S'\n        Return a null IP address (0.0.0.0)\n\n        @return: ip v4 address\n        @rtype: string\n        '
p585
sa(dp586
g15
(lp587
sg2
g18
sg19
g526
sg7
S'\n        Return a random IP address\n\n        @return: ip address\n        @rtype: string\n        '
p588
sa(dp589
g15
(lp590
S'ip'
p591
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the ip gived as argument is valid\n\n        @param ip: ip to evaluate\n        @type ip: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p592
sa(dp593
g15
(lp594
g591
asg2
g18
sg19
S'toList'
p595
sg7
S'\n        Return IP address as a list of integer\n        0.0.0.0 -> [ 0, 0, 0, 0 ]\n\n        @param ip: ip address\n        @type ip: string\n\n        @return: ip address as a list\n        @rtype: list\n        '
p596
sasg2
g22
sg19
S'IPv4Address'
p597
sa(dp598
g12
(lp599
(dp600
g15
(lp601
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for ip v6 address.\n        '
p602
sa(dp603
g15
(lp604
g591
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the ip gived as argument is valid\n\n        @param ip: ip to evaluate\n        @type ip: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p605
sasg2
g22
sg19
S'IPv6Address'
p606
sa(dp607
g12
(lp608
(dp609
g15
(lp610
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for integer or can be also used to generate some random integer.\n        '
p611
sa(dp612
g2
g18
sg15
(lp613
S'imin'
p614
aS'imax'
p615
asg47
(lp616
(g614
I0
tp617
a(g615
I10
tp618
asg19
g526
sg7
S'\n        Returns an integral random value from the interval [imin,imax]\n\n        @param imin: minimun value of the interval\n        @type imin: integer\n\n        @param imax: maximum value of the interval\n        @type imax: integer\n\n        @return:  an integral random value\n        @rtype: integer\n        '
p619
sa(dp620
g15
(lp621
g530
asg2
g18
sg19
g511
sg7
S'\n        Returns True if the argument n is valid, and False otherwise.\n\n        @param n: argument to evaluate\n        @type n: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p622
sasg2
g22
sg19
S'Integer'
p623
sa(dp624
g12
(lp625
(dp626
g2
g18
sg15
(lp627
g569
asg47
(lp628
(g569
S':'
p629
tp630
asg19
g20
sg7
S'\n        This class provides a validator for mac address or can be also used to generate random mac or more.\n\n        @param separator: separator (default=:)\n        @type separator: string\n        '
p631
sa(dp632
g15
(lp633
sg2
g18
sg19
g576
sg7
S'\n        Return a broadcast (FF) MAC address\n\n        @return: mac address\n        @rtype: string\n        '
p634
sa(dp635
g15
(lp636
sg2
g18
sg19
g584
sg7
S'\n        Return a null (00) MAC address\n\n        @return: mac address\n        @rtype: string\n        '
p637
sa(dp638
g15
(lp639
sg2
g18
sg19
g526
sg7
S'\n        Return a random mac address\n\n        @return: mac address\n        @rtype: string\n        '
p640
sa(dp641
g15
(lp642
S'mac'
p643
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the mac gived as argument is valid\n\n        @param mac: mac to evaluate\n        @type mac: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p644
sa(dp645
g15
(lp646
g643
asg2
g18
sg19
g595
sg7
S'\n        Return MAC address as a list of integer\n        00:00:00:00:00:00 -> [ 0, 0, 0, 0, 0, 0 ]\n\n        @param mac: mac address\n        @type mac: string\n\n        @return: mac address as a list\n        @rtype: list\n        '
p647
sasg2
g22
sg19
S'MacAddress'
p648
sa(dp649
g12
(lp650
(dp651
g15
(lp652
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for string or can be also used to generate some random string with different combinations of characters.\n        '
p653
sa(dp654
g15
(lp655
S'strVal'
p656
asg2
g18
sg19
S'containsDigits'
p657
sg7
S'\n        Evaluate the argument strVal and return the number of digits detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of digits\n        @rtype: integer\n        '
p658
sa(dp659
g15
(lp660
g656
asg2
g18
sg19
S'containsLowerCase'
p661
sg7
S'\n        Evaluate the argument strVal and return the number of letters detected in lower case\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of letters in lowercase\n        @rtype: integer\n        '
p662
sa(dp663
g15
(lp664
g656
asg2
g18
sg19
S'containsPunctuations'
p665
sg7
S'\n        Evaluate the argument strVal and return the number of punctuation detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of punctuation\n        @rtype: integer\n        '
p666
sa(dp667
g15
(lp668
g656
asg2
g18
sg19
S'containsUpperCase'
p669
sg7
S'\n        Evaluate the argument strVal and return the number of letters detected in upper case\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of letters in uppercase\n        @rtype: integer\n        '
p670
sa(dp671
g15
(lp672
g656
asg2
g18
sg19
S'containsWhitespaces'
p673
sg7
S'\n        Evaluate the argument strVal and return the number of whitespace detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of whitespace\n        @rtype: integer\n        '
p674
sa(dp675
g2
g18
sg15
(lp676
S'length'
p677
aS'withLetterLowerCase'
p678
aS'withLetterUpperCase'
p679
aS'withPunctuation'
p680
aS'withDigits'
p681
aS'withWhitespace'
p682
aS'withHexdigits'
p683
asg47
(lp684
(g677
I8
tp685
a(g678
I01
tp686
a(g679
I01
tp687
a(g680
I00
tp688
a(g681
I00
tp689
a(g682
I00
tp690
a(g683
I00
tp691
asg19
g526
sg7
S'\n        Get a random string with various combination of characters\n\n        @param length: string output length\n        @type length: integer\n\n        @param withLetterLowerCase: \'abcdefghijklmnopqrstuvwxyz\'\n        @type withLetterLowerCase: boolean\n\n        @param withLetterUpperCase: \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\'\n        @type withLetterUpperCase: boolean\n\n        @param withPunctuation: !"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\n        @type withPunctuation: boolean\n\n        @param withDigits: \'0123456789\'\n        @type withDigits: boolean\n\n        @param withWhitespace: authorize whitespace\n        @type withWhitespace: boolean\n\n        @param withHexdigits: \'0123456789abcdefABCDEF\'.\n        @type withHexdigits: boolean\n\n        @return: a random string of the length passed as argument\n        @rtype: string\n        '
p692
sa(dp693
g15
(lp694
g656
asg2
g18
sg19
g511
sg7
S'\n        Returns True if the argument strVal is valid, and False otherwise.\n\n        @param strVal: argument to evaluate\n        @type strVal: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p695
sasg2
g22
sg19
S'String'
p696
sa(dp697
g12
(lp698
(dp699
g15
(lp700
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for uri according to the rfc3986 which returns True if the uri is valid, and False otherwise.\n        '
p701
sa(dp702
g15
(lp703
S'uri'
p704
asg2
g18
sg19
g511
sg7
S'\n        Check if the format of the uri gived as argument is valid\n\n        @param uri: uri to evaluate\n        @type uri: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p705
sasg2
g22
sg19
S'Uri'
p706
sasg2
g356
sg19
S'TestValidators'
p707
sg358
S'ea.testexecutorlib.TestValidatorsLib'
p708
sa(dp709
g7
S'This library enable to create template messages.'
p710
sg9
(lp711
(dp712
g12
(lp713
(dp714
g2
g18
sg15
(lp715
g17
asg47
(lp716
(g17
S'None'
p717
tp718
asg19
g20
sg7
S'\n        Generic template accessor\n        \n        @param parent: the parent testcase\n        @type parent: testcase\n        '
p719
sa(dp720
g15
(lp721
S'template'
p722
ag171
asg2
g18
sg19
S'compare'
p723
sg7
S'\n        Compare templates\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @param expected: template message or layer\n        @type expected: templatemessage/templatelayer\n\n        @return: result of the comparaison\n        @rtype: boolean\n        '
p724
sa(dp725
g15
(lp726
g722
asg2
g18
sg19
S'getRaw'
p727
sg7
S'\n        Return raw message from template\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @return: raw message\n        @rtype: string\n        '
p728
sa(dp729
g2
g18
sg15
(lp730
g722
aS'layerName'
p731
aS'layerKey'
p732
aS'subLayerKey'
p733
aS'caseSensitive'
p734
asg47
(lp735
(g733
S'None'
p736
tp737
a(g734
I01
tp738
asg19
S'getValue'
p739
sg7
S'\n        Return value according to the layer name and key passed as argument\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @param layerName: key name\n        @type layerName: string\n\n        @param layerKey: key name\n        @type layerKey: string\n\n        @param subLayerKey: sub key name\n        @type subLayerKey: string/none\n        \n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: layer value as string or template layer\n        @rtype: string/templatelayer/none\n        '
p740
sa(dp741
g15
(lp742
g19
ag33
asg2
g18
sg19
S'prepareLayer'
p743
sg7
S'\n        Prepare the template layer according to the data\n\n        @param name: layer name\n        @type name: string\n\n        @param data: layer data\n        @type data: dict/list\n\n        @return: the template layer\n        @rtype: templatelayer\n        '
p744
sasg2
g22
sg19
S'Template'
p745
sa(dp746
g12
(lp747
(dp748
g15
(lp749
g19
asg2
g18
sg19
g20
sg7
S'\n        A template layer is a tuple with the name of the layer and the associated value.\n\n        @param name: layer name\n        @type name: string/integer\n        '
p750
sa(dp751
g15
(lp752
g19
ag33
asg2
g18
sg19
S'addKey'
p753
sg7
S'\n        Add the key (name,data) to the layer\n\n        @param name: key name\n        @type name: string/integer\n\n        @param data: key value\n        @type data: string/integer/templatelayer\n        '
p754
sa(dp755
g15
(lp756
S'more'
p757
asg2
g18
sg19
S'addMore'
p758
sg7
S'\n        Add more \n\n        @param more: key, name data\n        @type more: dict\n        '
p759
sa(dp760
g15
(lp761
g328
asg2
g18
sg19
S'addRaw'
p762
sg7
S'\n        Add the raw layer\n\n        @param raw: raw template layer\n        @type raw: string\n        '
p763
sa(dp764
g2
g18
sg15
(lp765
S'key'
p766
ag734
asg47
(lp767
(g766
S'None'
p768
tp769
a(g734
I01
tp770
asg19
g43
sg7
S'\n        Get the value of the key passed as argument.\n        Returns None if the key is not found.\n        If no arguments are passed, then this function returns the template message as a tuple of (string,dict)\n\n        @param key: key name\n        @type key: string/none\n\n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: string/none/tuple\n        '
p771
sa(dp772
g2
g18
sg15
(lp773
g766
ag734
asg47
(lp774
(g766
S'None'
p775
tp776
a(g734
I01
tp777
asg19
S'getInt'
p778
sg7
S'\n        Identical to the function get\n        But force to return the value as integer\n\n        @param key: key name\n        @type key: string/none\n\n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: integer/none/tuple\n        '
p779
sa(dp780
g15
(lp781
sg2
g18
sg19
S'getItems'
p782
sg7
S'\n        Returns items as list [ (key,value), ... ]\n\n        @return: layer data\n        @rtype: list\n        '
p783
sa(dp784
g15
(lp785
sg2
g18
sg19
S'getKeys'
p786
sg7
S'\n        Returns layer key only\n\n        @return: layer keys \n        @rtype: list\n        '
p787
sa(dp788
g15
(lp789
sg2
g18
sg19
S'getLenItems'
p790
sg7
S'\n        Return the length data\n\n        @return: layer data length\n        @rtype: integer\n        '
p791
sa(dp792
g15
(lp793
sg2
g18
sg19
S'getName'
p794
sg7
S'\n        Returns the name of the layer\n\n        @return: layer name\n        @rtype: string\n        '
p795
sa(dp796
g15
(lp797
sg2
g18
sg19
g727
sg7
S'\n        Return the template layer as raw\n\n        @return: raw message\n        @rtype: string\n        '
p798
sa(dp799
g15
(lp800
sg2
g18
sg19
S'getValues'
p801
sg7
S'\n        Returns layer values only\n\n        @return: layer values\n        @rtype: list\n        '
p802
sa(dp803
g15
(lp804
g19
asg2
g18
sg19
S'removeKey'
p805
sg7
S'\n        Remove the key name from the layer\n\n        @param name: key name\n        @type name: string\n        '
p806
sa(dp807
g15
(lp808
g19
ag33
asg2
g18
sg19
S'updateKey'
p809
sg7
S'\n        Update the key (name,data) to the layer\n\n        @param name: key name\n        @type name: string\n\n        @param data: key value\n        @type data: string/templatelayer\n        '
p810
sa(dp811
g15
(lp812
g19
asg2
g18
sg19
S'updateName'
p813
sg7
S'\n        Update the name of the layer\n\n        @param name: name of the layer\n        @type name: string\n        '
p814
sasg2
g22
sg19
S'TemplateLayer'
p815
sa(dp816
g12
(lp817
(dp818
g15
(lp819
sg2
g18
sg19
g20
sg7
S'\n        Template Message\n        This is a list of TemplateLayer\n        '
p820
sa(dp821
g15
(lp822
S'layer'
p823
asg2
g18
sg19
S'addLayer'
p824
sg7
S'\n        Add a layer to the template message\n\n        @param layer: layer\n        @type layer: templatelayer\n        '
p825
sa(dp826
g15
(lp827
g328
asg2
g18
sg19
g762
sg7
S'\n        Add the raw message\n\n        @param raw: raw template message\n        @type raw: string\n        '
p828
sa(dp829
g2
g18
sg15
(lp830
g19
ag766
aS'keyCaseSensitive'
p831
asg47
(lp832
(g19
S'None'
p833
tp834
a(g766
S'None'
p835
tp836
a(g831
I01
tp837
asg19
g43
sg7
S'\n        Get the value of the key and the layer <name>\n        If no arguments are passed, then this function \n        returns the template message as a list of tuple.\n        Returns None if the key and the <name> are not found.\n\n        @param name: layer name\n        @type name: string/none\n\n        @param key: key name\n        @type key: string/none\n\n        @param keyCaseSensitive: the key is case sensitive is True\n        @type keyCaseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: string/list/none/templatelayer\n        '
p838
sa(dp839
g2
g18
sg15
(lp840
g19
ag766
ag831
asg47
(lp841
(g19
S'None'
p842
tp843
a(g766
S'None'
p844
tp845
a(g831
I01
tp846
asg19
g778
sg7
S'\n        Identical to the function get\n        But force to return the value as integer\n\n        @param name: layer name\n        @type name: string/none\n\n        @param key: key name\n        @type key: string/none\n\n        @param keyCaseSensitive: the key is case sensitive is True\n        @type keyCaseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: integer/none/templatelayer\n        '
p847
sa(dp848
g15
(lp849
g19
asg2
g18
sg19
S'getLayer'
p850
sg7
S'\n        Get a layer from the template message by the name\n\n        @param name: layer name\n        @type name: string\n\n        @return: templatelayer\n        @rtype: none/templatelayer\n        '
p851
sa(dp852
g15
(lp853
sg2
g18
sg19
g727
sg7
S'\n        Return the template message as raw\n\n        @return: raw message\n        @rtype: string\n        '
p854
sasg2
g22
sg19
S'TemplateMessage'
p855
sasg2
g356
sg19
S'TestTemplates'
p856
sg358
S'ea.testexecutorlib.TestTemplatesLib'
p857
sa(dp858
g7
S'The library enable to create test reporting in realtime.'
p859
sg9
(lp860
(dp861
g12
(lp862
(dp863
g15
(lp864
sg2
g18
sg19
g20
sg7
S'\n        Get all testcases as an iterator.\n        Iterate on each testcase to get the verdict.\n        '
p865
sasg2
g22
sg19
S'TestCases'
p866
sasg2
g356
sg19
S'TestReporting'
p867
sg358
S'ea.testexecutorlib.TestReportingLib'
p868
sa(dp869
g7
S'The library provides some important functionalities to create adapters.'
p870
sg9
(lp871
(dp872
g12
(lp873
(dp874
g2
g18
sg15
(lp875
g17
ag19
ag358
aS'debug'
p876
aS'showEvts'
p877
aS'showSentEvts'
p878
aS'showRecvEvts'
p879
aS'shared'
p880
aS'agentSupport'
p881
aS'agent'
p882
aS'timeoutSleep'
p883
aS'caller'
p884
aS'agentType'
p885
asg47
(lp886
(g358
S'None'
p887
tp888
a(g876
I00
tp889
a(g877
I01
tp890
a(g878
I01
tp891
a(g879
I01
tp892
a(g880
I00
tp893
a(g881
I00
tp894
a(g882
S'None'
p895
tp896
a(g883
F0.1
tp897
a(g884
S'None'
p898
tp899
a(g885
S'None'
p900
tp901
asg19
g20
sg7
S'\n        All adapters must inherent from this class\n\n        @param parent: the parent testcase\n        @type parent: testcase\n\n        @param name: adapter type name\n        @type name: string\n\n        @param realname: adapter name\n        @type realname: string/None\n\n        @param agentSupport: use agent or not (default=False)\n        @type agentSupport: boolean\n\n        @param agent: agent name (default=None)\n        @type agent: none/dict\n\n        @param debug: True to activate debug mode, default value=False\n        @type debug: boolean\n        \n        @param shared: True to activate shared mode, default value=False\n        @type shared: boolean\n        '
p902
sa(dp903
g2
g18
sg15
(lp904
g324
ag328
asg47
(lp905
(g328
I01
tp906
asg19
g876
sg7
S'\n        Display an debug message\n\n        @param txt: debug message\n        @type txt: string\n        '
p907
sa(dp908
g2
g18
sg15
(lp909
g324
ag325
ag326
ag327
ag328
asg47
(lp910
(g325
I00
tp911
a(g326
I00
tp912
a(g327
I00
tp913
a(g328
I00
tp914
asg19
g334
sg7
S'\n        Display an error message\n        Nothing is displayed if txt=None\n\n        @param txt: error message\n        @type txt: string\n\n        @param bold: text is rendered as bold\n        @type bold: boolean\n\n        @param italic: text is rendered as italic\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p915
sa(dp916
g15
(lp917
sg2
g18
sg19
S'getAdapterId'
p918
sg7
S'\n        Return the adapter id\n        '
p919
sa(dp920
g2
g18
sg15
(lp921
g324
ag325
ag326
ag327
ag328
asg47
(lp922
(g325
I00
tp923
a(g326
I00
tp924
a(g327
I00
tp925
a(g328
I00
tp926
asg19
g343
sg7
S'\n        Display an info message\n        Nothing is displayed if txt=None\n\n        @param txt: info message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p927
sa(dp928
g15
(lp929
S'shortEvt'
p930
aS'tplEvt'
p931
asg2
g18
sg19
S'logRecvEvent'
p932
sg7
S'\n        Log the received event from the SUT\n\n        @param shortEvt: short resume of the event\n        @type shortEvt: string\n\n        @param tplEvt: event received\n        @type tplEvt: templatemessage\n        '
p933
sa(dp934
g15
(lp935
g930
ag931
asg2
g18
sg19
S'logSentEvent'
p936
sg7
S'\n        Log the event sent to the SUT\n\n        @param shortEvt: short resume of the event\n        @type shortEvt: string\n\n        @param tplEvt: event sent\n        @type tplEvt: templatemessage\n        '
p937
sa(dp938
g15
(lp939
sg2
g18
sg19
S'onReset'
p940
sg7
S'\n        On reset, called automatically by framework\n        Function to overwrite\n        '
p941
sa(dp942
g15
(lp943
sg2
g18
sg19
S'onRun'
p944
sg7
S'\n        Function to reimplement\n        '
p945
sa(dp946
g15
(lp947
g86
asg2
g18
sg19
S'privateAddFolder'
p948
sg7
S'\n        Add folder in the private area of the adapter\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p949
sa(dp950
g15
(lp951
g91
ag33
asg2
g18
sg19
S'privateAppendFile'
p952
sg7
S'\n        Append binary data. These data are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p953
sa(dp954
g15
(lp955
g96
asg2
g18
sg19
S'privateGetFile'
p956
sg7
S'\n        Get file in private area\n        \n        @param filename: filename to read\n        @type filename: string\n        \n        @return: file contetn\n        @rtype: string\n        '
p957
sa(dp958
g15
(lp959
sg2
g18
sg19
S'privateGetPath'
p960
sg7
S'\n        Return path to access to the private area of the adapter\n        \n        @return: public path\n        @rtype: string\n        '
p961
sa(dp962
g15
(lp963
g91
ag33
asg2
g18
sg19
S'privateSaveFile'
p964
sg7
S'\n        Storing binary data. These data are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p965
sa(dp966
g2
g18
sg15
(lp967
g171
ag66
ag375
aS'XOR'
p968
asg47
(lp969
(g375
I01
tp970
a(g968
I00
tp971
asg19
S'received'
p972
sg7
S'\n        '
p973
sa(dp974
g15
(lp975
g33
asg2
g18
sg19
S'receivedDataFromAgent'
p976
sg7
S'\n        Received data from agent\n        Function to reimplement\n        '
p977
sa(dp978
g15
(lp979
g33
asg2
g18
sg19
S'receivedErrorFromAgent'
p980
sg7
S'\n        Received error from agent\n        Function to reimplement\n        '
p981
sa(dp982
g15
(lp983
g33
asg2
g18
sg19
S'receivedNotifyFromAgent'
p984
sg7
S'\n        Received notify from agent\n        Function to reimplement\n        '
p985
sa(dp986
g15
(lp987
sg2
g18
sg19
S'setRunning'
p988
sg7
S'\n        Start to run the <onRun> function\n        '
p989
sa(dp990
g15
(lp991
sg2
g18
sg19
S'stopRunning'
p992
sg7
S'\n        Stop adapter\n        '
p993
sa(dp994
g15
(lp995
sg2
g18
sg19
S'testcase'
p996
sg7
S'\n        Accessor to the testcase\n        '
p997
sa(dp998
g15
(lp999
sg2
g18
sg19
S'unsetRunning'
p1000
sg7
S'\n        Stop to run the <onRun> function\n        '
p1001
sa(dp1002
g2
g18
sg15
(lp1003
g324
ag325
ag326
ag327
ag328
asg47
(lp1004
(g325
I00
tp1005
a(g326
I00
tp1006
a(g327
I00
tp1007
a(g328
I00
tp1008
asg19
g352
sg7
S'\n        Display an debug message\n        Nothing is displayed if txt=None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p1009
sasg2
g22
sg19
S'Adapter'
p1010
sg7
S'\n    Adapter class\n    '
p1011
sa(dp1012
g12
(lp1013
(dp1014
g15
(lp1015
g17
ag19
aS'initial'
p1016
asg2
g18
sg19
g20
sg7
S'\n        State manager\n\n        @param parent: parent adapter\n        @type parent: adapter\n\n        @param name: automaton name\n        @type name: string\n\n        @param initial: initial state\n        @type initial: string\n        '
p1017
sa(dp1018
g15
(lp1019
sg2
g18
sg19
g43
sg7
S'\n        Returns the current state\n        \n        @return: current state\n        @rtype: string\n        '
p1020
sa(dp1021
g15
(lp1022
S'state'
p1023
asg2
g18
sg19
g57
sg7
S'\n        Set the state\n\n        @param state: state\n        @type state: string\n        '
p1024
sasg2
g22
sg19
S'State'
p1025
sg7
S'\n    '
p1026
sa(dp1027
g12
(lp1028
(dp1029
g2
g18
sg15
(lp1030
g17
aS'duration'
p1031
ag19
aS'callback'
p1032
aS'logEvent'
p1033
ag141
aS'callbackArgs'
p1034
asg47
(lp1035
(g1033
I01
tp1036
a(g141
I01
tp1037
a(g1034
(dp1038
tp1039
asg19
g20
sg7
S'\n        Timer\n        \n        @param parent: adapter\n        @type parent: adapter\n\n        @param duration: time to wait in seconds\n        @type duration: float\n\n        @param name: timer description\n        @type name: string\n\n        @param callback: callback function\n        @type callback: function\n\n        @param logEvent: log timer events (default=True)\n        @type logEvent: boolean\n\n        @param enabled: timer enabled (default=True)\n        @type enabled: boolean\n        \n        @param callbackArgs: arguments to the callback function\n        @type callbackArgs: dict\n        '
p1040
sa(dp1041
g15
(lp1042
sg2
g18
sg19
S'restart'
p1043
sg7
S'\n        Restart the timer before the end\n        '
p1044
sa(dp1045
g15
(lp1046
sg2
g18
sg19
S'setDisable'
p1047
sg7
S'\n        Disable the timer\n        '
p1048
sa(dp1049
g15
(lp1050
g1031
asg2
g18
sg19
S'setDuration'
p1051
sg7
S'\n        Set the duration\n\n        @param duration: time to wait in seconds\n        @type duration: float\n        '
p1052
sa(dp1053
g15
(lp1054
sg2
g18
sg19
S'setEnable'
p1055
sg7
S'\n        Enable the timer\n        '
p1056
sa(dp1057
g15
(lp1058
sg2
g18
sg19
g201
sg7
S'\n        Start the timer\n        '
p1059
sa(dp1060
g15
(lp1061
sg2
g18
sg19
S'stop'
p1062
sg7
S'\n        Stop the timer before the end\n        '
p1063
sasg2
g22
sg19
g318
sg7
S'\n    Timer object\n    '
p1064
sasg2
g356
sg19
S'SutAdapter'
p1065
sg358
S'ea.testexecutorlib.TestAdapterLib'
p1066
sasg19
S'TestLibrary'
p1067
sg7
S'General library.'
p1068
sa.