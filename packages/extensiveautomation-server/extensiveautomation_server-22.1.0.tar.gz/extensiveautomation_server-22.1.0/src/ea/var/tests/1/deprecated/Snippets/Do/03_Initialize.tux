<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>11/12/2016 15:52:03</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><color /><description /><type>bool</type><name>DEBUG</name><value>False</value><scope>local</scope></parameter><parameter><color>#D4FFAF</color><description /><type>global</type><name>ENVIRONMENT</name><value>1:Common:SAMPLE_ENVIRONMENT:</value><scope>local</scope></parameter><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter><parameter><color /><description /><type>bool</type><name>VERBOSE</name><value>True</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>dummy</type><name>AGENT</name><value>agent-dummy01</value></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def __parseDict(self, v, log=True):
	if not isinstance(v, dict): self.abort("dict is expected in platform key", stop=True)
	if isinstance(v.values()[0], dict):
		server = v.values()[0]
	else:
		if ":" not in 	v.values()[0]: 	self.abort("project expected in value", stop=True)
		# extract the key server name to read
		_prj, _key = v.values()[0].split(":", 1)
		# read the server according to the name
		server = shared(project=_prj.strip(), name=_key, subname='')
		
	if log:
		if isinstance(server, dict):
			keys = []
			for k in server.keys():
				keys.append(k)	
			self.info("- %s\n\n\t\t\t%s" % (v.keys()[0], '\n\t'.join(keys))   )
		else:
			self.info("- %s" % v.keys()[0]  )
	return ( v.keys()[0], server )

def __parseInstancesByName(self, server, name):
	if not isinstance(server["INSTANCES"], dict ) : self.abort( "dict expected in instances definition" )
	for ins_type, ins_values in server["INSTANCES"].items():
		for ins_name, ins_value in ins_values.items():
			
			if "COMMON" in server:
				if not isinstance(server["COMMON"], dict ) : self.abort( "dict expected in common definition" )
			ins_value.update( server["COMMON"] )
			
			ins_value["INSTANCE_NAME"] = ins_name
			
			Cache().set(name="%s_%s_%s" % (name,ins_type, ins_name) , data=ins_value, flag=False)
			if isinstance(ins_value, dict):
				keys = []
				for k in ins_value.keys():
					keys.append(k)	
				self.info("- %s\n\n\t\t\t%s" % ( "%s_%s_%s"  % (name,ins_type,ins_name), '\n\t'.join(keys))   )
			else:
				self.info("- %s_%s_%s" % (name,ins_type,ins_name)  )

def __parseInstancesByType(self, server, name):
	if not isinstance(server["INSTANCES"], dict ) : self.abort( "dict expected in instances definition" )
	for ins_type, ins_values in server["INSTANCES"].items():
		ins_list = []
		for ins_name, ins_value in ins_values.items():
			
			if "COMMON" in server:
				if not isinstance(server["COMMON"], dict ) : self.abort( "dict expected in common definition" )
			ins_value.update( server["COMMON"] )
			ins_value["INSTANCE_NAME"] = ins_name
			
			ins_list.append(ins_value)
		Cache().set(name="%s_%s" % (name,ins_type) , data=ins_list, flag=False)
		self.info("- %s_%s" % (name,ins_type)  )

def description(self):
	import json 
	
	# testcase description
	self.setPurpose(purpose=description('summary'))
	self.setRequirement(requirement=description('requirement'))

	# steps description
	self.step1 = self.addStep(expected="Environment saved in the cache", 
																			description="Set in the cache the environment", 
																			summary="Set in the cache the environment", 
																			enabled=True)
	

	# some controls
	if isinstance(input("ENVIRONMENT"), str):
		environment  = json.loads(input("ENVIRONMENT"))
		if environment is None: self.abort("Bad json environment provided", stop=True)
	else:
		environment  = input("ENVIRONMENT")
		
	if "PLATFORM" not in environment: self.abort("PLATFORM is mandatory in environnement", stop=True)
	if "DATASET" not in environment: self.abort("DATASET is mandatory in environnement", stop=True)

	# save platform in cache
	self.warning("SERVERS KEYS AVAILABLE IN CACHE:")
	
	if isinstance(environment["PLATFORM"], list):
		platform = environment["PLATFORM"]
		clusterMode = False
	elif isinstance(environment["PLATFORM"], dict):
		platform = environment["PLATFORM"].items()
		clusterMode = True
	else:
		self.abort( "list or dict expected in PLATFORM key")
	
	# iter in the list of servers
	if clusterMode:
		self.info( "> servers (dict)", bold=True )
		platforms_list = []
		for cluster_name, cluster_value in platform:
			if not isinstance(cluster_value, list ) : self.abort( "list expected in group definition" )
			for s in cluster_value:
				server_name, server = self.__parseDict(v=s, log=True)
				platforms_list.append(server)

		self.info( "> servers by instance names (dict)", bold=True )
		for cluster_name, cluster_value in platform:
			for s in cluster_value:
				server_name, server = self.__parseDict(v=s, log=False)
				if "INSTANCES" in server: self.__parseInstancesByName(server = server, name=server_name)

		self.info( "> servers by instance types (list)", bold=True )
		for cluster_name, cluster_value in platform:
			for s in cluster_value:
				server_name, server = self.__parseDict(v=s, log=False)
				if "INSTANCES" in server: self.__parseInstancesByType(server=server, name=server_name)

		self.info( "> servers by group (list)", bold=True )
		for cluster_name, cluster_value in platform:
			cluster_list= []
			for s in cluster_value:
				server_name, server = self.__parseDict(v=s, log=False)
				Cache().set(name=server_name, data=server, flag=False)
				cluster_list.append(server)
			Cache().set(name=cluster_name, data=cluster_list, flag=False)
			self.info("- %s" % cluster_name )
			
		self.info( "> servers by group and instance types (list)", bold=True )
		for cluster_name, cluster_value in platform:
			cluster_instype= {}
			for s in cluster_value:
				server_name, server = self.__parseDict(v=s, log=False)
				if "INSTANCES" in server:
					if not isinstance(server["INSTANCES"], dict ) : self.abort( "dict expected in instances definition" )
					for ins_type, ins_values in server["INSTANCES"].items():
						ins_value = ins_values.values()[0]
						if "COMMON" in server:
							if not isinstance(server["COMMON"], dict ) : self.abort( "dict expected in common definition" )
						ins_value.update( server["COMMON"] )
						if ins_type in cluster_instype:
							cluster_instype[ins_type].append( ins_value )
						else:
							cluster_instype[ins_type] = [ ins_value ]
			for instype, ins_values in cluster_instype.items():
				Cache().set(name="%s_%s" % (cluster_name, instype) , data=ins_values, flag=False)
				self.info("- %s_%s" % (cluster_name, instype) )
			
	else:
		self.info( "> servers (dict)", bold=True )
		platforms_list = []
		for s in platform:
			server_name, server = self.__parseDict(v=s)
			Cache().set(name=server_name, data=server, flag=False)
			platforms_list.append(server)
			
	Cache().set(name="PLATFORM", data=platforms_list, flag=False)
	self.info( "> all servers (list)", bold=True )
	self.info("- PLATFORM" )
	
	# read all the test data
	self.warning( "TESTS DATA KEYS AVAILABLE IN CACHE")
	for d in environment["DATASET"]:
		data_name, dataset = self.__parseDict(v=d)
		Cache().set(name=data_name, data=dataset, flag=False)
		
def prepare(self):
	pass
def definition(self):
	# starting initial step
	if self.step1.isEnabled():
		self.step1.start()

		if input('DEBUG'):
			envReadable = json.dumps(Cache().all() , sort_keys = False, indent = 4) 
			self.warning( "Environnement: \n%s" % envReadable, raw=True)
			
		self.step1.setPassed(actual="success")
def cleanup(self, aborted):
	if aborted: self.error(aborted)]]></testdefinition>
<testdevelopment>1481467923.407083</testdevelopment>
</file>