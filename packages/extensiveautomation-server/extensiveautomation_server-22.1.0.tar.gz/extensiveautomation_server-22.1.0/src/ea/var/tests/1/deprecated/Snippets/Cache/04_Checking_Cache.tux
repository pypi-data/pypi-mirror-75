<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>20/11/2016 19:29:16</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>TESTCASE</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><description /><type>text</type><name>CHECKING</name><value># checking contains
[!FROM:CACHE:EXAMPLE:] contains test</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>text</type><name>STEP_DESCRIPTION</name><value>Checking data in your test</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>text</type><name>STEP_EXPECTED</name><value>Results expected are ok</value><scope>local</scope></parameter><parameter><color>#C1EEFF</color><description /><type>text</type><name>TEST_PURPOSE</name><value>Checking result</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>dummy</type><name>AGENT</name><value>agent-dummy01</value></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose=input('TEST_PURPOSE'))
	self.setRequirement(requirement=description('requirement'))

	# steps description
	self.step1 = self.addStep(expected=input('STEP_EXPECTED'), 
																		description=input('STEP_DESCRIPTION'), 
																		summary=input('STEP_DESCRIPTION'), 
																		enabled=True)
def prepare(self):
	pass
def definition(self):
	# starting initial step
	if self.step1.isEnabled():
		self.step1.start()

		i = 0
		block = 3
		results = []
		for check in input('CHECKING').splitlines():
			if not (i % block):
				Trace(self).warning(txt="%s" % check[1:].lstrip(), bold=True, italic=False, multiline=False, raw=False)
			
			if (i % block) == 1:
				if not len(check): self.abort("bad data line format provided")
				
				checks = re.findall("(\[!FROM\:(?:CACHE|INPUT|OUTPUT)\:.*\:\])(?: )?(contains|matches|==|!=|<=|>=|>|<|)(?: )?(.*)", check)
				if len(checks) != 1: self.abort("bad checking format 1")
				if len(checks[0]) != 3: self.abort("bad checking format 2")
				
				L, O, R = checks[0]
				if O.strip().lower() not in [ "contains", "matches", "==", "!=", ">", "<", ">=", "<="]:
					self.abort( "bad operator provided 2")

				key = L.split(":")[2:-1][0]
				
				# prepare the a variable
				A = None; B = None;
				if "FROM:CACHE" in L:
					A = Cache().get(name=key)
				if "FROM:INPUT" in L:
					A = input(key)
				if "FROM:OUTPUT" in L:
					A = output(key)
				Trace(self).info(txt="%s:\n\n%s" % (key,A), bold=False, italic=False, multiline=False, raw=False)
				
				# prepare the b variable
				B = R
				Trace(self).info(txt="EXPECTED:\n\n%s" % B, bold=False, italic=False, multiline=False, raw=False)
				
				if O == "contains":
					if not TestOperators.Contains(needle=B).seekIn(haystack=A): 
						self.abort( "%s not contains %s" % (key, B) )
					
				if O == "matches":
					if not TestOperators.RegEx(needle=B).seekIn(haystack=A): 
						self.abort( "%s not matches with %s" % (key, B) )

				if O == "==":
					if not (A==B):  
						self.abort( "%s not equals to %s" % (key, B) )
				
				if O == "!=":
					if not (A!=B):  
						self.abort( "%s equals to %s" % (key, B) )
					
				if O == ">":
					if not (int(A)>int(B)):  
						self.abort( "%s not greater than to %s" % (key, B) )
					
				if O == "<":
					if not (int(A)<int(B)):  
						self.abort( "%s not lower than to %s" % (key, B) )
					
				if O == ">=":
					if not (int(A)>=int(B)):  
						self.abort( "%s not greater than or equals to %s" % (key, B) )
					
				if O == "<=":
					if not (int(A)<=int(B)):  
						self.abort( "%s not lower than or equals to %s" % (key, B) )
				
				Trace(self).info(txt="RESULT => OK", bold=True, italic=False, multiline=False, raw=False)
				
				
			i += 1

		self.step1.setPassed(actual="success")
def cleanup(self, aborted):
	if aborted: self.step1.setFailed(actual="%s" % aborted)]]></testdefinition>
<testdevelopment>1479666556.293746</testdevelopment>
</file>