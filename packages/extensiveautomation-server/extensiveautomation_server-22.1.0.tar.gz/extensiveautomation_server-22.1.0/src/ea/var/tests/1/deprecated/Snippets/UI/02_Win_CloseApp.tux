<?xml version="1.0" encoding="utf-8" ?>
<file>
<properties><descriptions><description><value>admin</value><key>author</key></description><description><value>14/05/2015 11:22:50</value><key>creation date</key></description><description><value>Just a basic sample.</value><key>summary</key></description><description><value>None.</value><key>prerequisites</key></description><description><value><comments /></value><key>comments</key></description><description><value>myplugins</value><key>libraries</key></description><description><value>myplugins</value><key>adapters</key></description><description><value>Writing</value><key>state</key></description><description><value>CLOSE APP</value><key>name</key></description><description><value>REQ_01</value><key>requirement</key></description></descriptions><inputs-parameters><parameter><description /><name>AGENT_GUI</name><color>#DBADFF</color><value>{"name": "agent.win.selenium01", "type": "sikulixserver"}</value><scope>local</scope><type>json</type></parameter><parameter><color>#DBADFF</color><description>Type name the app to close</description><type>str</type><name>APP_NAME</name><value /><scope>local</scope></parameter><parameter><color /><description /><type>bool</type><name>DEBUG</name><value>False</value><scope>local</scope></parameter><parameter><color /><description>Type system command</description><type>str</type><name>TEXT_2</name><value>taskkill /im </value><scope>local</scope></parameter><parameter><color /><description>Type name the app to close</description><type>alias</type><name>TEXT_3</name><value>APP_NAME</value><scope>local</scope></parameter><parameter><color /><description /><type>float</type><name>TIMEOUT_GUI</name><value>15.0</value><scope>local</scope></parameter></inputs-parameters><agents><agent><description /><type>sikuli</type><name>AGENT_GUI</name><value>agent.win.sikuli01</value></agent></agents><probes><probe><active>False</active><args /><name>probe01</name><type>default</type></probe></probes><outputs-parameters><parameter><color /><description /><type>float</type><name>TIMEOUT</name><value>1.0</value><scope>local</scope></parameter></outputs-parameters></properties>
<testdefinition><![CDATA[
def description(self):
	# testcase description
	self.setPurpose(purpose="GUI_Automation_Capture")

	# steps description
	self.step1 = self.addStep(expected="Action executed with success", description="Open run command", summary="Open run command", enabled=True)
	self.step2 = self.addStep(expected="Action executed with success", description="Type system command", summary="Type system command", enabled=True)
	self.step3 = self.addStep(expected="Action executed with success", description="Type name the app to close", summary="Type name the app to close", enabled=True)
	self.step4 = self.addStep(expected="Action executed with success", description="Close the app", summary="Close the app", enabled=True)

def prepare(self):
	# adapters and libraries definitions
	self.ADP_GUI = SutAdapters.GUI.Sikuli(parent=self, agent=input('AGENT_GUI'), debug=input('DEBUG'))

	

def cleanup(self, aborted):
	pass

def definition(self):
	##CAPTURE>Open run command
	if self.step1.isEnabled():
		self.step1.start()
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_WIN, modifier=None, special=None, other='r', repeat=0)
		APP_RET1 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET1 is None:
			self.step1.setFailed("Unable to open run command")
		else:
			self.step1.setPassed("Executing with success: open run command")
	
	##CAPTURE>Type system command
	if self.step2.isEnabled():
		self.step2.start()
		actionId = self.ADP_GUI.typeText( text=input('TEXT_2'), description="Type system command" )
		APP_RET2 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET2 is None:
			self.step2.setFailed("Unable to type system command")
		else:
			self.step2.setPassed("Executing with success: type system command")
	
	##CAPTURE>Type name the app to close
	if self.step3.isEnabled():
		self.step3.start()
		actionId = self.ADP_GUI.typeText( text=input('TEXT_3'), description="Type name the app to close" )
		APP_RET3 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET3 is None:
			self.step3.setFailed("Unable to type name the app to close")
		else:
			self.step3.setPassed("Executing with success: type name the app to close")
	
	##CAPTURE>Close the app
	if self.step4.isEnabled():
		self.step4.start()
		actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ENTER, modifier=None, special=None, other=None, repeat=0)
		APP_RET4 = self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId)
		if APP_RET4 is None:
			self.step4.setFailed("Unable to close the app")
		else:
			self.step4.setPassed("Executing with success: close the app")
	]]></testdefinition>
<testdevelopment>1431595370.75</testdevelopment>
</file>