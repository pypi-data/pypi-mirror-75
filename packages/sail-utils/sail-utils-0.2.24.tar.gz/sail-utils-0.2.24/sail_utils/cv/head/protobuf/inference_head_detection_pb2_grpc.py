# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sail_utils.cv.head.protobuf.inference_head_detection_pb2 as inference__head__detection__pb2


class HeadDetectionStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.DetectHead = channel.unary_unary(
            '/inference_head_detection.HeadDetection/DetectHead',
            request_serializer=inference__head__detection__pb2.ObjectDetectionRequest.SerializeToString,
            response_deserializer=inference__head__detection__pb2.ObjectDetectionResponse.FromString,
        )


class HeadDetectionServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def DetectHead(self, request, context):
        """unary-unary (In a single call, both client and server can only send and receive data once.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeadDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'DetectHead': grpc.unary_unary_rpc_method_handler(
            servicer.DetectHead,
            request_deserializer=inference__head__detection__pb2.ObjectDetectionRequest.FromString,
            response_serializer=inference__head__detection__pb2.ObjectDetectionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'inference_head_detection.HeadDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
