# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sail_utils.cv.object.protobuf.inference_pb2 as inference__pb2


class KeyObjectDetectionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DetectKeyObject = channel.unary_unary(
        '/inference.KeyObjectDetection/DetectKeyObject',
        request_serializer=inference__pb2.ObjectDetectionRequest.SerializeToString,
        response_deserializer=inference__pb2.ObjectDetectionResponse.FromString,
        )


class KeyObjectDetectionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def DetectKeyObject(self, request, context):
    """unary-unary (In a single call, both client and server can only send and receive data once.)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_KeyObjectDetectionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DetectKeyObject': grpc.unary_unary_rpc_method_handler(
          servicer.DetectKeyObject,
          request_deserializer=inference__pb2.ObjectDetectionRequest.FromString,
          response_serializer=inference__pb2.ObjectDetectionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inference.KeyObjectDetection', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
