# encoding: utf-8
# THIS FILE IS AUTOGENERATED!
from __future__ import unicode_literals
from setuptools import setup
setup(
    author='Various',
    author_email='kyle@lahnakoski.com',
    classifiers=["Development Status :: 4 - Beta","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3 :: Only","Topic :: Software Development :: Libraries :: Python Modules","Topic :: Software Development :: Quality Assurance"],
    description='More Black! Denser Black formatting',
    entry_points={"console_scripts":["black=black:patched_main","blackd=blackd:patched_main [d]","black-primer=black_primer.cli:main"]},
    include_package_data=True,
    install_requires=["aiohttp","aiohttp_cors","appdirs","attrs==18.1.0","click==6.5","dataclasses==0.6","pathspec","regex==2020.1.8","toml==0.9.4","typed-ast==1.4.0"],
    license='MIT',
    long_description='\n# More Black! - Denser Black formatting\n\nThis is s a fork of [the Black code formatter](https://github.com/psf/black)\n\n### Problem\n\nI love Black formatting because I agree with its formatting choices, but it does have one pathology: [Excessive indenting on data structures](https://github.com/psf/black/issues/626)\n\n```python\nschema = {\n    "mappings": {\n        "test": {\n            "properties": {\n                "one_value": {\n                    "type": "keyword",\n                    "store": True,\n                }\n            }\n        }\n    }\n}\n```\n\nThe pathology looks even worse for singleton lists; many lines can be wasted on lonely brackets:  \n\n```python\nmy_method(\n    [\n        {\n            "name": "a",\n            "value": 42\n        }\n    ]\n)\n```\n\n\n### Solution: More Black!\n\nWhen there is only one property (or list item, or parameter), then do not make a new line.\n\n```python\nschema = {"mappings": {"test": {"properties": {"one_value": {\n    "type": "keyword", \n    "store": True,\n}}}}}\n\n```\n\nSingleton lists are especially dense. \n\n```python\nmy_method([{\n    "name": "a",\n    "value": 42\n}])\n```\n\n\n## Usage\n\nPlease [read the official Black documentation at time of fork](https://github.com/psf/black/blob/537ea8df35b1004bdb228b483907fb5dd92e5257/README.md#usage)\n\n\n## Development\n\nBe sure you are in the `mo-black` main directory\n\nSetup virtual environment\n\n    python -m venv .venv\n    source .venv/bin/activate\n\nInstall requirements \n\n    pip install -r requirements.txt\n    pip install -r tests/requirements.txt\n\nSet some environment variables\n\n    export PYTHONPATH=src:.\n    export SKIP_AST_PRINT=true\n\nRun the tests \n\n    python -m unittest tests/test_black.py\n\nHere is the same for Windows...\n\n    c:\\Python38\\python -m pip install virtualenv\n    c:\\Python38\\python -m virtualenv .venv             \n    .venv\\Scripts\\activate\n    pip install -r requirements.txt\n    pip install -r tests\\requirements.txt\n    set PYTHONPATH=src;.\n    set SKIP_AST_PRINT=true\n    python -m unittest tests\\test_black.py\n\n### Upgrade `requirements.txt`\n\nThe `requirements.in` file is for humans to update.  Use `pip-compile` to update the locked `requirements.txt` file:\n\n    pip install -r tests\\requirements.txt\n    pip-compile --upgrade --generate-hashes --output-file requirements.txt requirements.in\n    pip install -r requirements.txt\n\n### Development Installation\n\nYou can install `mo-black` from the main directory\n\n    python.exe -m pip install .\n',
    long_description_content_type='text/markdown',
    name='mo-black',
    package_dir={"":"src"},
    packages=["blackd","black","blib2to3","blib2to3.pgen2"],
    url='https://github.com/klahnakoski/mo-black',
    version='3.90.20218'
)