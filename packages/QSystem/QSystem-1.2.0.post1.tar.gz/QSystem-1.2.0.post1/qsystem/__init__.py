# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _qsystem
else:
    import _qsystem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _qsystem.delete_SwigPyIterator

    def value(self):
        return _qsystem.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _qsystem.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _qsystem.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _qsystem.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _qsystem.SwigPyIterator_equal(self, x)

    def copy(self):
        return _qsystem.SwigPyIterator_copy(self)

    def next(self):
        return _qsystem.SwigPyIterator_next(self)

    def __next__(self):
        return _qsystem.SwigPyIterator___next__(self)

    def previous(self):
        return _qsystem.SwigPyIterator_previous(self)

    def advance(self, n):
        return _qsystem.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _qsystem.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _qsystem.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _qsystem.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _qsystem.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _qsystem.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _qsystem.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _qsystem:
_qsystem.SwigPyIterator_swigregister(SwigPyIterator)

class vec_size_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _qsystem.vec_size_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qsystem.vec_size_t___nonzero__(self)

    def __bool__(self):
        return _qsystem.vec_size_t___bool__(self)

    def __len__(self):
        return _qsystem.vec_size_t___len__(self)

    def __getslice__(self, i, j):
        return _qsystem.vec_size_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qsystem.vec_size_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qsystem.vec_size_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qsystem.vec_size_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qsystem.vec_size_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qsystem.vec_size_t___setitem__(self, *args)

    def pop(self):
        return _qsystem.vec_size_t_pop(self)

    def append(self, x):
        return _qsystem.vec_size_t_append(self, x)

    def empty(self):
        return _qsystem.vec_size_t_empty(self)

    def size(self):
        return _qsystem.vec_size_t_size(self)

    def swap(self, v):
        return _qsystem.vec_size_t_swap(self, v)

    def begin(self):
        return _qsystem.vec_size_t_begin(self)

    def end(self):
        return _qsystem.vec_size_t_end(self)

    def rbegin(self):
        return _qsystem.vec_size_t_rbegin(self)

    def rend(self):
        return _qsystem.vec_size_t_rend(self)

    def clear(self):
        return _qsystem.vec_size_t_clear(self)

    def get_allocator(self):
        return _qsystem.vec_size_t_get_allocator(self)

    def pop_back(self):
        return _qsystem.vec_size_t_pop_back(self)

    def erase(self, *args):
        return _qsystem.vec_size_t_erase(self, *args)

    def __init__(self, *args):
        _qsystem.vec_size_t_swiginit(self, _qsystem.new_vec_size_t(*args))

    def push_back(self, x):
        return _qsystem.vec_size_t_push_back(self, x)

    def front(self):
        return _qsystem.vec_size_t_front(self)

    def back(self):
        return _qsystem.vec_size_t_back(self)

    def assign(self, n, x):
        return _qsystem.vec_size_t_assign(self, n, x)

    def resize(self, *args):
        return _qsystem.vec_size_t_resize(self, *args)

    def insert(self, *args):
        return _qsystem.vec_size_t_insert(self, *args)

    def reserve(self, n):
        return _qsystem.vec_size_t_reserve(self, n)

    def capacity(self):
        return _qsystem.vec_size_t_capacity(self)
    __swig_destroy__ = _qsystem.delete_vec_size_t

# Register vec_size_t in _qsystem:
_qsystem.vec_size_t_swigregister(vec_size_t)

class vec_complex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _qsystem.vec_complex_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qsystem.vec_complex___nonzero__(self)

    def __bool__(self):
        return _qsystem.vec_complex___bool__(self)

    def __len__(self):
        return _qsystem.vec_complex___len__(self)

    def __getslice__(self, i, j):
        return _qsystem.vec_complex___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qsystem.vec_complex___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qsystem.vec_complex___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qsystem.vec_complex___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qsystem.vec_complex___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qsystem.vec_complex___setitem__(self, *args)

    def pop(self):
        return _qsystem.vec_complex_pop(self)

    def append(self, x):
        return _qsystem.vec_complex_append(self, x)

    def empty(self):
        return _qsystem.vec_complex_empty(self)

    def size(self):
        return _qsystem.vec_complex_size(self)

    def swap(self, v):
        return _qsystem.vec_complex_swap(self, v)

    def begin(self):
        return _qsystem.vec_complex_begin(self)

    def end(self):
        return _qsystem.vec_complex_end(self)

    def rbegin(self):
        return _qsystem.vec_complex_rbegin(self)

    def rend(self):
        return _qsystem.vec_complex_rend(self)

    def clear(self):
        return _qsystem.vec_complex_clear(self)

    def get_allocator(self):
        return _qsystem.vec_complex_get_allocator(self)

    def pop_back(self):
        return _qsystem.vec_complex_pop_back(self)

    def erase(self, *args):
        return _qsystem.vec_complex_erase(self, *args)

    def __init__(self, *args):
        _qsystem.vec_complex_swiginit(self, _qsystem.new_vec_complex(*args))

    def push_back(self, x):
        return _qsystem.vec_complex_push_back(self, x)

    def front(self):
        return _qsystem.vec_complex_front(self)

    def back(self):
        return _qsystem.vec_complex_back(self)

    def assign(self, n, x):
        return _qsystem.vec_complex_assign(self, n, x)

    def resize(self, *args):
        return _qsystem.vec_complex_resize(self, *args)

    def insert(self, *args):
        return _qsystem.vec_complex_insert(self, *args)

    def reserve(self, n):
        return _qsystem.vec_complex_reserve(self, n)

    def capacity(self):
        return _qsystem.vec_complex_capacity(self)
    __swig_destroy__ = _qsystem.delete_vec_complex

# Register vec_complex in _qsystem:
_qsystem.vec_complex_swigregister(vec_complex)

class vec_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _qsystem.vec_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qsystem.vec_int___nonzero__(self)

    def __bool__(self):
        return _qsystem.vec_int___bool__(self)

    def __len__(self):
        return _qsystem.vec_int___len__(self)

    def __getslice__(self, i, j):
        return _qsystem.vec_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qsystem.vec_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qsystem.vec_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qsystem.vec_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qsystem.vec_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qsystem.vec_int___setitem__(self, *args)

    def pop(self):
        return _qsystem.vec_int_pop(self)

    def append(self, x):
        return _qsystem.vec_int_append(self, x)

    def empty(self):
        return _qsystem.vec_int_empty(self)

    def size(self):
        return _qsystem.vec_int_size(self)

    def swap(self, v):
        return _qsystem.vec_int_swap(self, v)

    def begin(self):
        return _qsystem.vec_int_begin(self)

    def end(self):
        return _qsystem.vec_int_end(self)

    def rbegin(self):
        return _qsystem.vec_int_rbegin(self)

    def rend(self):
        return _qsystem.vec_int_rend(self)

    def clear(self):
        return _qsystem.vec_int_clear(self)

    def get_allocator(self):
        return _qsystem.vec_int_get_allocator(self)

    def pop_back(self):
        return _qsystem.vec_int_pop_back(self)

    def erase(self, *args):
        return _qsystem.vec_int_erase(self, *args)

    def __init__(self, *args):
        _qsystem.vec_int_swiginit(self, _qsystem.new_vec_int(*args))

    def push_back(self, x):
        return _qsystem.vec_int_push_back(self, x)

    def front(self):
        return _qsystem.vec_int_front(self)

    def back(self):
        return _qsystem.vec_int_back(self)

    def assign(self, n, x):
        return _qsystem.vec_int_assign(self, n, x)

    def resize(self, *args):
        return _qsystem.vec_int_resize(self, *args)

    def insert(self, *args):
        return _qsystem.vec_int_insert(self, *args)

    def reserve(self, n):
        return _qsystem.vec_int_reserve(self, n)

    def capacity(self):
        return _qsystem.vec_int_capacity(self)
    __swig_destroy__ = _qsystem.delete_vec_int

# Register vec_int in _qsystem:
_qsystem.vec_int_swigregister(vec_int)

class vec_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _qsystem.vec_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qsystem.vec_float___nonzero__(self)

    def __bool__(self):
        return _qsystem.vec_float___bool__(self)

    def __len__(self):
        return _qsystem.vec_float___len__(self)

    def __getslice__(self, i, j):
        return _qsystem.vec_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qsystem.vec_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qsystem.vec_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qsystem.vec_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qsystem.vec_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qsystem.vec_float___setitem__(self, *args)

    def pop(self):
        return _qsystem.vec_float_pop(self)

    def append(self, x):
        return _qsystem.vec_float_append(self, x)

    def empty(self):
        return _qsystem.vec_float_empty(self)

    def size(self):
        return _qsystem.vec_float_size(self)

    def swap(self, v):
        return _qsystem.vec_float_swap(self, v)

    def begin(self):
        return _qsystem.vec_float_begin(self)

    def end(self):
        return _qsystem.vec_float_end(self)

    def rbegin(self):
        return _qsystem.vec_float_rbegin(self)

    def rend(self):
        return _qsystem.vec_float_rend(self)

    def clear(self):
        return _qsystem.vec_float_clear(self)

    def get_allocator(self):
        return _qsystem.vec_float_get_allocator(self)

    def pop_back(self):
        return _qsystem.vec_float_pop_back(self)

    def erase(self, *args):
        return _qsystem.vec_float_erase(self, *args)

    def __init__(self, *args):
        _qsystem.vec_float_swiginit(self, _qsystem.new_vec_float(*args))

    def push_back(self, x):
        return _qsystem.vec_float_push_back(self, x)

    def front(self):
        return _qsystem.vec_float_front(self)

    def back(self):
        return _qsystem.vec_float_back(self)

    def assign(self, n, x):
        return _qsystem.vec_float_assign(self, n, x)

    def resize(self, *args):
        return _qsystem.vec_float_resize(self, *args)

    def insert(self, *args):
        return _qsystem.vec_float_insert(self, *args)

    def reserve(self, n):
        return _qsystem.vec_float_reserve(self, n)

    def capacity(self):
        return _qsystem.vec_float_capacity(self)
    __swig_destroy__ = _qsystem.delete_vec_float

# Register vec_float in _qsystem:
_qsystem.vec_float_swigregister(vec_float)

class vec_str(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _qsystem.vec_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qsystem.vec_str___nonzero__(self)

    def __bool__(self):
        return _qsystem.vec_str___bool__(self)

    def __len__(self):
        return _qsystem.vec_str___len__(self)

    def __getslice__(self, i, j):
        return _qsystem.vec_str___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qsystem.vec_str___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qsystem.vec_str___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qsystem.vec_str___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qsystem.vec_str___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qsystem.vec_str___setitem__(self, *args)

    def pop(self):
        return _qsystem.vec_str_pop(self)

    def append(self, x):
        return _qsystem.vec_str_append(self, x)

    def empty(self):
        return _qsystem.vec_str_empty(self)

    def size(self):
        return _qsystem.vec_str_size(self)

    def swap(self, v):
        return _qsystem.vec_str_swap(self, v)

    def begin(self):
        return _qsystem.vec_str_begin(self)

    def end(self):
        return _qsystem.vec_str_end(self)

    def rbegin(self):
        return _qsystem.vec_str_rbegin(self)

    def rend(self):
        return _qsystem.vec_str_rend(self)

    def clear(self):
        return _qsystem.vec_str_clear(self)

    def get_allocator(self):
        return _qsystem.vec_str_get_allocator(self)

    def pop_back(self):
        return _qsystem.vec_str_pop_back(self)

    def erase(self, *args):
        return _qsystem.vec_str_erase(self, *args)

    def __init__(self, *args):
        _qsystem.vec_str_swiginit(self, _qsystem.new_vec_str(*args))

    def push_back(self, x):
        return _qsystem.vec_str_push_back(self, x)

    def front(self):
        return _qsystem.vec_str_front(self)

    def back(self):
        return _qsystem.vec_str_back(self)

    def assign(self, n, x):
        return _qsystem.vec_str_assign(self, n, x)

    def resize(self, *args):
        return _qsystem.vec_str_resize(self, *args)

    def insert(self, *args):
        return _qsystem.vec_str_insert(self, *args)

    def reserve(self, n):
        return _qsystem.vec_str_reserve(self, n)

    def capacity(self):
        return _qsystem.vec_str_capacity(self)
    __swig_destroy__ = _qsystem.delete_vec_str

# Register vec_str in _qsystem:
_qsystem.vec_str_swigregister(vec_str)

class QSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, num_qbits, seed=42, representation="bitwise", init=0):
        _qsystem.QSystem_swiginit(self, _qsystem.new_QSystem(num_qbits, seed, representation, init))
    __swig_destroy__ = _qsystem.delete_QSystem

    def evol(self, gate, qbit, count=1, invert=False):
        return _qsystem.QSystem_evol(self, gate, qbit, count, invert)

    def rot(self, axis, angle, qbit, count=1):
        return _qsystem.QSystem_rot(self, axis, angle, qbit, count)

    def u3(self, theta, phi, lambd, qbit, count=1):
        return _qsystem.QSystem_u3(self, theta, phi, lambd, qbit, count)

    def u2(self, phi, lambd, qbit, count=1):
        return _qsystem.QSystem_u2(self, phi, lambd, qbit, count)

    def u1(self, lambd, qbit, count=1):
        return _qsystem.QSystem_u1(self, lambd, qbit, count)

    def apply(self, gate, qbit, count=1, invert=False):
        return _qsystem.QSystem_apply(self, gate, qbit, count, invert)

    def cnot(self, target, control):
        return _qsystem.QSystem_cnot(self, target, control)

    def cphase(self, phase, target, control):
        return _qsystem.QSystem_cphase(self, phase, target, control)

    def qft(self, qbit_begin, qbit_end, invert=False):
        return _qsystem.QSystem_qft(self, qbit_begin, qbit_end, invert)

    def swap(self, qbit_a, qbit_b):
        return _qsystem.QSystem_swap(self, qbit_a, qbit_b)

    def measure(self, qbit, count=1):
        return _qsystem.QSystem_measure(self, qbit, count)

    def measure_all(self):
        return _qsystem.QSystem_measure_all(self)

    def bits(self):
        return _qsystem.QSystem_bits(self)

    def flip(self, gate, qbit, p):
        return _qsystem.QSystem_flip(self, gate, qbit, p)

    def amp_damping(self, qbit, p):
        return _qsystem.QSystem_amp_damping(self, qbit, p)

    def dpl_channel(self, qbit, p):
        return _qsystem.QSystem_dpl_channel(self, qbit, p)

    def sum(self, qbit, kraus, p):
        return _qsystem.QSystem_sum(self, qbit, kraus, p)

    def __str__(self):
        return _qsystem.QSystem___str__(self)

    def size(self):
        return _qsystem.QSystem_size(self)

    def representation(self):
        return _qsystem.QSystem_representation(self)

    def save(self, path):
        return _qsystem.QSystem_save(self, path)

    def load(self, path):
        return _qsystem.QSystem_load(self, path)

    def change_to(self, new_representation):
        return _qsystem.QSystem_change_to(self, new_representation)

    def get_qbits(self):
        return _qsystem.QSystem_get_qbits(self)

    def set_qbits(self, row_ind, col_ptr, values, num_qbits, representation):
        return _qsystem.QSystem_set_qbits(self, row_ind, col_ptr, values, num_qbits, representation)

    def add_ancillas(self, num_qbits, init=0):
        return _qsystem.QSystem_add_ancillas(self, num_qbits, init)

    def rm_ancillas(self):
        return _qsystem.QSystem_rm_ancillas(self)

    def sync(self):
        return _qsystem.QSystem_sync(self)

# Register QSystem in _qsystem:
_qsystem.QSystem_swigregister(QSystem)

class Gate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _qsystem.Gate_swiginit(self, _qsystem.new_Gate(*args))

    def __str__(self):
        return _qsystem.Gate___str__(self)

    def save(self, path):
        return _qsystem.Gate_save(self, path)

    @staticmethod
    def from_matrix(matrix):
        return _qsystem.Gate_from_matrix(matrix)

    @staticmethod
    def from_sp_matrix(size, row, col, value):
        return _qsystem.Gate_from_sp_matrix(size, row, col, value)

    @staticmethod
    def cxz_gate(gates, control):
        return _qsystem.Gate_cxz_gate(gates, control)

    @staticmethod
    def from_func(*args):
        return _qsystem.Gate_from_func(*args)

    def get_mat(self):
        return _qsystem.Gate_get_mat(self)

    def get_bwgate(self, i):
        return _qsystem.Gate_get_bwgate(self, i)
    __swig_destroy__ = _qsystem.delete_Gate

# Register Gate in _qsystem:
_qsystem.Gate_swigregister(Gate)

def Gate_from_matrix(matrix):
    return _qsystem.Gate_from_matrix(matrix)

def Gate_from_sp_matrix(size, row, col, value):
    return _qsystem.Gate_from_sp_matrix(size, row, col, value)

def Gate_cxz_gate(gates, control):
    return _qsystem.Gate_cxz_gate(gates, control)

def Gate_from_func(*args):
    return _qsystem.Gate_from_func(*args)


def cx_to_str(i, use_sqrt=True):
    return _qsystem.cx_to_str(i, use_sqrt)

def to_bits(i, qsize, asize):
    return _qsystem.to_bits(i, qsize, asize)

version = '1.2.0b1'
def get_matrix(q):
    from scipy import sparse
    return sparse.csc_matrix(q.get_qbits()[0], q.get_qbits()[1])

def set_matrix(q, m):
    from scipy import sparse
    from math import log2
    m = sparse.csc_matrix(m)
    if m.shape[0] == m.shape[1]:
        state = 'matrix'
    else:
        state = 'vector'
    size = int(log2(m.shape[0]))
    q.set_qbits(m.indices.tolist(), m.indptr.tolist(), m.data.tolist(), size, state)



