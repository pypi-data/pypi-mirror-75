# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from service_mesh_probe import service_mesh_pb2 as service__mesh__probe_dot_service__mesh__pb2


class ServiceMeshMetricServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.collect = channel.stream_unary(
        '/ServiceMeshMetricService/collect',
        request_serializer=service__mesh__probe_dot_service__mesh__pb2.ServiceMeshMetric.SerializeToString,
        response_deserializer=service__mesh__probe_dot_service__mesh__pb2.MeshProbeDownstream.FromString,
        )


class ServiceMeshMetricServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def collect(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceMeshMetricServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'collect': grpc.stream_unary_rpc_method_handler(
          servicer.collect,
          request_deserializer=service__mesh__probe_dot_service__mesh__pb2.ServiceMeshMetric.FromString,
          response_serializer=service__mesh__probe_dot_service__mesh__pb2.MeshProbeDownstream.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ServiceMeshMetricService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
