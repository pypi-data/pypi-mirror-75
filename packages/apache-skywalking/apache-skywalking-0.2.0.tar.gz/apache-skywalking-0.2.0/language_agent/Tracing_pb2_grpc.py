# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from common import Common_pb2 as common_dot_Common__pb2
from language_agent import Tracing_pb2 as language__agent_dot_Tracing__pb2


class TraceSegmentReportServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.collect = channel.stream_unary(
        '/TraceSegmentReportService/collect',
        request_serializer=language__agent_dot_Tracing__pb2.SegmentObject.SerializeToString,
        response_deserializer=common_dot_Common__pb2.Commands.FromString,
        )


class TraceSegmentReportServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def collect(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TraceSegmentReportServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'collect': grpc.stream_unary_rpc_method_handler(
          servicer.collect,
          request_deserializer=language__agent_dot_Tracing__pb2.SegmentObject.FromString,
          response_serializer=common_dot_Common__pb2.Commands.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TraceSegmentReportService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
