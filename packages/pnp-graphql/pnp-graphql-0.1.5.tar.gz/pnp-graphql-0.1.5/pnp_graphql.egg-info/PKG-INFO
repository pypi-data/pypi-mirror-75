Metadata-Version: 2.1
Name: pnp-graphql
Version: 0.1.5
Summary: A simple model based GraphQL API configurator written in Python and based of Django
Home-page: https://ashraful.dev
Author: Ashraful Islam
Author-email: ashrafulrobin3@gmail.com
License: MIT License
Description: ## Plug & Play GraphQL (pnp-graphql)-- [Change Log](https://github.com/iashraful/pnp-graphql/blob/master/CHANGELOG.md)
        > A library for making GraphQL API with Python/Django. This is like a flash drive, 
        just how you plug into computer and transfer files.
        
        > **Read Full Documentation here: https://docs.ashraful.dev/pnp-graphql** 
        
        ### Quick Start
        > Documentation is coming soon...
        
        * Install from pip `pip install pnp-graphql`
        * Add `graphene_django` on top of installed apps on settings.py
        * Add `pnp_graphql` into installed apps on settings.py
        * Add PnP GraphQL config on settings.
        ```python
        GRAPHENE = {
            'SCHEMA': 'pnp_graphql.schema.schema'
        }
        
        PNP_GRAPHQL = {
            'ENABLED_APPS': ['example_app'],
            # If you want to use Token Authentication. Otherwise it's optional
            'AUTHENTICATION_CLASS': 'pnp_graphql.authentication.TokenAuthentication'
        }
        ```
        * Add the following code on `urls.py`
        ```python
        from pnp_graphql.urls import urlpatterns as up
        
        urlpatterns = [
            # ... ... ... 
        ]
        urlpatterns += up
        ```
        * Set `DEBUG = False` for production use.
        
        **That's it :)**  
        **Now visit:** `http://your-ip:port/api/graphql-explorer/` for explore GraphQL built-in UI explorer for query.  
        **Production ready API :** `http://your-ip:port/api/graphql/`
        
        
        #### What's working?
        * GraphQL query
        * Mutation (Create, Update, Delete)
        * Pagination
        * API filtering for Number, String, Date, DateTime
        * Authentication
        
        #### What are the plans?
        * Proper error handling
        * Field validation
        * Caching
        * many more ... ... ...
        
        ### Waiting for your contribution :smile:
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 2.2
Classifier: Framework :: Django :: 3.0
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Description-Content-Type: text/markdown
