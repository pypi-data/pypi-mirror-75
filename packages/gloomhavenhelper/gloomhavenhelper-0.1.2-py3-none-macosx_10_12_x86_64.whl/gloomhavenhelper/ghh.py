# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ghh
else:
    import _ghh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ghh.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _ghh.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _ghh.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _ghh.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ghh.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ghh.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _ghh.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _ghh.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _ghh.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _ghh.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ghh.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ghh.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ghh.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ghh.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ghh.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ghh.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ghh.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ghh:
_ghh.SwigPyIterator_swigregister(SwigPyIterator)

class OptionalMonsterActor(object):
    r"""Proxy of C++ tl::optional< ghh::MonsterActor > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalMonsterActor self) -> OptionalMonsterActor
        __init__(OptionalMonsterActor self, MonsterActor value) -> OptionalMonsterActor

        Parameters
        ----------
        value: ghh::MonsterActor

        __init__(OptionalMonsterActor self, OptionalMonsterActor other) -> OptionalMonsterActor

        Parameters
        ----------
        other: tl::optional< ghh::MonsterActor > const &

        """
        _ghh.OptionalMonsterActor_swiginit(self, _ghh.new_OptionalMonsterActor(*args))

    def value(self, *args):
        r"""
        value(OptionalMonsterActor self)
        value(OptionalMonsterActor self)
        """
        return _ghh.OptionalMonsterActor_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalMonsterActor self) -> bool"""
        return _ghh.OptionalMonsterActor_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalMonsterActor

# Register OptionalMonsterActor in _ghh:
_ghh.OptionalMonsterActor_swigregister(OptionalMonsterActor)

class OptionalPlayerActor(object):
    r"""Proxy of C++ tl::optional< ghh::PlayerActor > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalPlayerActor self) -> OptionalPlayerActor
        __init__(OptionalPlayerActor self, PlayerActor value) -> OptionalPlayerActor

        Parameters
        ----------
        value: ghh::PlayerActor

        __init__(OptionalPlayerActor self, OptionalPlayerActor other) -> OptionalPlayerActor

        Parameters
        ----------
        other: tl::optional< ghh::PlayerActor > const &

        """
        _ghh.OptionalPlayerActor_swiginit(self, _ghh.new_OptionalPlayerActor(*args))

    def value(self, *args):
        r"""
        value(OptionalPlayerActor self)
        value(OptionalPlayerActor self)
        """
        return _ghh.OptionalPlayerActor_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalPlayerActor self) -> bool"""
        return _ghh.OptionalPlayerActor_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalPlayerActor

# Register OptionalPlayerActor in _ghh:
_ghh.OptionalPlayerActor_swigregister(OptionalPlayerActor)

class Optionalint(object):
    r"""Proxy of C++ tl::optional< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Optionalint self) -> Optionalint
        __init__(Optionalint self, int value) -> Optionalint

        Parameters
        ----------
        value: int

        __init__(Optionalint self, Optionalint other) -> Optionalint

        Parameters
        ----------
        other: tl::optional< int > const &

        """
        _ghh.Optionalint_swiginit(self, _ghh.new_Optionalint(*args))

    def value(self, *args):
        r"""
        value(Optionalint self)
        value(Optionalint self)
        """
        return _ghh.Optionalint_value(self, *args)

    def has_value(self):
        r"""has_value(Optionalint self) -> bool"""
        return _ghh.Optionalint_has_value(self)
    __swig_destroy__ = _ghh.delete_Optionalint

# Register Optionalint in _ghh:
_ghh.Optionalint_swigregister(Optionalint)

class OptionalAttackModifier(object):
    r"""Proxy of C++ tl::optional< ghh::AttackModifierNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalAttackModifier self) -> OptionalAttackModifier
        __init__(OptionalAttackModifier self, ghh::AttackModifierNS::Value value) -> OptionalAttackModifier

        Parameters
        ----------
        value: enum ghh::AttackModifierNS::Value

        __init__(OptionalAttackModifier self, OptionalAttackModifier other) -> OptionalAttackModifier

        Parameters
        ----------
        other: tl::optional< ghh::AttackModifierNS::Value > const &

        """
        _ghh.OptionalAttackModifier_swiginit(self, _ghh.new_OptionalAttackModifier(*args))

    def value(self, *args):
        r"""
        value(OptionalAttackModifier self)
        value(OptionalAttackModifier self)
        """
        return _ghh.OptionalAttackModifier_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalAttackModifier self) -> bool"""
        return _ghh.OptionalAttackModifier_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalAttackModifier

# Register OptionalAttackModifier in _ghh:
_ghh.OptionalAttackModifier_swigregister(OptionalAttackModifier)

class OptionalCharacterClass(object):
    r"""Proxy of C++ tl::optional< ghh::CharacterClassNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalCharacterClass self) -> OptionalCharacterClass
        __init__(OptionalCharacterClass self, ghh::CharacterClassNS::Value value) -> OptionalCharacterClass

        Parameters
        ----------
        value: enum ghh::CharacterClassNS::Value

        __init__(OptionalCharacterClass self, OptionalCharacterClass other) -> OptionalCharacterClass

        Parameters
        ----------
        other: tl::optional< ghh::CharacterClassNS::Value > const &

        """
        _ghh.OptionalCharacterClass_swiginit(self, _ghh.new_OptionalCharacterClass(*args))

    def value(self, *args):
        r"""
        value(OptionalCharacterClass self)
        value(OptionalCharacterClass self)
        """
        return _ghh.OptionalCharacterClass_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalCharacterClass self) -> bool"""
        return _ghh.OptionalCharacterClass_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalCharacterClass

# Register OptionalCharacterClass in _ghh:
_ghh.OptionalCharacterClass_swigregister(OptionalCharacterClass)

class OptionalCondition(object):
    r"""Proxy of C++ tl::optional< ghh::ConditionNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalCondition self) -> OptionalCondition
        __init__(OptionalCondition self, ghh::ConditionNS::Value value) -> OptionalCondition

        Parameters
        ----------
        value: enum ghh::ConditionNS::Value

        __init__(OptionalCondition self, OptionalCondition other) -> OptionalCondition

        Parameters
        ----------
        other: tl::optional< ghh::ConditionNS::Value > const &

        """
        _ghh.OptionalCondition_swiginit(self, _ghh.new_OptionalCondition(*args))

    def value(self, *args):
        r"""
        value(OptionalCondition self)
        value(OptionalCondition self)
        """
        return _ghh.OptionalCondition_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalCondition self) -> bool"""
        return _ghh.OptionalCondition_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalCondition

# Register OptionalCondition in _ghh:
_ghh.OptionalCondition_swigregister(OptionalCondition)

class OptionalElementState(object):
    r"""Proxy of C++ tl::optional< ghh::ElementStateNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalElementState self) -> OptionalElementState
        __init__(OptionalElementState self, ghh::ElementStateNS::Value value) -> OptionalElementState

        Parameters
        ----------
        value: enum ghh::ElementStateNS::Value

        __init__(OptionalElementState self, OptionalElementState other) -> OptionalElementState

        Parameters
        ----------
        other: tl::optional< ghh::ElementStateNS::Value > const &

        """
        _ghh.OptionalElementState_swiginit(self, _ghh.new_OptionalElementState(*args))

    def value(self, *args):
        r"""
        value(OptionalElementState self)
        value(OptionalElementState self)
        """
        return _ghh.OptionalElementState_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalElementState self) -> bool"""
        return _ghh.OptionalElementState_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalElementState

# Register OptionalElementState in _ghh:
_ghh.OptionalElementState_swigregister(OptionalElementState)

class OptionalMonsterType(object):
    r"""Proxy of C++ tl::optional< ghh::MonsterTypeNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalMonsterType self) -> OptionalMonsterType
        __init__(OptionalMonsterType self, ghh::MonsterTypeNS::Value value) -> OptionalMonsterType

        Parameters
        ----------
        value: enum ghh::MonsterTypeNS::Value

        __init__(OptionalMonsterType self, OptionalMonsterType other) -> OptionalMonsterType

        Parameters
        ----------
        other: tl::optional< ghh::MonsterTypeNS::Value > const &

        """
        _ghh.OptionalMonsterType_swiginit(self, _ghh.new_OptionalMonsterType(*args))

    def value(self, *args):
        r"""
        value(OptionalMonsterType self)
        value(OptionalMonsterType self)
        """
        return _ghh.OptionalMonsterType_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalMonsterType self) -> bool"""
        return _ghh.OptionalMonsterType_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalMonsterType

# Register OptionalMonsterType in _ghh:
_ghh.OptionalMonsterType_swigregister(OptionalMonsterType)

class OptionalPlayerInit(object):
    r"""Proxy of C++ tl::optional< ghh::PlayerInitNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalPlayerInit self) -> OptionalPlayerInit
        __init__(OptionalPlayerInit self, ghh::PlayerInitNS::Value value) -> OptionalPlayerInit

        Parameters
        ----------
        value: enum ghh::PlayerInitNS::Value

        __init__(OptionalPlayerInit self, OptionalPlayerInit other) -> OptionalPlayerInit

        Parameters
        ----------
        other: tl::optional< ghh::PlayerInitNS::Value > const &

        """
        _ghh.OptionalPlayerInit_swiginit(self, _ghh.new_OptionalPlayerInit(*args))

    def value(self, *args):
        r"""
        value(OptionalPlayerInit self)
        value(OptionalPlayerInit self)
        """
        return _ghh.OptionalPlayerInit_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalPlayerInit self) -> bool"""
        return _ghh.OptionalPlayerInit_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalPlayerInit

# Register OptionalPlayerInit in _ghh:
_ghh.OptionalPlayerInit_swigregister(OptionalPlayerInit)

class OptionalSummonColor(object):
    r"""Proxy of C++ tl::optional< ghh::SummonColorNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptionalSummonColor self) -> OptionalSummonColor
        __init__(OptionalSummonColor self, ghh::SummonColorNS::Value value) -> OptionalSummonColor

        Parameters
        ----------
        value: enum ghh::SummonColorNS::Value

        __init__(OptionalSummonColor self, OptionalSummonColor other) -> OptionalSummonColor

        Parameters
        ----------
        other: tl::optional< ghh::SummonColorNS::Value > const &

        """
        _ghh.OptionalSummonColor_swiginit(self, _ghh.new_OptionalSummonColor(*args))

    def value(self, *args):
        r"""
        value(OptionalSummonColor self)
        value(OptionalSummonColor self)
        """
        return _ghh.OptionalSummonColor_value(self, *args)

    def has_value(self):
        r"""has_value(OptionalSummonColor self) -> bool"""
        return _ghh.OptionalSummonColor_has_value(self)
    __swig_destroy__ = _ghh.delete_OptionalSummonColor

# Register OptionalSummonColor in _ghh:
_ghh.OptionalSummonColor_swigregister(OptionalSummonColor)


def make_optional(*args):
    r"""
    make_optional(MonsterActor arg) -> OptionalMonsterActor

    Parameters
    ----------
    arg: ghh::MonsterActor

    make_optional(PlayerActor arg) -> OptionalPlayerActor

    Parameters
    ----------
    arg: ghh::PlayerActor

    make_optional(int arg) -> Optionalint

    Parameters
    ----------
    arg: int

    make_optional(ghh::AttackModifierNS::Value arg) -> OptionalAttackModifier

    Parameters
    ----------
    arg: enum ghh::AttackModifierNS::Value

    make_optional(ghh::CharacterClassNS::Value arg) -> OptionalCharacterClass

    Parameters
    ----------
    arg: enum ghh::CharacterClassNS::Value

    make_optional(ghh::ConditionNS::Value arg) -> OptionalCondition

    Parameters
    ----------
    arg: enum ghh::ConditionNS::Value

    make_optional(ghh::ElementStateNS::Value arg) -> OptionalElementState

    Parameters
    ----------
    arg: enum ghh::ElementStateNS::Value

    make_optional(ghh::MonsterTypeNS::Value arg) -> OptionalMonsterType

    Parameters
    ----------
    arg: enum ghh::MonsterTypeNS::Value

    make_optional(ghh::PlayerInitNS::Value arg) -> OptionalPlayerInit

    Parameters
    ----------
    arg: enum ghh::PlayerInitNS::Value

    make_optional(ghh::SummonColorNS::Value arg) -> OptionalSummonColor

    Parameters
    ----------
    arg: enum ghh::SummonColorNS::Value

    """
    return _ghh.make_optional(*args)
class AttackModifier(object):
    r"""Proxy of C++ ghh::AttackModifierNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Zero = _ghh.AttackModifier_Zero
    
    Plus1 = _ghh.AttackModifier_Plus1
    
    Plus2 = _ghh.AttackModifier_Plus2
    
    Minus1 = _ghh.AttackModifier_Minus1
    
    Minus2 = _ghh.AttackModifier_Minus2
    
    Miss = _ghh.AttackModifier_Miss
    
    Crit = _ghh.AttackModifier_Crit
    
    Bless = _ghh.AttackModifier_Bless
    
    Curse = _ghh.AttackModifier_Curse
    

    def __init__(self):
        r"""__init__(AttackModifier self) -> AttackModifier"""
        _ghh.AttackModifier_swiginit(self, _ghh.new_AttackModifier())
    __swig_destroy__ = _ghh.delete_AttackModifier

# Register AttackModifier in _ghh:
_ghh.AttackModifier_swigregister(AttackModifier)


def getAttackModifierValues():
    r"""getAttackModifierValues() -> std::vector< ghh::AttackModifier,std::allocator< ghh::AttackModifier > >"""
    return _ghh.getAttackModifierValues()
class CharacterClass(object):
    r"""Proxy of C++ ghh::CharacterClassNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Escort = _ghh.CharacterClass_Escort
    
    Objective = _ghh.CharacterClass_Objective
    
    Brute = _ghh.CharacterClass_Brute
    
    Cragheart = _ghh.CharacterClass_Cragheart
    
    Mindtheif = _ghh.CharacterClass_Mindtheif
    
    Scoundrel = _ghh.CharacterClass_Scoundrel
    
    Spellweaver = _ghh.CharacterClass_Spellweaver
    
    Tinkerer = _ghh.CharacterClass_Tinkerer
    
    Diviner = _ghh.CharacterClass_Diviner
    
    TwoMinis = _ghh.CharacterClass_TwoMinis
    
    Lightning = _ghh.CharacterClass_Lightning
    
    AngryFace = _ghh.CharacterClass_AngryFace
    
    Triangles = _ghh.CharacterClass_Triangles
    
    Moon = _ghh.CharacterClass_Moon
    
    ChuluFace = _ghh.CharacterClass_ChuluFace
    
    TrippleArrow = _ghh.CharacterClass_TrippleArrow
    
    Saw = _ghh.CharacterClass_Saw
    
    MusicNote = _ghh.CharacterClass_MusicNote
    
    Circles = _ghh.CharacterClass_Circles
    
    Sun = _ghh.CharacterClass_Sun
    
    value20 = _ghh.CharacterClass_value20
    
    Demolitionist = _ghh.CharacterClass_Demolitionist
    
    RedGuard = _ghh.CharacterClass_RedGuard
    
    Voidwarden = _ghh.CharacterClass_Voidwarden
    
    Hatchet = _ghh.CharacterClass_Hatchet
    
    value25 = _ghh.CharacterClass_value25
    

    def __init__(self):
        r"""__init__(CharacterClass self) -> CharacterClass"""
        _ghh.CharacterClass_swiginit(self, _ghh.new_CharacterClass())
    __swig_destroy__ = _ghh.delete_CharacterClass

# Register CharacterClass in _ghh:
_ghh.CharacterClass_swigregister(CharacterClass)


def getCharacterClassValues():
    r"""getCharacterClassValues() -> CharacterClassVector"""
    return _ghh.getCharacterClassValues()
class Condition(object):
    r"""Proxy of C++ ghh::ConditionNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Star = _ghh.Condition_Star
    
    Summon = _ghh.Condition_Summon
    
    NotSummon = _ghh.Condition_NotSummon
    
    Stuned = _ghh.Condition_Stuned
    
    Immobilized = _ghh.Condition_Immobilized
    
    Disarmed = _ghh.Condition_Disarmed
    
    Wounded = _ghh.Condition_Wounded
    
    Muddle = _ghh.Condition_Muddle
    
    Poisoned = _ghh.Condition_Poisoned
    
    Strengthen = _ghh.Condition_Strengthen
    
    Invisible = _ghh.Condition_Invisible
    
    Regenerate = _ghh.Condition_Regenerate
    
    value13 = _ghh.Condition_value13
    
    value14 = _ghh.Condition_value14
    
    value15 = _ghh.Condition_value15
    
    value16 = _ghh.Condition_value16
    
    value17 = _ghh.Condition_value17
    
    value18 = _ghh.Condition_value18
    
    value19 = _ghh.Condition_value19
    

    def __init__(self):
        r"""__init__(Condition self) -> Condition"""
        _ghh.Condition_swiginit(self, _ghh.new_Condition())
    __swig_destroy__ = _ghh.delete_Condition

# Register Condition in _ghh:
_ghh.Condition_swigregister(Condition)


def getConditionValues():
    r"""getConditionValues() -> ConditionVector"""
    return _ghh.getConditionValues()
class ElementState(object):
    r"""Proxy of C++ ghh::ElementStateNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Inert = _ghh.ElementState_Inert
    
    Strong = _ghh.ElementState_Strong
    
    Waning = _ghh.ElementState_Waning
    

    def __init__(self):
        r"""__init__(ElementState self) -> ElementState"""
        _ghh.ElementState_swiginit(self, _ghh.new_ElementState())
    __swig_destroy__ = _ghh.delete_ElementState

# Register ElementState in _ghh:
_ghh.ElementState_swigregister(ElementState)


def getElementStateValues():
    r"""getElementStateValues() -> ElementStateVector"""
    return _ghh.getElementStateValues()
class MonsterType(object):
    r"""Proxy of C++ ghh::MonsterTypeNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = _ghh.MonsterType_Normal
    
    Elite = _ghh.MonsterType_Elite
    
    Boss = _ghh.MonsterType_Boss
    
    Summon = _ghh.MonsterType_Summon
    
    value5 = _ghh.MonsterType_value5
    
    value6 = _ghh.MonsterType_value6
    
    value7 = _ghh.MonsterType_value7
    
    value8 = _ghh.MonsterType_value8
    
    value9 = _ghh.MonsterType_value9
    
    value10 = _ghh.MonsterType_value10
    
    value11 = _ghh.MonsterType_value11
    
    value12 = _ghh.MonsterType_value12
    
    value13 = _ghh.MonsterType_value13
    
    value14 = _ghh.MonsterType_value14
    
    value15 = _ghh.MonsterType_value15
    
    value16 = _ghh.MonsterType_value16
    

    def __init__(self):
        r"""__init__(MonsterType self) -> MonsterType"""
        _ghh.MonsterType_swiginit(self, _ghh.new_MonsterType())
    __swig_destroy__ = _ghh.delete_MonsterType

# Register MonsterType in _ghh:
_ghh.MonsterType_swigregister(MonsterType)


def getMonsterTypeValues():
    r"""getMonsterTypeValues() -> MonsterTypeVector"""
    return _ghh.getMonsterTypeValues()
class PlayerInit(object):
    r"""Proxy of C++ ghh::PlayerInitNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value1 = _ghh.PlayerInit_value1
    
    value2 = _ghh.PlayerInit_value2
    
    value3 = _ghh.PlayerInit_value3
    
    value4 = _ghh.PlayerInit_value4
    
    value5 = _ghh.PlayerInit_value5
    

    def __init__(self):
        r"""__init__(PlayerInit self) -> PlayerInit"""
        _ghh.PlayerInit_swiginit(self, _ghh.new_PlayerInit())
    __swig_destroy__ = _ghh.delete_PlayerInit

# Register PlayerInit in _ghh:
_ghh.PlayerInit_swigregister(PlayerInit)


def getPlayerInitValues():
    r"""getPlayerInitValues() -> PlayerInitVector"""
    return _ghh.getPlayerInitValues()
class SummonColor(object):
    r"""Proxy of C++ ghh::SummonColorNS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _None = _ghh.SummonColor__None
    
    Turquise = _ghh.SummonColor_Turquise
    
    Green = _ghh.SummonColor_Green
    
    Yellow = _ghh.SummonColor_Yellow
    
    Orange = _ghh.SummonColor_Orange
    
    White = _ghh.SummonColor_White
    
    Purple = _ghh.SummonColor_Purple
    
    Pink = _ghh.SummonColor_Pink
    
    Red = _ghh.SummonColor_Red
    

    def __init__(self):
        r"""__init__(SummonColor self) -> SummonColor"""
        _ghh.SummonColor_swiginit(self, _ghh.new_SummonColor())
    __swig_destroy__ = _ghh.delete_SummonColor

# Register SummonColor in _ghh:
_ghh.SummonColor_swigregister(SummonColor)


def getSummonColorValues():
    r"""getSummonColorValues() -> SummonColorVector"""
    return _ghh.getSummonColorValues()
class Actor(object):
    r"""Proxy of C++ ghh::Actor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __is_player = property(_ghh.Actor___is_player_get, _ghh.Actor___is_player_set, doc=r"""__is_player : bool""")
    __monster = property(_ghh.Actor___monster_get, _ghh.Actor___monster_set, doc=r"""__monster : MonsterActor""")
    __player = property(_ghh.Actor___player_get, _ghh.Actor___player_set, doc=r"""__player : PlayerActor""")
    turn_completed = property(_ghh.Actor_turn_completed_get, _ghh.Actor_turn_completed_set, doc=r"""turn_completed : bool""")
    instances = property(_ghh.Actor_instances_get, _ghh.Actor_instances_set, doc=r"""instances : std::vector<(ghh::MonsterInstance,std::allocator<(ghh::MonsterInstance)>)>""")

    def __init__(self, *args):
        r"""
        __init__(Actor self, MonsterActor monster) -> Actor

        Parameters
        ----------
        monster: ghh::MonsterActor const &

        __init__(Actor self, PlayerActor player) -> Actor

        Parameters
        ----------
        player: ghh::PlayerActor const &

        __init__(Actor self, MonsterActor monster) -> Actor

        Parameters
        ----------
        monster: ghh::MonsterActor *

        __init__(Actor self, PlayerActor player) -> Actor

        Parameters
        ----------
        player: ghh::PlayerActor *

        __init__(Actor self) -> Actor
        """
        _ghh.Actor_swiginit(self, _ghh.new_Actor(*args))

    def getMonster(self, *args):
        r"""
        getMonster(Actor self) -> tl::optional< ghh::MonsterActor & >
        getMonster(Actor self) -> tl::optional< ghh::MonsterActor const & >
        """
        return _ghh.Actor_getMonster(self, *args)

    def getPlayer(self, *args):
        r"""
        getPlayer(Actor self) -> tl::optional< ghh::PlayerActor & >
        getPlayer(Actor self) -> tl::optional< ghh::PlayerActor const & >
        """
        return _ghh.Actor_getPlayer(self, *args)
    __swig_destroy__ = _ghh.delete_Actor

# Register Actor in _ghh:
_ghh.Actor_swigregister(Actor)

class MonsterAbilityDeck(object):
    r"""Proxy of C++ ghh::MonsterAbilityDeck class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ghh.MonsterAbilityDeck_id_get, _ghh.MonsterAbilityDeck_id_set, doc=r"""id : int""")
    shuffle = property(_ghh.MonsterAbilityDeck_shuffle_get, _ghh.MonsterAbilityDeck_shuffle_set, doc=r"""shuffle : bool""")
    shown_ability = property(_ghh.MonsterAbilityDeck_shown_ability_get, _ghh.MonsterAbilityDeck_shown_ability_set, doc=r"""shown_ability : tl::optional<(int)>""")
    abilities = property(_ghh.MonsterAbilityDeck_abilities_get, _ghh.MonsterAbilityDeck_abilities_set, doc=r"""abilities : std::vector<(int,std::allocator<(int)>)>""")
    abilities_discard = property(_ghh.MonsterAbilityDeck_abilities_discard_get, _ghh.MonsterAbilityDeck_abilities_discard_set, doc=r"""abilities_discard : std::vector<(int,std::allocator<(int)>)>""")
    shown = property(_ghh.MonsterAbilityDeck_shown_get, _ghh.MonsterAbilityDeck_shown_set, doc=r"""shown : bool""")
    was_shown = property(_ghh.MonsterAbilityDeck_was_shown_get, _ghh.MonsterAbilityDeck_was_shown_set, doc=r"""was_shown : bool""")

    def __init__(self, *args):
        r"""
        __init__(MonsterAbilityDeck self, int id) -> MonsterAbilityDeck

        Parameters
        ----------
        id: int

        __init__(MonsterAbilityDeck self) -> MonsterAbilityDeck
        """
        _ghh.MonsterAbilityDeck_swiginit(self, _ghh.new_MonsterAbilityDeck(*args))
    __swig_destroy__ = _ghh.delete_MonsterAbilityDeck

# Register MonsterAbilityDeck in _ghh:
_ghh.MonsterAbilityDeck_swigregister(MonsterAbilityDeck)

class MonsterActor(object):
    r"""Proxy of C++ ghh::MonsterActor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ghh.MonsterActor_id_get, _ghh.MonsterActor_id_set, doc=r"""id : int""")
    level = property(_ghh.MonsterActor_level_get, _ghh.MonsterActor_level_set, doc=r"""level : int""")
    is_normal = property(_ghh.MonsterActor_is_normal_get, _ghh.MonsterActor_is_normal_set, doc=r"""is_normal : bool""")
    is_elite = property(_ghh.MonsterActor_is_elite_get, _ghh.MonsterActor_is_elite_set, doc=r"""is_elite : bool""")
    ability = property(_ghh.MonsterActor_ability_get, _ghh.MonsterActor_ability_set, doc=r"""ability : tl::optional<(int)>""")

    def __init__(self):
        r"""__init__(MonsterActor self) -> MonsterActor"""
        _ghh.MonsterActor_swiginit(self, _ghh.new_MonsterActor())
    __swig_destroy__ = _ghh.delete_MonsterActor

# Register MonsterActor in _ghh:
_ghh.MonsterActor_swigregister(MonsterActor)

class MonsterInstance(object):
    r"""Proxy of C++ ghh::MonsterInstance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    number = property(_ghh.MonsterInstance_number_get, _ghh.MonsterInstance_number_set, doc=r"""number : int""")
    type = property(_ghh.MonsterInstance_type_get, _ghh.MonsterInstance_type_set, doc=r"""type : ghh::MonsterType""")
    summon_color = property(_ghh.MonsterInstance_summon_color_get, _ghh.MonsterInstance_summon_color_set, doc=r"""summon_color : ghh::SummonColor""")
    summon_move = property(_ghh.MonsterInstance_summon_move_get, _ghh.MonsterInstance_summon_move_set, doc=r"""summon_move : int""")
    summon_attack = property(_ghh.MonsterInstance_summon_attack_get, _ghh.MonsterInstance_summon_attack_set, doc=r"""summon_attack : int""")
    summon_range = property(_ghh.MonsterInstance_summon_range_get, _ghh.MonsterInstance_summon_range_set, doc=r"""summon_range : int""")
    is_new = property(_ghh.MonsterInstance_is_new_get, _ghh.MonsterInstance_is_new_set, doc=r"""is_new : bool""")
    hp = property(_ghh.MonsterInstance_hp_get, _ghh.MonsterInstance_hp_set, doc=r"""hp : int""")
    hp_max = property(_ghh.MonsterInstance_hp_max_get, _ghh.MonsterInstance_hp_max_set, doc=r"""hp_max : int""")
    conditions = property(_ghh.MonsterInstance_conditions_get, _ghh.MonsterInstance_conditions_set, doc=r"""conditions : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")
    conditions_expired = property(_ghh.MonsterInstance_conditions_expired_get, _ghh.MonsterInstance_conditions_expired_set, doc=r"""conditions_expired : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")
    conditions_current_turn = property(_ghh.MonsterInstance_conditions_current_turn_get, _ghh.MonsterInstance_conditions_current_turn_set, doc=r"""conditions_current_turn : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")

    def __init__(self):
        r"""__init__(MonsterInstance self) -> MonsterInstance"""
        _ghh.MonsterInstance_swiginit(self, _ghh.new_MonsterInstance())
    __swig_destroy__ = _ghh.delete_MonsterInstance

# Register MonsterInstance in _ghh:
_ghh.MonsterInstance_swigregister(MonsterInstance)

class PlayerActor(object):
    r"""Proxy of C++ ghh::PlayerActor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_ghh.PlayerActor_name_get, _ghh.PlayerActor_name_set, doc=r"""name : std::string""")
    character_class = property(_ghh.PlayerActor_character_class_get, _ghh.PlayerActor_character_class_set, doc=r"""character_class : ghh::CharacterClass""")
    xp = property(_ghh.PlayerActor_xp_get, _ghh.PlayerActor_xp_set, doc=r"""xp : int""")
    hp = property(_ghh.PlayerActor_hp_get, _ghh.PlayerActor_hp_set, doc=r"""hp : int""")
    hp_max = property(_ghh.PlayerActor_hp_max_get, _ghh.PlayerActor_hp_max_set, doc=r"""hp_max : int""")
    level = property(_ghh.PlayerActor_level_get, _ghh.PlayerActor_level_set, doc=r"""level : int""")
    loot = property(_ghh.PlayerActor_loot_get, _ghh.PlayerActor_loot_set, doc=r"""loot : int""")
    initiative = property(_ghh.PlayerActor_initiative_get, _ghh.PlayerActor_initiative_set, doc=r"""initiative : int""")
    conditions = property(_ghh.PlayerActor_conditions_get, _ghh.PlayerActor_conditions_set, doc=r"""conditions : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")
    conditions_expired = property(_ghh.PlayerActor_conditions_expired_get, _ghh.PlayerActor_conditions_expired_set, doc=r"""conditions_expired : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")
    conditions_current_turn = property(_ghh.PlayerActor_conditions_current_turn_get, _ghh.PlayerActor_conditions_current_turn_set, doc=r"""conditions_current_turn : std::vector<(ghh::Condition,std::allocator<(ghh::Condition)>)>""")
    exhausted = property(_ghh.PlayerActor_exhausted_get, _ghh.PlayerActor_exhausted_set, doc=r"""exhausted : bool""")

    def __init__(self):
        r"""__init__(PlayerActor self) -> PlayerActor"""
        _ghh.PlayerActor_swiginit(self, _ghh.new_PlayerActor())
    __swig_destroy__ = _ghh.delete_PlayerActor

# Register PlayerActor in _ghh:
_ghh.PlayerActor_swigregister(PlayerActor)

class GameState(object):
    r"""Proxy of C++ ghh::GameState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    round = property(_ghh.GameState_round_get, _ghh.GameState_round_set, doc=r"""round : int""")
    scenario_number = property(_ghh.GameState_scenario_number_get, _ghh.GameState_scenario_number_set, doc=r"""scenario_number : int""")
    scenario_level = property(_ghh.GameState_scenario_level_get, _ghh.GameState_scenario_level_set, doc=r"""scenario_level : int""")
    track_standees = property(_ghh.GameState_track_standees_get, _ghh.GameState_track_standees_set, doc=r"""track_standees : bool""")
    ability_cards = property(_ghh.GameState_ability_cards_get, _ghh.GameState_ability_cards_set, doc=r"""ability_cards : bool""")
    random_standees = property(_ghh.GameState_random_standees_get, _ghh.GameState_random_standees_set, doc=r"""random_standees : bool""")
    elites_first = property(_ghh.GameState_elites_first_get, _ghh.GameState_elites_first_set, doc=r"""elites_first : bool""")
    expire_conditions = property(_ghh.GameState_expire_conditions_get, _ghh.GameState_expire_conditions_set, doc=r"""expire_conditions : bool""")
    solo = property(_ghh.GameState_solo_get, _ghh.GameState_solo_set, doc=r"""solo : bool""")
    hide_stats = property(_ghh.GameState_hide_stats_get, _ghh.GameState_hide_stats_set, doc=r"""hide_stats : bool""")
    calculate_stats = property(_ghh.GameState_calculate_stats_get, _ghh.GameState_calculate_stats_set, doc=r"""calculate_stats : bool""")
    can_draw = property(_ghh.GameState_can_draw_get, _ghh.GameState_can_draw_set, doc=r"""can_draw : bool""")
    needs_shuffle = property(_ghh.GameState_needs_shuffle_get, _ghh.GameState_needs_shuffle_set, doc=r"""needs_shuffle : bool""")
    player_init = property(_ghh.GameState_player_init_get, _ghh.GameState_player_init_set, doc=r"""player_init : ghh::PlayerInit""")
    attack_modifiers = property(_ghh.GameState_attack_modifiers_get, _ghh.GameState_attack_modifiers_set, doc=r"""attack_modifiers : std::vector<(ghh::AttackModifier,std::allocator<(ghh::AttackModifier)>)>""")
    attack_modifiers_discard = property(_ghh.GameState_attack_modifiers_discard_get, _ghh.GameState_attack_modifiers_discard_set, doc=r"""attack_modifiers_discard : std::vector<(ghh::AttackModifier,std::allocator<(ghh::AttackModifier)>)>""")
    attack_modifier1 = property(_ghh.GameState_attack_modifier1_get, _ghh.GameState_attack_modifier1_set, doc=r"""attack_modifier1 : tl::optional<(ghh::AttackModifier)>""")
    attack_modifier2 = property(_ghh.GameState_attack_modifier2_get, _ghh.GameState_attack_modifier2_set, doc=r"""attack_modifier2 : tl::optional<(ghh::AttackModifier)>""")
    fire = property(_ghh.GameState_fire_get, _ghh.GameState_fire_set, doc=r"""fire : ghh::ElementState""")
    ice = property(_ghh.GameState_ice_get, _ghh.GameState_ice_set, doc=r"""ice : ghh::ElementState""")
    air = property(_ghh.GameState_air_get, _ghh.GameState_air_set, doc=r"""air : ghh::ElementState""")
    earth = property(_ghh.GameState_earth_get, _ghh.GameState_earth_set, doc=r"""earth : ghh::ElementState""")
    light = property(_ghh.GameState_light_get, _ghh.GameState_light_set, doc=r"""light : ghh::ElementState""")
    dark = property(_ghh.GameState_dark_get, _ghh.GameState_dark_set, doc=r"""dark : ghh::ElementState""")
    removed_abilities = property(_ghh.GameState_removed_abilities_get, _ghh.GameState_removed_abilities_set, doc=r"""removed_abilities : std::vector<(int,std::allocator<(int)>)>""")
    bad_omen = property(_ghh.GameState_bad_omen_get, _ghh.GameState_bad_omen_set, doc=r"""bad_omen : int""")
    jotl = property(_ghh.GameState_jotl_get, _ghh.GameState_jotl_set, doc=r"""jotl : bool""")
    ability_decks = property(_ghh.GameState_ability_decks_get, _ghh.GameState_ability_decks_set, doc=r"""ability_decks : std::map<(int,ghh::MonsterAbilityDeck,std::less<(int)>,std::allocator<(std::pair<(q(const).int,ghh::MonsterAbilityDeck)>)>)>""")
    actors = property(_ghh.GameState_actors_get, _ghh.GameState_actors_set, doc=r"""actors : std::vector<(ghh::Actor,std::allocator<(ghh::Actor)>)>""")

    def __init__(self):
        r"""__init__(GameState self) -> GameState"""
        _ghh.GameState_swiginit(self, _ghh.new_GameState())

    def clear(self):
        r"""clear(GameState self)"""
        return _ghh.GameState_clear(self)
    __swig_destroy__ = _ghh.delete_GameState

# Register GameState in _ghh:
_ghh.GameState_swigregister(GameState)


def _print(*args):
    r"""
    _print(ghh::AttackModifier const & arg)

    Parameters
    ----------
    arg: ghh::AttackModifier const &

    _print(ghh::CharacterClass const & arg)

    Parameters
    ----------
    arg: ghh::CharacterClass const &

    _print(ghh::Condition const & arg)

    Parameters
    ----------
    arg: ghh::Condition const &

    _print(ghh::ElementState const & arg)

    Parameters
    ----------
    arg: ghh::ElementState const &

    _print(ghh::MonsterType const & arg)

    Parameters
    ----------
    arg: ghh::MonsterType const &

    _print(ghh::PlayerInit const & arg)

    Parameters
    ----------
    arg: ghh::PlayerInit const &

    _print(ghh::SummonColor const & arg)

    Parameters
    ----------
    arg: ghh::SummonColor const &

    _print(Actor arg)

    Parameters
    ----------
    arg: ghh::Actor const &

    _print(MonsterAbilityDeck arg)

    Parameters
    ----------
    arg: ghh::MonsterAbilityDeck const &

    _print(MonsterActor arg)

    Parameters
    ----------
    arg: ghh::MonsterActor const &

    _print(MonsterInstance arg)

    Parameters
    ----------
    arg: ghh::MonsterInstance const &

    _print(PlayerActor arg)

    Parameters
    ----------
    arg: ghh::PlayerActor const &

    _print(GameState arg)

    Parameters
    ----------
    arg: ghh::GameState const &

    """
    return _ghh._print(*args)
class Buffer(object):
    r"""Proxy of C++ ghh::protocol::Buffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ghh.delete_Buffer

    def __init__(self, *args):
        r"""
        __init__(Buffer self) -> Buffer
        __init__(Buffer self, uint8_t * data, std::size_t dataLength) -> Buffer

        Parameters
        ----------
        data: uint8_t *
        dataLength: std::size_t

        """
        _ghh.Buffer_swiginit(self, _ghh.new_Buffer(*args))

    def flush(self):
        r"""flush(Buffer self)"""
        return _ghh.Buffer_flush(self)

    def clear(self):
        r"""clear(Buffer self)"""
        return _ghh.Buffer_clear(self)

    def setReadPosition(self, position):
        r"""
        setReadPosition(Buffer self, std::size_t position)

        Parameters
        ----------
        position: std::size_t

        """
        return _ghh.Buffer_setReadPosition(self, position)

    def getReadPosition(self):
        r"""getReadPosition(Buffer self) -> std::size_t"""
        return _ghh.Buffer_getReadPosition(self)

    def getPosition(self):
        r"""getPosition(Buffer self) -> std::size_t"""
        return _ghh.Buffer_getPosition(self)

    def getSize(self):
        r"""getSize(Buffer self) -> std::size_t"""
        return _ghh.Buffer_getSize(self)

    def readInt(self, optimizePositive):
        r"""
        readInt(Buffer self, bool optimizePositive) -> int

        Parameters
        ----------
        optimizePositive: bool

        """
        return _ghh.Buffer_readInt(self, optimizePositive)

    def writeInt(self, value, optimizePositive):
        r"""
        writeInt(Buffer self, int value, bool optimizePositive)

        Parameters
        ----------
        value: int
        optimizePositive: bool

        """
        return _ghh.Buffer_writeInt(self, value, optimizePositive)

    def readByte(self):
        r"""readByte(Buffer self) -> uint8_t"""
        return _ghh.Buffer_readByte(self)

    def writeByte(self, value):
        r"""
        writeByte(Buffer self, uint8_t value)

        Parameters
        ----------
        value: uint8_t

        """
        return _ghh.Buffer_writeByte(self, value)

    def readFullInt(self):
        r"""readFullInt(Buffer self) -> int"""
        return _ghh.Buffer_readFullInt(self)

    def writeFullInt(self, value):
        r"""
        writeFullInt(Buffer self, int value)

        Parameters
        ----------
        value: int

        """
        return _ghh.Buffer_writeFullInt(self, value)

    def readString(self):
        r"""readString(Buffer self) -> tl::optional< std::string >"""
        return _ghh.Buffer_readString(self)

    def writeString(self, value):
        r"""
        writeString(Buffer self, tl::optional< std::string > value)

        Parameters
        ----------
        value: tl::optional< std::string >

        """
        return _ghh.Buffer_writeString(self, value)

    def readUTFString(self):
        r"""readUTFString(Buffer self) -> tl::optional< std::string >"""
        return _ghh.Buffer_readUTFString(self)

    def writeUTFString(self, value):
        r"""
        writeUTFString(Buffer self, std::string value)

        Parameters
        ----------
        value: std::string

        """
        return _ghh.Buffer_writeUTFString(self, value)

    def readBoolean(self):
        r"""readBoolean(Buffer self) -> bool"""
        return _ghh.Buffer_readBoolean(self)

    def writeBoolean(self, value):
        r"""
        writeBoolean(Buffer self, bool value)

        Parameters
        ----------
        value: bool

        """
        return _ghh.Buffer_writeBoolean(self, value)

    def writeIntArray(self, vec, optimizePositive):
        r"""
        writeIntArray(Buffer self, IntVector vec, bool optimizePositive)

        Parameters
        ----------
        vec: std::vector< int,std::allocator< int > >
        optimizePositive: bool

        """
        return _ghh.Buffer_writeIntArray(self, vec, optimizePositive)

    def readIntArray(self, vec, optimizePositive):
        r"""
        readIntArray(Buffer self, IntVector vec, bool optimizePositive)

        Parameters
        ----------
        vec: std::vector< int,std::allocator< int > > &
        optimizePositive: bool

        """
        return _ghh.Buffer_readIntArray(self, vec, optimizePositive)

# Register Buffer in _ghh:
_ghh.Buffer_swigregister(Buffer)

class Header(object):
    r"""Proxy of C++ ghh::protocol::Header class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    event = property(_ghh.Header_event_get, _ghh.Header_event_set, doc=r"""event : std::string""")
    payload = property(_ghh.Header_payload_get, _ghh.Header_payload_set, doc=r"""payload : std::string""")
    length = property(_ghh.Header_length_get, _ghh.Header_length_set, doc=r"""length : std::size_t""")

    def __init__(self):
        r"""__init__(Header self) -> Header"""
        _ghh.Header_swiginit(self, _ghh.new_Header())
    __swig_destroy__ = _ghh.delete_Header

# Register Header in _ghh:
_ghh.Header_swigregister(Header)


def readHeader(state, buffer):
    r"""
    readHeader(Header state, Buffer buffer) -> bool

    Parameters
    ----------
    state: ghh::protocol::Header &
    buffer: ghh::protocol::Buffer &

    """
    return _ghh.readHeader(state, buffer)

def writeHeader(state, buffer):
    r"""
    writeHeader(Header state, Buffer buffer)

    Parameters
    ----------
    state: ghh::protocol::Header const &
    buffer: ghh::protocol::Buffer &

    """
    return _ghh.writeHeader(state, buffer)
class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _ghh.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntVector self) -> bool"""
        return _ghh.IntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntVector self) -> bool"""
        return _ghh.IntVector___bool__(self)

    def __len__(self):
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _ghh.IntVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _ghh.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _ghh.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _ghh.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _ghh.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _ghh.IntVector_pop(self)

    def append(self, x):
        r"""
        append(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector_append(self, x)

    def empty(self):
        r"""empty(IntVector self) -> bool"""
        return _ghh.IntVector_empty(self)

    def size(self):
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _ghh.IntVector_size(self)

    def swap(self, v):
        r"""
        swap(IntVector self, IntVector v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _ghh.IntVector_swap(self, v)

    def begin(self):
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _ghh.IntVector_begin(self)

    def end(self):
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _ghh.IntVector_end(self)

    def rbegin(self):
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _ghh.IntVector_rbegin(self)

    def rend(self):
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _ghh.IntVector_rend(self)

    def clear(self):
        r"""clear(IntVector self)"""
        return _ghh.IntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _ghh.IntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntVector self)"""
        return _ghh.IntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _ghh.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _ghh.IntVector_swiginit(self, _ghh.new_IntVector(*args))

    def push_back(self, x):
        r"""
        push_back(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector_push_back(self, x)

    def front(self):
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _ghh.IntVector_front(self)

    def back(self):
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _ghh.IntVector_back(self)

    def assign(self, n, x):
        r"""
        assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _ghh.IntVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(IntVector self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _ghh.IntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _ghh.IntVector_capacity(self)
    __swig_destroy__ = _ghh.delete_IntVector

# Register IntVector in _ghh:
_ghh.IntVector_swigregister(IntVector)

class CharacterClassVector(object):
    r"""Proxy of C++ std::vector< ghh::CharacterClassNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CharacterClassVector self) -> SwigPyIterator"""
        return _ghh.CharacterClassVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CharacterClassVector self) -> bool"""
        return _ghh.CharacterClassVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CharacterClassVector self) -> bool"""
        return _ghh.CharacterClassVector___bool__(self)

    def __len__(self):
        r"""__len__(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::size_type"""
        return _ghh.CharacterClassVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i, std::vector< enum ghh::CharacterClassNS::Value >::difference_type j) -> CharacterClassVector

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        j: std::vector< enum ghh::CharacterClassNS::Value >::difference_type

        """
        return _ghh.CharacterClassVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i, std::vector< enum ghh::CharacterClassNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        j: std::vector< enum ghh::CharacterClassNS::Value >::difference_type

        __setslice__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i, std::vector< enum ghh::CharacterClassNS::Value >::difference_type j, CharacterClassVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        j: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        v: std::vector< ghh::CharacterClassNS::Value,std::allocator< ghh::CharacterClassNS::Value > > const &

        """
        return _ghh.CharacterClassVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i, std::vector< enum ghh::CharacterClassNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        j: std::vector< enum ghh::CharacterClassNS::Value >::difference_type

        """
        return _ghh.CharacterClassVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type

        __delitem__(CharacterClassVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.CharacterClassVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CharacterClassVector self, PySliceObject * slice) -> CharacterClassVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i) -> std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type

        """
        return _ghh.CharacterClassVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CharacterClassVector self, PySliceObject * slice, CharacterClassVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::CharacterClassNS::Value,std::allocator< ghh::CharacterClassNS::Value > > const &

        __setitem__(CharacterClassVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::difference_type i, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::CharacterClassNS::Value >::difference_type
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::value_type"""
        return _ghh.CharacterClassVector_pop(self)

    def append(self, x):
        r"""
        append(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector_append(self, x)

    def empty(self):
        r"""empty(CharacterClassVector self) -> bool"""
        return _ghh.CharacterClassVector_empty(self)

    def size(self):
        r"""size(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::size_type"""
        return _ghh.CharacterClassVector_size(self)

    def swap(self, v):
        r"""
        swap(CharacterClassVector self, CharacterClassVector v)

        Parameters
        ----------
        v: std::vector< ghh::CharacterClassNS::Value > &

        """
        return _ghh.CharacterClassVector_swap(self, v)

    def begin(self):
        r"""begin(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::iterator"""
        return _ghh.CharacterClassVector_begin(self)

    def end(self):
        r"""end(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::iterator"""
        return _ghh.CharacterClassVector_end(self)

    def rbegin(self):
        r"""rbegin(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::reverse_iterator"""
        return _ghh.CharacterClassVector_rbegin(self)

    def rend(self):
        r"""rend(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::reverse_iterator"""
        return _ghh.CharacterClassVector_rend(self)

    def clear(self):
        r"""clear(CharacterClassVector self)"""
        return _ghh.CharacterClassVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::allocator_type"""
        return _ghh.CharacterClassVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CharacterClassVector self)"""
        return _ghh.CharacterClassVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::iterator pos) -> std::vector< enum ghh::CharacterClassNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::CharacterClassNS::Value >::iterator

        erase(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::iterator first, std::vector< enum ghh::CharacterClassNS::Value >::iterator last) -> std::vector< enum ghh::CharacterClassNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::CharacterClassNS::Value >::iterator
        last: std::vector< enum ghh::CharacterClassNS::Value >::iterator

        """
        return _ghh.CharacterClassVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CharacterClassVector self) -> CharacterClassVector
        __init__(CharacterClassVector self, CharacterClassVector other) -> CharacterClassVector

        Parameters
        ----------
        other: std::vector< ghh::CharacterClassNS::Value > const &

        __init__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type size) -> CharacterClassVector

        Parameters
        ----------
        size: std::vector< enum ghh::CharacterClassNS::Value >::size_type

        __init__(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type size, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & value) -> CharacterClassVector

        Parameters
        ----------
        size: std::vector< enum ghh::CharacterClassNS::Value >::size_type
        value: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        _ghh.CharacterClassVector_swiginit(self, _ghh.new_CharacterClassVector(*args))

    def push_back(self, x):
        r"""
        push_back(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector_push_back(self, x)

    def front(self):
        r"""front(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::value_type const &"""
        return _ghh.CharacterClassVector_front(self)

    def back(self):
        r"""back(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::value_type const &"""
        return _ghh.CharacterClassVector_back(self)

    def assign(self, n, x):
        r"""
        assign(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type n, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::CharacterClassNS::Value >::size_type
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::CharacterClassNS::Value >::size_type

        resize(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type new_size, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::CharacterClassNS::Value >::size_type
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::iterator pos, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x) -> std::vector< enum ghh::CharacterClassNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::CharacterClassNS::Value >::iterator
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        insert(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::iterator pos, std::vector< enum ghh::CharacterClassNS::Value >::size_type n, std::vector< enum ghh::CharacterClassNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::CharacterClassNS::Value >::iterator
        n: std::vector< enum ghh::CharacterClassNS::Value >::size_type
        x: std::vector< enum ghh::CharacterClassNS::Value >::value_type const &

        """
        return _ghh.CharacterClassVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(CharacterClassVector self, std::vector< enum ghh::CharacterClassNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::CharacterClassNS::Value >::size_type

        """
        return _ghh.CharacterClassVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CharacterClassVector self) -> std::vector< enum ghh::CharacterClassNS::Value >::size_type"""
        return _ghh.CharacterClassVector_capacity(self)
    __swig_destroy__ = _ghh.delete_CharacterClassVector

# Register CharacterClassVector in _ghh:
_ghh.CharacterClassVector_swigregister(CharacterClassVector)

class ConditionVector(object):
    r"""Proxy of C++ std::vector< ghh::ConditionNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ConditionVector self) -> SwigPyIterator"""
        return _ghh.ConditionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ConditionVector self) -> bool"""
        return _ghh.ConditionVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ConditionVector self) -> bool"""
        return _ghh.ConditionVector___bool__(self)

    def __len__(self):
        r"""__len__(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::size_type"""
        return _ghh.ConditionVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i, std::vector< enum ghh::ConditionNS::Value >::difference_type j) -> ConditionVector

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type
        j: std::vector< enum ghh::ConditionNS::Value >::difference_type

        """
        return _ghh.ConditionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i, std::vector< enum ghh::ConditionNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type
        j: std::vector< enum ghh::ConditionNS::Value >::difference_type

        __setslice__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i, std::vector< enum ghh::ConditionNS::Value >::difference_type j, ConditionVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type
        j: std::vector< enum ghh::ConditionNS::Value >::difference_type
        v: std::vector< ghh::ConditionNS::Value,std::allocator< ghh::ConditionNS::Value > > const &

        """
        return _ghh.ConditionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i, std::vector< enum ghh::ConditionNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type
        j: std::vector< enum ghh::ConditionNS::Value >::difference_type

        """
        return _ghh.ConditionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type

        __delitem__(ConditionVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.ConditionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ConditionVector self, PySliceObject * slice) -> ConditionVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i) -> std::vector< enum ghh::ConditionNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type

        """
        return _ghh.ConditionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ConditionVector self, PySliceObject * slice, ConditionVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::ConditionNS::Value,std::allocator< ghh::ConditionNS::Value > > const &

        __setitem__(ConditionVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::difference_type i, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::ConditionNS::Value >::difference_type
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::value_type"""
        return _ghh.ConditionVector_pop(self)

    def append(self, x):
        r"""
        append(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector_append(self, x)

    def empty(self):
        r"""empty(ConditionVector self) -> bool"""
        return _ghh.ConditionVector_empty(self)

    def size(self):
        r"""size(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::size_type"""
        return _ghh.ConditionVector_size(self)

    def swap(self, v):
        r"""
        swap(ConditionVector self, ConditionVector v)

        Parameters
        ----------
        v: std::vector< ghh::ConditionNS::Value > &

        """
        return _ghh.ConditionVector_swap(self, v)

    def begin(self):
        r"""begin(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::iterator"""
        return _ghh.ConditionVector_begin(self)

    def end(self):
        r"""end(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::iterator"""
        return _ghh.ConditionVector_end(self)

    def rbegin(self):
        r"""rbegin(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::reverse_iterator"""
        return _ghh.ConditionVector_rbegin(self)

    def rend(self):
        r"""rend(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::reverse_iterator"""
        return _ghh.ConditionVector_rend(self)

    def clear(self):
        r"""clear(ConditionVector self)"""
        return _ghh.ConditionVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::allocator_type"""
        return _ghh.ConditionVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ConditionVector self)"""
        return _ghh.ConditionVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::iterator pos) -> std::vector< enum ghh::ConditionNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::ConditionNS::Value >::iterator

        erase(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::iterator first, std::vector< enum ghh::ConditionNS::Value >::iterator last) -> std::vector< enum ghh::ConditionNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::ConditionNS::Value >::iterator
        last: std::vector< enum ghh::ConditionNS::Value >::iterator

        """
        return _ghh.ConditionVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ConditionVector self) -> ConditionVector
        __init__(ConditionVector self, ConditionVector other) -> ConditionVector

        Parameters
        ----------
        other: std::vector< ghh::ConditionNS::Value > const &

        __init__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type size) -> ConditionVector

        Parameters
        ----------
        size: std::vector< enum ghh::ConditionNS::Value >::size_type

        __init__(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type size, std::vector< enum ghh::ConditionNS::Value >::value_type const & value) -> ConditionVector

        Parameters
        ----------
        size: std::vector< enum ghh::ConditionNS::Value >::size_type
        value: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        _ghh.ConditionVector_swiginit(self, _ghh.new_ConditionVector(*args))

    def push_back(self, x):
        r"""
        push_back(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector_push_back(self, x)

    def front(self):
        r"""front(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::value_type const &"""
        return _ghh.ConditionVector_front(self)

    def back(self):
        r"""back(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::value_type const &"""
        return _ghh.ConditionVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type n, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::ConditionNS::Value >::size_type
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::ConditionNS::Value >::size_type

        resize(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type new_size, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::ConditionNS::Value >::size_type
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::iterator pos, std::vector< enum ghh::ConditionNS::Value >::value_type const & x) -> std::vector< enum ghh::ConditionNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::ConditionNS::Value >::iterator
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        insert(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::iterator pos, std::vector< enum ghh::ConditionNS::Value >::size_type n, std::vector< enum ghh::ConditionNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::ConditionNS::Value >::iterator
        n: std::vector< enum ghh::ConditionNS::Value >::size_type
        x: std::vector< enum ghh::ConditionNS::Value >::value_type const &

        """
        return _ghh.ConditionVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ConditionVector self, std::vector< enum ghh::ConditionNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::ConditionNS::Value >::size_type

        """
        return _ghh.ConditionVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ConditionVector self) -> std::vector< enum ghh::ConditionNS::Value >::size_type"""
        return _ghh.ConditionVector_capacity(self)
    __swig_destroy__ = _ghh.delete_ConditionVector

# Register ConditionVector in _ghh:
_ghh.ConditionVector_swigregister(ConditionVector)

class ElementStateVector(object):
    r"""Proxy of C++ std::vector< ghh::ElementStateNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ElementStateVector self) -> SwigPyIterator"""
        return _ghh.ElementStateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ElementStateVector self) -> bool"""
        return _ghh.ElementStateVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ElementStateVector self) -> bool"""
        return _ghh.ElementStateVector___bool__(self)

    def __len__(self):
        r"""__len__(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::size_type"""
        return _ghh.ElementStateVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i, std::vector< enum ghh::ElementStateNS::Value >::difference_type j) -> ElementStateVector

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        j: std::vector< enum ghh::ElementStateNS::Value >::difference_type

        """
        return _ghh.ElementStateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i, std::vector< enum ghh::ElementStateNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        j: std::vector< enum ghh::ElementStateNS::Value >::difference_type

        __setslice__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i, std::vector< enum ghh::ElementStateNS::Value >::difference_type j, ElementStateVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        j: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        v: std::vector< ghh::ElementStateNS::Value,std::allocator< ghh::ElementStateNS::Value > > const &

        """
        return _ghh.ElementStateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i, std::vector< enum ghh::ElementStateNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        j: std::vector< enum ghh::ElementStateNS::Value >::difference_type

        """
        return _ghh.ElementStateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type

        __delitem__(ElementStateVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.ElementStateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ElementStateVector self, PySliceObject * slice) -> ElementStateVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i) -> std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type

        """
        return _ghh.ElementStateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ElementStateVector self, PySliceObject * slice, ElementStateVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::ElementStateNS::Value,std::allocator< ghh::ElementStateNS::Value > > const &

        __setitem__(ElementStateVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::difference_type i, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::ElementStateNS::Value >::difference_type
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::value_type"""
        return _ghh.ElementStateVector_pop(self)

    def append(self, x):
        r"""
        append(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector_append(self, x)

    def empty(self):
        r"""empty(ElementStateVector self) -> bool"""
        return _ghh.ElementStateVector_empty(self)

    def size(self):
        r"""size(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::size_type"""
        return _ghh.ElementStateVector_size(self)

    def swap(self, v):
        r"""
        swap(ElementStateVector self, ElementStateVector v)

        Parameters
        ----------
        v: std::vector< ghh::ElementStateNS::Value > &

        """
        return _ghh.ElementStateVector_swap(self, v)

    def begin(self):
        r"""begin(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::iterator"""
        return _ghh.ElementStateVector_begin(self)

    def end(self):
        r"""end(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::iterator"""
        return _ghh.ElementStateVector_end(self)

    def rbegin(self):
        r"""rbegin(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::reverse_iterator"""
        return _ghh.ElementStateVector_rbegin(self)

    def rend(self):
        r"""rend(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::reverse_iterator"""
        return _ghh.ElementStateVector_rend(self)

    def clear(self):
        r"""clear(ElementStateVector self)"""
        return _ghh.ElementStateVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::allocator_type"""
        return _ghh.ElementStateVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ElementStateVector self)"""
        return _ghh.ElementStateVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::iterator pos) -> std::vector< enum ghh::ElementStateNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::ElementStateNS::Value >::iterator

        erase(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::iterator first, std::vector< enum ghh::ElementStateNS::Value >::iterator last) -> std::vector< enum ghh::ElementStateNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::ElementStateNS::Value >::iterator
        last: std::vector< enum ghh::ElementStateNS::Value >::iterator

        """
        return _ghh.ElementStateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ElementStateVector self) -> ElementStateVector
        __init__(ElementStateVector self, ElementStateVector other) -> ElementStateVector

        Parameters
        ----------
        other: std::vector< ghh::ElementStateNS::Value > const &

        __init__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type size) -> ElementStateVector

        Parameters
        ----------
        size: std::vector< enum ghh::ElementStateNS::Value >::size_type

        __init__(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type size, std::vector< enum ghh::ElementStateNS::Value >::value_type const & value) -> ElementStateVector

        Parameters
        ----------
        size: std::vector< enum ghh::ElementStateNS::Value >::size_type
        value: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        _ghh.ElementStateVector_swiginit(self, _ghh.new_ElementStateVector(*args))

    def push_back(self, x):
        r"""
        push_back(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector_push_back(self, x)

    def front(self):
        r"""front(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::value_type const &"""
        return _ghh.ElementStateVector_front(self)

    def back(self):
        r"""back(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::value_type const &"""
        return _ghh.ElementStateVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type n, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::ElementStateNS::Value >::size_type
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::ElementStateNS::Value >::size_type

        resize(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type new_size, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::ElementStateNS::Value >::size_type
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::iterator pos, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x) -> std::vector< enum ghh::ElementStateNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::ElementStateNS::Value >::iterator
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        insert(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::iterator pos, std::vector< enum ghh::ElementStateNS::Value >::size_type n, std::vector< enum ghh::ElementStateNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::ElementStateNS::Value >::iterator
        n: std::vector< enum ghh::ElementStateNS::Value >::size_type
        x: std::vector< enum ghh::ElementStateNS::Value >::value_type const &

        """
        return _ghh.ElementStateVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ElementStateVector self, std::vector< enum ghh::ElementStateNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::ElementStateNS::Value >::size_type

        """
        return _ghh.ElementStateVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ElementStateVector self) -> std::vector< enum ghh::ElementStateNS::Value >::size_type"""
        return _ghh.ElementStateVector_capacity(self)
    __swig_destroy__ = _ghh.delete_ElementStateVector

# Register ElementStateVector in _ghh:
_ghh.ElementStateVector_swigregister(ElementStateVector)

class MonsterTypeVector(object):
    r"""Proxy of C++ std::vector< ghh::MonsterTypeNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MonsterTypeVector self) -> SwigPyIterator"""
        return _ghh.MonsterTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MonsterTypeVector self) -> bool"""
        return _ghh.MonsterTypeVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MonsterTypeVector self) -> bool"""
        return _ghh.MonsterTypeVector___bool__(self)

    def __len__(self):
        r"""__len__(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::size_type"""
        return _ghh.MonsterTypeVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type j) -> MonsterTypeVector

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        j: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type

        """
        return _ghh.MonsterTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        j: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type

        __setslice__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type j, MonsterTypeVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        j: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        v: std::vector< ghh::MonsterTypeNS::Value,std::allocator< ghh::MonsterTypeNS::Value > > const &

        """
        return _ghh.MonsterTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        j: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type

        """
        return _ghh.MonsterTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type

        __delitem__(MonsterTypeVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.MonsterTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(MonsterTypeVector self, PySliceObject * slice) -> MonsterTypeVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i) -> std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type

        """
        return _ghh.MonsterTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(MonsterTypeVector self, PySliceObject * slice, MonsterTypeVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::MonsterTypeNS::Value,std::allocator< ghh::MonsterTypeNS::Value > > const &

        __setitem__(MonsterTypeVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::difference_type i, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::MonsterTypeNS::Value >::difference_type
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector___setitem__(self, *args)

    def pop(self):
        r"""pop(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::value_type"""
        return _ghh.MonsterTypeVector_pop(self)

    def append(self, x):
        r"""
        append(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector_append(self, x)

    def empty(self):
        r"""empty(MonsterTypeVector self) -> bool"""
        return _ghh.MonsterTypeVector_empty(self)

    def size(self):
        r"""size(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::size_type"""
        return _ghh.MonsterTypeVector_size(self)

    def swap(self, v):
        r"""
        swap(MonsterTypeVector self, MonsterTypeVector v)

        Parameters
        ----------
        v: std::vector< ghh::MonsterTypeNS::Value > &

        """
        return _ghh.MonsterTypeVector_swap(self, v)

    def begin(self):
        r"""begin(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::iterator"""
        return _ghh.MonsterTypeVector_begin(self)

    def end(self):
        r"""end(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::iterator"""
        return _ghh.MonsterTypeVector_end(self)

    def rbegin(self):
        r"""rbegin(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::reverse_iterator"""
        return _ghh.MonsterTypeVector_rbegin(self)

    def rend(self):
        r"""rend(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::reverse_iterator"""
        return _ghh.MonsterTypeVector_rend(self)

    def clear(self):
        r"""clear(MonsterTypeVector self)"""
        return _ghh.MonsterTypeVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::allocator_type"""
        return _ghh.MonsterTypeVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(MonsterTypeVector self)"""
        return _ghh.MonsterTypeVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::iterator pos) -> std::vector< enum ghh::MonsterTypeNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::MonsterTypeNS::Value >::iterator

        erase(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::iterator first, std::vector< enum ghh::MonsterTypeNS::Value >::iterator last) -> std::vector< enum ghh::MonsterTypeNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::MonsterTypeNS::Value >::iterator
        last: std::vector< enum ghh::MonsterTypeNS::Value >::iterator

        """
        return _ghh.MonsterTypeVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MonsterTypeVector self) -> MonsterTypeVector
        __init__(MonsterTypeVector self, MonsterTypeVector other) -> MonsterTypeVector

        Parameters
        ----------
        other: std::vector< ghh::MonsterTypeNS::Value > const &

        __init__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type size) -> MonsterTypeVector

        Parameters
        ----------
        size: std::vector< enum ghh::MonsterTypeNS::Value >::size_type

        __init__(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type size, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & value) -> MonsterTypeVector

        Parameters
        ----------
        size: std::vector< enum ghh::MonsterTypeNS::Value >::size_type
        value: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        _ghh.MonsterTypeVector_swiginit(self, _ghh.new_MonsterTypeVector(*args))

    def push_back(self, x):
        r"""
        push_back(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector_push_back(self, x)

    def front(self):
        r"""front(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &"""
        return _ghh.MonsterTypeVector_front(self)

    def back(self):
        r"""back(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &"""
        return _ghh.MonsterTypeVector_back(self)

    def assign(self, n, x):
        r"""
        assign(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type n, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::MonsterTypeNS::Value >::size_type
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::MonsterTypeNS::Value >::size_type

        resize(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type new_size, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::MonsterTypeNS::Value >::size_type
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::iterator pos, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x) -> std::vector< enum ghh::MonsterTypeNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::MonsterTypeNS::Value >::iterator
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        insert(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::iterator pos, std::vector< enum ghh::MonsterTypeNS::Value >::size_type n, std::vector< enum ghh::MonsterTypeNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::MonsterTypeNS::Value >::iterator
        n: std::vector< enum ghh::MonsterTypeNS::Value >::size_type
        x: std::vector< enum ghh::MonsterTypeNS::Value >::value_type const &

        """
        return _ghh.MonsterTypeVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(MonsterTypeVector self, std::vector< enum ghh::MonsterTypeNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::MonsterTypeNS::Value >::size_type

        """
        return _ghh.MonsterTypeVector_reserve(self, n)

    def capacity(self):
        r"""capacity(MonsterTypeVector self) -> std::vector< enum ghh::MonsterTypeNS::Value >::size_type"""
        return _ghh.MonsterTypeVector_capacity(self)
    __swig_destroy__ = _ghh.delete_MonsterTypeVector

# Register MonsterTypeVector in _ghh:
_ghh.MonsterTypeVector_swigregister(MonsterTypeVector)

class PlayerInitVector(object):
    r"""Proxy of C++ std::vector< ghh::PlayerInitNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(PlayerInitVector self) -> SwigPyIterator"""
        return _ghh.PlayerInitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(PlayerInitVector self) -> bool"""
        return _ghh.PlayerInitVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(PlayerInitVector self) -> bool"""
        return _ghh.PlayerInitVector___bool__(self)

    def __len__(self):
        r"""__len__(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::size_type"""
        return _ghh.PlayerInitVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i, std::vector< enum ghh::PlayerInitNS::Value >::difference_type j) -> PlayerInitVector

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        j: std::vector< enum ghh::PlayerInitNS::Value >::difference_type

        """
        return _ghh.PlayerInitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i, std::vector< enum ghh::PlayerInitNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        j: std::vector< enum ghh::PlayerInitNS::Value >::difference_type

        __setslice__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i, std::vector< enum ghh::PlayerInitNS::Value >::difference_type j, PlayerInitVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        j: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        v: std::vector< ghh::PlayerInitNS::Value,std::allocator< ghh::PlayerInitNS::Value > > const &

        """
        return _ghh.PlayerInitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i, std::vector< enum ghh::PlayerInitNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        j: std::vector< enum ghh::PlayerInitNS::Value >::difference_type

        """
        return _ghh.PlayerInitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type

        __delitem__(PlayerInitVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.PlayerInitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(PlayerInitVector self, PySliceObject * slice) -> PlayerInitVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i) -> std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type

        """
        return _ghh.PlayerInitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(PlayerInitVector self, PySliceObject * slice, PlayerInitVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::PlayerInitNS::Value,std::allocator< ghh::PlayerInitNS::Value > > const &

        __setitem__(PlayerInitVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::difference_type i, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::PlayerInitNS::Value >::difference_type
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector___setitem__(self, *args)

    def pop(self):
        r"""pop(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::value_type"""
        return _ghh.PlayerInitVector_pop(self)

    def append(self, x):
        r"""
        append(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector_append(self, x)

    def empty(self):
        r"""empty(PlayerInitVector self) -> bool"""
        return _ghh.PlayerInitVector_empty(self)

    def size(self):
        r"""size(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::size_type"""
        return _ghh.PlayerInitVector_size(self)

    def swap(self, v):
        r"""
        swap(PlayerInitVector self, PlayerInitVector v)

        Parameters
        ----------
        v: std::vector< ghh::PlayerInitNS::Value > &

        """
        return _ghh.PlayerInitVector_swap(self, v)

    def begin(self):
        r"""begin(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::iterator"""
        return _ghh.PlayerInitVector_begin(self)

    def end(self):
        r"""end(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::iterator"""
        return _ghh.PlayerInitVector_end(self)

    def rbegin(self):
        r"""rbegin(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::reverse_iterator"""
        return _ghh.PlayerInitVector_rbegin(self)

    def rend(self):
        r"""rend(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::reverse_iterator"""
        return _ghh.PlayerInitVector_rend(self)

    def clear(self):
        r"""clear(PlayerInitVector self)"""
        return _ghh.PlayerInitVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::allocator_type"""
        return _ghh.PlayerInitVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(PlayerInitVector self)"""
        return _ghh.PlayerInitVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::iterator pos) -> std::vector< enum ghh::PlayerInitNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::PlayerInitNS::Value >::iterator

        erase(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::iterator first, std::vector< enum ghh::PlayerInitNS::Value >::iterator last) -> std::vector< enum ghh::PlayerInitNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::PlayerInitNS::Value >::iterator
        last: std::vector< enum ghh::PlayerInitNS::Value >::iterator

        """
        return _ghh.PlayerInitVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PlayerInitVector self) -> PlayerInitVector
        __init__(PlayerInitVector self, PlayerInitVector other) -> PlayerInitVector

        Parameters
        ----------
        other: std::vector< ghh::PlayerInitNS::Value > const &

        __init__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type size) -> PlayerInitVector

        Parameters
        ----------
        size: std::vector< enum ghh::PlayerInitNS::Value >::size_type

        __init__(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type size, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & value) -> PlayerInitVector

        Parameters
        ----------
        size: std::vector< enum ghh::PlayerInitNS::Value >::size_type
        value: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        _ghh.PlayerInitVector_swiginit(self, _ghh.new_PlayerInitVector(*args))

    def push_back(self, x):
        r"""
        push_back(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector_push_back(self, x)

    def front(self):
        r"""front(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::value_type const &"""
        return _ghh.PlayerInitVector_front(self)

    def back(self):
        r"""back(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::value_type const &"""
        return _ghh.PlayerInitVector_back(self)

    def assign(self, n, x):
        r"""
        assign(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type n, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::PlayerInitNS::Value >::size_type
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::PlayerInitNS::Value >::size_type

        resize(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type new_size, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::PlayerInitNS::Value >::size_type
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::iterator pos, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x) -> std::vector< enum ghh::PlayerInitNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::PlayerInitNS::Value >::iterator
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        insert(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::iterator pos, std::vector< enum ghh::PlayerInitNS::Value >::size_type n, std::vector< enum ghh::PlayerInitNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::PlayerInitNS::Value >::iterator
        n: std::vector< enum ghh::PlayerInitNS::Value >::size_type
        x: std::vector< enum ghh::PlayerInitNS::Value >::value_type const &

        """
        return _ghh.PlayerInitVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(PlayerInitVector self, std::vector< enum ghh::PlayerInitNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::PlayerInitNS::Value >::size_type

        """
        return _ghh.PlayerInitVector_reserve(self, n)

    def capacity(self):
        r"""capacity(PlayerInitVector self) -> std::vector< enum ghh::PlayerInitNS::Value >::size_type"""
        return _ghh.PlayerInitVector_capacity(self)
    __swig_destroy__ = _ghh.delete_PlayerInitVector

# Register PlayerInitVector in _ghh:
_ghh.PlayerInitVector_swigregister(PlayerInitVector)

class SummonColorVector(object):
    r"""Proxy of C++ std::vector< ghh::SummonColorNS::Value > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SummonColorVector self) -> SwigPyIterator"""
        return _ghh.SummonColorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SummonColorVector self) -> bool"""
        return _ghh.SummonColorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SummonColorVector self) -> bool"""
        return _ghh.SummonColorVector___bool__(self)

    def __len__(self):
        r"""__len__(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::size_type"""
        return _ghh.SummonColorVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i, std::vector< enum ghh::SummonColorNS::Value >::difference_type j) -> SummonColorVector

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        j: std::vector< enum ghh::SummonColorNS::Value >::difference_type

        """
        return _ghh.SummonColorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i, std::vector< enum ghh::SummonColorNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        j: std::vector< enum ghh::SummonColorNS::Value >::difference_type

        __setslice__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i, std::vector< enum ghh::SummonColorNS::Value >::difference_type j, SummonColorVector v)

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        j: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        v: std::vector< ghh::SummonColorNS::Value,std::allocator< ghh::SummonColorNS::Value > > const &

        """
        return _ghh.SummonColorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i, std::vector< enum ghh::SummonColorNS::Value >::difference_type j)

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        j: std::vector< enum ghh::SummonColorNS::Value >::difference_type

        """
        return _ghh.SummonColorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i)

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type

        __delitem__(SummonColorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.SummonColorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(SummonColorVector self, PySliceObject * slice) -> SummonColorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i) -> std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type

        """
        return _ghh.SummonColorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(SummonColorVector self, PySliceObject * slice, SummonColorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::SummonColorNS::Value,std::allocator< ghh::SummonColorNS::Value > > const &

        __setitem__(SummonColorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::difference_type i, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        i: std::vector< enum ghh::SummonColorNS::Value >::difference_type
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::value_type"""
        return _ghh.SummonColorVector_pop(self)

    def append(self, x):
        r"""
        append(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector_append(self, x)

    def empty(self):
        r"""empty(SummonColorVector self) -> bool"""
        return _ghh.SummonColorVector_empty(self)

    def size(self):
        r"""size(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::size_type"""
        return _ghh.SummonColorVector_size(self)

    def swap(self, v):
        r"""
        swap(SummonColorVector self, SummonColorVector v)

        Parameters
        ----------
        v: std::vector< ghh::SummonColorNS::Value > &

        """
        return _ghh.SummonColorVector_swap(self, v)

    def begin(self):
        r"""begin(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::iterator"""
        return _ghh.SummonColorVector_begin(self)

    def end(self):
        r"""end(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::iterator"""
        return _ghh.SummonColorVector_end(self)

    def rbegin(self):
        r"""rbegin(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::reverse_iterator"""
        return _ghh.SummonColorVector_rbegin(self)

    def rend(self):
        r"""rend(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::reverse_iterator"""
        return _ghh.SummonColorVector_rend(self)

    def clear(self):
        r"""clear(SummonColorVector self)"""
        return _ghh.SummonColorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::allocator_type"""
        return _ghh.SummonColorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(SummonColorVector self)"""
        return _ghh.SummonColorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::iterator pos) -> std::vector< enum ghh::SummonColorNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::SummonColorNS::Value >::iterator

        erase(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::iterator first, std::vector< enum ghh::SummonColorNS::Value >::iterator last) -> std::vector< enum ghh::SummonColorNS::Value >::iterator

        Parameters
        ----------
        first: std::vector< enum ghh::SummonColorNS::Value >::iterator
        last: std::vector< enum ghh::SummonColorNS::Value >::iterator

        """
        return _ghh.SummonColorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SummonColorVector self) -> SummonColorVector
        __init__(SummonColorVector self, SummonColorVector other) -> SummonColorVector

        Parameters
        ----------
        other: std::vector< ghh::SummonColorNS::Value > const &

        __init__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type size) -> SummonColorVector

        Parameters
        ----------
        size: std::vector< enum ghh::SummonColorNS::Value >::size_type

        __init__(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type size, std::vector< enum ghh::SummonColorNS::Value >::value_type const & value) -> SummonColorVector

        Parameters
        ----------
        size: std::vector< enum ghh::SummonColorNS::Value >::size_type
        value: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        _ghh.SummonColorVector_swiginit(self, _ghh.new_SummonColorVector(*args))

    def push_back(self, x):
        r"""
        push_back(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector_push_back(self, x)

    def front(self):
        r"""front(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::value_type const &"""
        return _ghh.SummonColorVector_front(self)

    def back(self):
        r"""back(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::value_type const &"""
        return _ghh.SummonColorVector_back(self)

    def assign(self, n, x):
        r"""
        assign(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type n, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        n: std::vector< enum ghh::SummonColorNS::Value >::size_type
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< enum ghh::SummonColorNS::Value >::size_type

        resize(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type new_size, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< enum ghh::SummonColorNS::Value >::size_type
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::iterator pos, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x) -> std::vector< enum ghh::SummonColorNS::Value >::iterator

        Parameters
        ----------
        pos: std::vector< enum ghh::SummonColorNS::Value >::iterator
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        insert(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::iterator pos, std::vector< enum ghh::SummonColorNS::Value >::size_type n, std::vector< enum ghh::SummonColorNS::Value >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< enum ghh::SummonColorNS::Value >::iterator
        n: std::vector< enum ghh::SummonColorNS::Value >::size_type
        x: std::vector< enum ghh::SummonColorNS::Value >::value_type const &

        """
        return _ghh.SummonColorVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(SummonColorVector self, std::vector< enum ghh::SummonColorNS::Value >::size_type n)

        Parameters
        ----------
        n: std::vector< enum ghh::SummonColorNS::Value >::size_type

        """
        return _ghh.SummonColorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(SummonColorVector self) -> std::vector< enum ghh::SummonColorNS::Value >::size_type"""
        return _ghh.SummonColorVector_capacity(self)
    __swig_destroy__ = _ghh.delete_SummonColorVector

# Register SummonColorVector in _ghh:
_ghh.SummonColorVector_swigregister(SummonColorVector)

class ActorVector(object):
    r"""Proxy of C++ std::vector< ghh::Actor > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ActorVector self) -> SwigPyIterator"""
        return _ghh.ActorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ActorVector self) -> bool"""
        return _ghh.ActorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ActorVector self) -> bool"""
        return _ghh.ActorVector___bool__(self)

    def __len__(self):
        r"""__len__(ActorVector self) -> std::vector< ghh::Actor >::size_type"""
        return _ghh.ActorVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ActorVector self, std::vector< ghh::Actor >::difference_type i, std::vector< ghh::Actor >::difference_type j) -> ActorVector

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type
        j: std::vector< ghh::Actor >::difference_type

        """
        return _ghh.ActorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ActorVector self, std::vector< ghh::Actor >::difference_type i, std::vector< ghh::Actor >::difference_type j)

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type
        j: std::vector< ghh::Actor >::difference_type

        __setslice__(ActorVector self, std::vector< ghh::Actor >::difference_type i, std::vector< ghh::Actor >::difference_type j, ActorVector v)

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type
        j: std::vector< ghh::Actor >::difference_type
        v: std::vector< ghh::Actor,std::allocator< ghh::Actor > > const &

        """
        return _ghh.ActorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ActorVector self, std::vector< ghh::Actor >::difference_type i, std::vector< ghh::Actor >::difference_type j)

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type
        j: std::vector< ghh::Actor >::difference_type

        """
        return _ghh.ActorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ActorVector self, std::vector< ghh::Actor >::difference_type i)

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type

        __delitem__(ActorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.ActorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ActorVector self, PySliceObject * slice) -> ActorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ActorVector self, std::vector< ghh::Actor >::difference_type i) -> Actor

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type

        """
        return _ghh.ActorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ActorVector self, PySliceObject * slice, ActorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::Actor,std::allocator< ghh::Actor > > const &

        __setitem__(ActorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ActorVector self, std::vector< ghh::Actor >::difference_type i, Actor x)

        Parameters
        ----------
        i: std::vector< ghh::Actor >::difference_type
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ActorVector self) -> Actor"""
        return _ghh.ActorVector_pop(self)

    def append(self, x):
        r"""
        append(ActorVector self, Actor x)

        Parameters
        ----------
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector_append(self, x)

    def empty(self):
        r"""empty(ActorVector self) -> bool"""
        return _ghh.ActorVector_empty(self)

    def size(self):
        r"""size(ActorVector self) -> std::vector< ghh::Actor >::size_type"""
        return _ghh.ActorVector_size(self)

    def swap(self, v):
        r"""
        swap(ActorVector self, ActorVector v)

        Parameters
        ----------
        v: std::vector< ghh::Actor > &

        """
        return _ghh.ActorVector_swap(self, v)

    def begin(self):
        r"""begin(ActorVector self) -> std::vector< ghh::Actor >::iterator"""
        return _ghh.ActorVector_begin(self)

    def end(self):
        r"""end(ActorVector self) -> std::vector< ghh::Actor >::iterator"""
        return _ghh.ActorVector_end(self)

    def rbegin(self):
        r"""rbegin(ActorVector self) -> std::vector< ghh::Actor >::reverse_iterator"""
        return _ghh.ActorVector_rbegin(self)

    def rend(self):
        r"""rend(ActorVector self) -> std::vector< ghh::Actor >::reverse_iterator"""
        return _ghh.ActorVector_rend(self)

    def clear(self):
        r"""clear(ActorVector self)"""
        return _ghh.ActorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ActorVector self) -> std::vector< ghh::Actor >::allocator_type"""
        return _ghh.ActorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ActorVector self)"""
        return _ghh.ActorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ActorVector self, std::vector< ghh::Actor >::iterator pos) -> std::vector< ghh::Actor >::iterator

        Parameters
        ----------
        pos: std::vector< ghh::Actor >::iterator

        erase(ActorVector self, std::vector< ghh::Actor >::iterator first, std::vector< ghh::Actor >::iterator last) -> std::vector< ghh::Actor >::iterator

        Parameters
        ----------
        first: std::vector< ghh::Actor >::iterator
        last: std::vector< ghh::Actor >::iterator

        """
        return _ghh.ActorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ActorVector self) -> ActorVector
        __init__(ActorVector self, ActorVector other) -> ActorVector

        Parameters
        ----------
        other: std::vector< ghh::Actor > const &

        __init__(ActorVector self, std::vector< ghh::Actor >::size_type size) -> ActorVector

        Parameters
        ----------
        size: std::vector< ghh::Actor >::size_type

        __init__(ActorVector self, std::vector< ghh::Actor >::size_type size, Actor value) -> ActorVector

        Parameters
        ----------
        size: std::vector< ghh::Actor >::size_type
        value: std::vector< ghh::Actor >::value_type const &

        """
        _ghh.ActorVector_swiginit(self, _ghh.new_ActorVector(*args))

    def push_back(self, x):
        r"""
        push_back(ActorVector self, Actor x)

        Parameters
        ----------
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector_push_back(self, x)

    def front(self):
        r"""front(ActorVector self) -> Actor"""
        return _ghh.ActorVector_front(self)

    def back(self):
        r"""back(ActorVector self) -> Actor"""
        return _ghh.ActorVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ActorVector self, std::vector< ghh::Actor >::size_type n, Actor x)

        Parameters
        ----------
        n: std::vector< ghh::Actor >::size_type
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ActorVector self, std::vector< ghh::Actor >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< ghh::Actor >::size_type

        resize(ActorVector self, std::vector< ghh::Actor >::size_type new_size, Actor x)

        Parameters
        ----------
        new_size: std::vector< ghh::Actor >::size_type
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ActorVector self, std::vector< ghh::Actor >::iterator pos, Actor x) -> std::vector< ghh::Actor >::iterator

        Parameters
        ----------
        pos: std::vector< ghh::Actor >::iterator
        x: std::vector< ghh::Actor >::value_type const &

        insert(ActorVector self, std::vector< ghh::Actor >::iterator pos, std::vector< ghh::Actor >::size_type n, Actor x)

        Parameters
        ----------
        pos: std::vector< ghh::Actor >::iterator
        n: std::vector< ghh::Actor >::size_type
        x: std::vector< ghh::Actor >::value_type const &

        """
        return _ghh.ActorVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ActorVector self, std::vector< ghh::Actor >::size_type n)

        Parameters
        ----------
        n: std::vector< ghh::Actor >::size_type

        """
        return _ghh.ActorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ActorVector self) -> std::vector< ghh::Actor >::size_type"""
        return _ghh.ActorVector_capacity(self)
    __swig_destroy__ = _ghh.delete_ActorVector

# Register ActorVector in _ghh:
_ghh.ActorVector_swigregister(ActorVector)

class MonsterInstanceVector(object):
    r"""Proxy of C++ std::vector< ghh::MonsterInstance > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MonsterInstanceVector self) -> SwigPyIterator"""
        return _ghh.MonsterInstanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MonsterInstanceVector self) -> bool"""
        return _ghh.MonsterInstanceVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MonsterInstanceVector self) -> bool"""
        return _ghh.MonsterInstanceVector___bool__(self)

    def __len__(self):
        r"""__len__(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::size_type"""
        return _ghh.MonsterInstanceVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i, std::vector< ghh::MonsterInstance >::difference_type j) -> MonsterInstanceVector

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type
        j: std::vector< ghh::MonsterInstance >::difference_type

        """
        return _ghh.MonsterInstanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i, std::vector< ghh::MonsterInstance >::difference_type j)

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type
        j: std::vector< ghh::MonsterInstance >::difference_type

        __setslice__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i, std::vector< ghh::MonsterInstance >::difference_type j, MonsterInstanceVector v)

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type
        j: std::vector< ghh::MonsterInstance >::difference_type
        v: std::vector< ghh::MonsterInstance,std::allocator< ghh::MonsterInstance > > const &

        """
        return _ghh.MonsterInstanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i, std::vector< ghh::MonsterInstance >::difference_type j)

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type
        j: std::vector< ghh::MonsterInstance >::difference_type

        """
        return _ghh.MonsterInstanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i)

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type

        __delitem__(MonsterInstanceVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ghh.MonsterInstanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(MonsterInstanceVector self, PySliceObject * slice) -> MonsterInstanceVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i) -> MonsterInstance

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type

        """
        return _ghh.MonsterInstanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(MonsterInstanceVector self, PySliceObject * slice, MonsterInstanceVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ghh::MonsterInstance,std::allocator< ghh::MonsterInstance > > const &

        __setitem__(MonsterInstanceVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::difference_type i, MonsterInstance x)

        Parameters
        ----------
        i: std::vector< ghh::MonsterInstance >::difference_type
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector___setitem__(self, *args)

    def pop(self):
        r"""pop(MonsterInstanceVector self) -> MonsterInstance"""
        return _ghh.MonsterInstanceVector_pop(self)

    def append(self, x):
        r"""
        append(MonsterInstanceVector self, MonsterInstance x)

        Parameters
        ----------
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector_append(self, x)

    def empty(self):
        r"""empty(MonsterInstanceVector self) -> bool"""
        return _ghh.MonsterInstanceVector_empty(self)

    def size(self):
        r"""size(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::size_type"""
        return _ghh.MonsterInstanceVector_size(self)

    def swap(self, v):
        r"""
        swap(MonsterInstanceVector self, MonsterInstanceVector v)

        Parameters
        ----------
        v: std::vector< ghh::MonsterInstance > &

        """
        return _ghh.MonsterInstanceVector_swap(self, v)

    def begin(self):
        r"""begin(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::iterator"""
        return _ghh.MonsterInstanceVector_begin(self)

    def end(self):
        r"""end(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::iterator"""
        return _ghh.MonsterInstanceVector_end(self)

    def rbegin(self):
        r"""rbegin(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::reverse_iterator"""
        return _ghh.MonsterInstanceVector_rbegin(self)

    def rend(self):
        r"""rend(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::reverse_iterator"""
        return _ghh.MonsterInstanceVector_rend(self)

    def clear(self):
        r"""clear(MonsterInstanceVector self)"""
        return _ghh.MonsterInstanceVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::allocator_type"""
        return _ghh.MonsterInstanceVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(MonsterInstanceVector self)"""
        return _ghh.MonsterInstanceVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::iterator pos) -> std::vector< ghh::MonsterInstance >::iterator

        Parameters
        ----------
        pos: std::vector< ghh::MonsterInstance >::iterator

        erase(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::iterator first, std::vector< ghh::MonsterInstance >::iterator last) -> std::vector< ghh::MonsterInstance >::iterator

        Parameters
        ----------
        first: std::vector< ghh::MonsterInstance >::iterator
        last: std::vector< ghh::MonsterInstance >::iterator

        """
        return _ghh.MonsterInstanceVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MonsterInstanceVector self) -> MonsterInstanceVector
        __init__(MonsterInstanceVector self, MonsterInstanceVector other) -> MonsterInstanceVector

        Parameters
        ----------
        other: std::vector< ghh::MonsterInstance > const &

        __init__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type size) -> MonsterInstanceVector

        Parameters
        ----------
        size: std::vector< ghh::MonsterInstance >::size_type

        __init__(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type size, MonsterInstance value) -> MonsterInstanceVector

        Parameters
        ----------
        size: std::vector< ghh::MonsterInstance >::size_type
        value: std::vector< ghh::MonsterInstance >::value_type const &

        """
        _ghh.MonsterInstanceVector_swiginit(self, _ghh.new_MonsterInstanceVector(*args))

    def push_back(self, x):
        r"""
        push_back(MonsterInstanceVector self, MonsterInstance x)

        Parameters
        ----------
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector_push_back(self, x)

    def front(self):
        r"""front(MonsterInstanceVector self) -> MonsterInstance"""
        return _ghh.MonsterInstanceVector_front(self)

    def back(self):
        r"""back(MonsterInstanceVector self) -> MonsterInstance"""
        return _ghh.MonsterInstanceVector_back(self)

    def assign(self, n, x):
        r"""
        assign(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type n, MonsterInstance x)

        Parameters
        ----------
        n: std::vector< ghh::MonsterInstance >::size_type
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< ghh::MonsterInstance >::size_type

        resize(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type new_size, MonsterInstance x)

        Parameters
        ----------
        new_size: std::vector< ghh::MonsterInstance >::size_type
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::iterator pos, MonsterInstance x) -> std::vector< ghh::MonsterInstance >::iterator

        Parameters
        ----------
        pos: std::vector< ghh::MonsterInstance >::iterator
        x: std::vector< ghh::MonsterInstance >::value_type const &

        insert(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::iterator pos, std::vector< ghh::MonsterInstance >::size_type n, MonsterInstance x)

        Parameters
        ----------
        pos: std::vector< ghh::MonsterInstance >::iterator
        n: std::vector< ghh::MonsterInstance >::size_type
        x: std::vector< ghh::MonsterInstance >::value_type const &

        """
        return _ghh.MonsterInstanceVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(MonsterInstanceVector self, std::vector< ghh::MonsterInstance >::size_type n)

        Parameters
        ----------
        n: std::vector< ghh::MonsterInstance >::size_type

        """
        return _ghh.MonsterInstanceVector_reserve(self, n)

    def capacity(self):
        r"""capacity(MonsterInstanceVector self) -> std::vector< ghh::MonsterInstance >::size_type"""
        return _ghh.MonsterInstanceVector_capacity(self)
    __swig_destroy__ = _ghh.delete_MonsterInstanceVector

# Register MonsterInstanceVector in _ghh:
_ghh.MonsterInstanceVector_swigregister(MonsterInstanceVector)

class MonsterAbilityDeckLookupMap(object):
    r"""Proxy of C++ std::map< int,ghh::MonsterAbilityDeck > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MonsterAbilityDeckLookupMap self) -> SwigPyIterator"""
        return _ghh.MonsterAbilityDeckLookupMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MonsterAbilityDeckLookupMap self) -> bool"""
        return _ghh.MonsterAbilityDeckLookupMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MonsterAbilityDeckLookupMap self) -> bool"""
        return _ghh.MonsterAbilityDeckLookupMap___bool__(self)

    def __len__(self):
        r"""__len__(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::size_type"""
        return _ghh.MonsterAbilityDeckLookupMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key) -> MonsterAbilityDeck

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap_has_key(self, key)

    def keys(self):
        r"""keys(MonsterAbilityDeckLookupMap self) -> PyObject *"""
        return _ghh.MonsterAbilityDeckLookupMap_keys(self)

    def values(self):
        r"""values(MonsterAbilityDeckLookupMap self) -> PyObject *"""
        return _ghh.MonsterAbilityDeckLookupMap_values(self)

    def items(self):
        r"""items(MonsterAbilityDeckLookupMap self) -> PyObject *"""
        return _ghh.MonsterAbilityDeckLookupMap_items(self)

    def __contains__(self, key):
        r"""
        __contains__(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(MonsterAbilityDeckLookupMap self) -> SwigPyIterator"""
        return _ghh.MonsterAbilityDeckLookupMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(MonsterAbilityDeckLookupMap self) -> SwigPyIterator"""
        return _ghh.MonsterAbilityDeckLookupMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        __setitem__(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & key, MonsterAbilityDeck x)

        Parameters
        ----------
        key: std::map< int,ghh::MonsterAbilityDeck >::key_type const &
        x: std::map< int,ghh::MonsterAbilityDeck >::mapped_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(MonsterAbilityDeckLookupMap self) -> PyObject *"""
        return _ghh.MonsterAbilityDeckLookupMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(MonsterAbilityDeckLookupMap self, std::less< int > const & other) -> MonsterAbilityDeckLookupMap

        Parameters
        ----------
        other: std::less< int > const &

        __init__(MonsterAbilityDeckLookupMap self) -> MonsterAbilityDeckLookupMap
        __init__(MonsterAbilityDeckLookupMap self, MonsterAbilityDeckLookupMap other) -> MonsterAbilityDeckLookupMap

        Parameters
        ----------
        other: std::map< int,ghh::MonsterAbilityDeck > const &

        """
        _ghh.MonsterAbilityDeckLookupMap_swiginit(self, _ghh.new_MonsterAbilityDeckLookupMap(*args))

    def empty(self):
        r"""empty(MonsterAbilityDeckLookupMap self) -> bool"""
        return _ghh.MonsterAbilityDeckLookupMap_empty(self)

    def size(self):
        r"""size(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::size_type"""
        return _ghh.MonsterAbilityDeckLookupMap_size(self)

    def swap(self, v):
        r"""
        swap(MonsterAbilityDeckLookupMap self, MonsterAbilityDeckLookupMap v)

        Parameters
        ----------
        v: std::map< int,ghh::MonsterAbilityDeck > &

        """
        return _ghh.MonsterAbilityDeckLookupMap_swap(self, v)

    def begin(self):
        r"""begin(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::iterator"""
        return _ghh.MonsterAbilityDeckLookupMap_begin(self)

    def end(self):
        r"""end(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::iterator"""
        return _ghh.MonsterAbilityDeckLookupMap_end(self)

    def rbegin(self):
        r"""rbegin(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::reverse_iterator"""
        return _ghh.MonsterAbilityDeckLookupMap_rbegin(self)

    def rend(self):
        r"""rend(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::reverse_iterator"""
        return _ghh.MonsterAbilityDeckLookupMap_rend(self)

    def clear(self):
        r"""clear(MonsterAbilityDeckLookupMap self)"""
        return _ghh.MonsterAbilityDeckLookupMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(MonsterAbilityDeckLookupMap self) -> std::map< int,ghh::MonsterAbilityDeck >::allocator_type"""
        return _ghh.MonsterAbilityDeckLookupMap_get_allocator(self)

    def count(self, x):
        r"""
        count(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & x) -> std::map< int,ghh::MonsterAbilityDeck >::size_type

        Parameters
        ----------
        x: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & x) -> std::map< int,ghh::MonsterAbilityDeck >::size_type

        Parameters
        ----------
        x: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        erase(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::iterator position)

        Parameters
        ----------
        position: std::map< int,ghh::MonsterAbilityDeck >::iterator

        erase(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::iterator first, std::map< int,ghh::MonsterAbilityDeck >::iterator last)

        Parameters
        ----------
        first: std::map< int,ghh::MonsterAbilityDeck >::iterator
        last: std::map< int,ghh::MonsterAbilityDeck >::iterator

        """
        return _ghh.MonsterAbilityDeckLookupMap_erase(self, *args)

    def find(self, x):
        r"""
        find(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & x) -> std::map< int,ghh::MonsterAbilityDeck >::iterator

        Parameters
        ----------
        x: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & x) -> std::map< int,ghh::MonsterAbilityDeck >::iterator

        Parameters
        ----------
        x: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(MonsterAbilityDeckLookupMap self, std::map< int,ghh::MonsterAbilityDeck >::key_type const & x) -> std::map< int,ghh::MonsterAbilityDeck >::iterator

        Parameters
        ----------
        x: std::map< int,ghh::MonsterAbilityDeck >::key_type const &

        """
        return _ghh.MonsterAbilityDeckLookupMap_upper_bound(self, x)
    __swig_destroy__ = _ghh.delete_MonsterAbilityDeckLookupMap

# Register MonsterAbilityDeckLookupMap in _ghh:
_ghh.MonsterAbilityDeckLookupMap_swigregister(MonsterAbilityDeckLookupMap)



