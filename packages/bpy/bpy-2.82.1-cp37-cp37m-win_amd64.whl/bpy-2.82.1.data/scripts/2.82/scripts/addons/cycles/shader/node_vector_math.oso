OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -O2 -IC:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders -o C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/build/intern/cycles/kernel/shaders/node_vector_math.oso
shader node_vector_math
param	string	type	"add"		%read{0,124} %write{2147483647,-1}
param	vector	Vector1	0 0 0		%read{2,126} %write{2147483647,-1}
param	vector	Vector2	0 0 0		%read{2,126} %write{2147483647,-1}
param	float	Scale	1		%read{68,68} %write{2147483647,-1}
oparam	float	Value	0		%read{2147483647,-1} %write{59,65}
oparam	vector	Vector	0 0 0		%read{2147483647,-1} %write{2,126}
local	float	___671_lenSquared	%read{42,45} %write{41,41}
const	string	$const1	"add"		%read{0,0} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const2	"subtract"		%read{3,3} %write{2147483647,-1}
temp	int	$tmp2	%read{4,4} %write{3,3}
const	string	$const3	"multiply"		%read{6,6} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
const	string	$const4	"divide"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp4	%read{10,10} %write{9,9}
const	string	$const5	"safe_divide"		%read{11,75} %write{2147483647,-1}
temp	float	$tmp5	%read{33,33} %write{17,18}
const	int	$const6	0		%read{12,80} %write{2147483647,-1}
temp	float	$tmp6	%read{13,13} %write{12,12}
const	float	$const7	0		%read{13,96} %write{2147483647,-1}
temp	int	$tmp7	%read{14,14} %write{13,13}
temp	float	$tmp8	%read{17,17} %write{15,15}
temp	float	$tmp9	%read{17,17} %write{16,16}
temp	float	$tmp10	%read{33,33} %write{24,25}
const	int	$const8	1		%read{19,87} %write{2147483647,-1}
temp	float	$tmp11	%read{20,20} %write{19,19}
temp	int	$tmp12	%read{21,21} %write{20,20}
temp	float	$tmp13	%read{24,24} %write{22,22}
temp	float	$tmp14	%read{24,24} %write{23,23}
temp	float	$tmp15	%read{33,33} %write{31,32}
const	int	$const9	2		%read{26,94} %write{2147483647,-1}
temp	float	$tmp16	%read{27,27} %write{26,26}
temp	int	$tmp17	%read{28,28} %write{27,27}
temp	float	$tmp18	%read{31,31} %write{29,29}
temp	float	$tmp19	%read{31,31} %write{30,30}
const	string	$const10	"cross_product"		%read{35,35} %write{2147483647,-1}
temp	int	$tmp20	%read{36,36} %write{35,35}
const	string	$const11	"project"		%read{38,40} %write{2147483647,-1}
temp	int	$tmp21	%read{39,39} %write{38,38}
temp	int	$tmp22	%read{43,43} %write{42,42}
temp	float	$tmp23	%read{45,45} %write{44,44}
temp	float	$tmp24	%read{46,46} %write{45,45}
const	vector	$const12	0 0 0		%read{47,47} %write{2147483647,-1}
const	string	$const13	"reflect"		%read{49,52} %write{2147483647,-1}
temp	int	$tmp25	%read{50,50} %write{49,49}
temp	vector	$tmp26	%read{53,55} %write{51,51}
temp	float	$tmp27	%read{54,54} %write{53,53}
temp	float	$tmp28	%read{55,55} %write{54,54}
const	float	$const14	2		%read{54,54} %write{2147483647,-1}
temp	vector	$tmp29	%read{56,56} %write{55,55}
const	string	$const15	"dot_product"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp30	%read{58,58} %write{57,57}
const	string	$const16	"distance"		%read{60,60} %write{2147483647,-1}
temp	int	$tmp31	%read{61,61} %write{60,60}
const	string	$const17	"length"		%read{63,63} %write{2147483647,-1}
temp	int	$tmp32	%read{64,64} %write{63,63}
const	string	$const18	"scale"		%read{66,66} %write{2147483647,-1}
temp	int	$tmp33	%read{67,67} %write{66,66}
const	string	$const19	"normalize"		%read{69,69} %write{2147483647,-1}
temp	int	$tmp34	%read{70,70} %write{69,69}
const	string	$const20	"snap"		%read{72,74} %write{2147483647,-1}
temp	int	$tmp35	%read{73,73} %write{72,72}
temp	vector	$tmp36	%read{100,100} %write{99,99}
temp	vector	$tmp37	%read{99,99} %write{97,97}
temp	float	$tmp38	%read{97,97} %write{81,82}
temp	float	$tmp39	%read{77,77} %write{76,76}
temp	int	$tmp40	%read{78,78} %write{77,77}
temp	float	$tmp41	%read{81,81} %write{79,79}
temp	float	$tmp42	%read{81,81} %write{80,80}
temp	float	$tmp43	%read{97,97} %write{88,89}
temp	float	$tmp44	%read{84,84} %write{83,83}
temp	int	$tmp45	%read{85,85} %write{84,84}
temp	float	$tmp46	%read{88,88} %write{86,86}
temp	float	$tmp47	%read{88,88} %write{87,87}
temp	float	$tmp48	%read{97,97} %write{95,96}
temp	float	$tmp49	%read{91,91} %write{90,90}
temp	int	$tmp50	%read{92,92} %write{91,91}
temp	float	$tmp51	%read{95,95} %write{93,93}
temp	float	$tmp52	%read{95,95} %write{94,94}
const	string	$const21	"floor"		%read{101,101} %write{2147483647,-1}
temp	int	$tmp53	%read{102,102} %write{101,101}
const	string	$const22	"ceil"		%read{104,104} %write{2147483647,-1}
temp	int	$tmp54	%read{105,105} %write{104,104}
const	string	$const23	"modulo"		%read{107,107} %write{2147483647,-1}
temp	int	$tmp55	%read{108,108} %write{107,107}
const	string	$const24	"mod"		%read{109,109} %write{2147483647,-1}
temp	vector	$tmp56	%read{112,112} %write{111,111}
temp	vector	$tmp57	%read{111,111} %write{110,110}
temp	vector	$tmp58	%read{113,113} %write{112,112}
const	string	$const25	"fraction"		%read{114,114} %write{2147483647,-1}
temp	int	$tmp59	%read{115,115} %write{114,114}
temp	vector	$tmp60	%read{117,117} %write{116,116}
const	string	$const26	"absolute"		%read{118,118} %write{2147483647,-1}
temp	int	$tmp61	%read{119,119} %write{118,118}
const	string	$const27	"minimum"		%read{121,121} %write{2147483647,-1}
temp	int	$tmp62	%read{122,122} %write{121,121}
const	string	$const28	"maximum"		%read{124,124} %write{2147483647,-1}
temp	int	$tmp63	%read{125,125} %write{124,124}
const	string	$const29	"%s"		%read{127,127} %write{2147483647,-1}
const	string	$const30	"Unknown vector math operator!"		%read{127,127} %write{2147483647,-1}
code ___main___
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:49
#   if (type == "add") {
	eq		$tmp1 type $const1 	%filename{"C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl"} %line{49} %argrw{"wrr"}
	if		$tmp1 3 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:50
#     Vector = Vector1 + Vector2;
	add		Vector Vector1 Vector2 	%line{50} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:52
#   else if (type == "subtract") {
	eq		$tmp2 type $const2 	%line{52} %argrw{"wrr"}
	if		$tmp2 6 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:53
#     Vector = Vector1 - Vector2;
	sub		Vector Vector1 Vector2 	%line{53} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:55
#   else if (type == "multiply") {
	eq		$tmp3 type $const3 	%line{55} %argrw{"wrr"}
	if		$tmp3 9 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:56
#     Vector = Vector1 * Vector2;
	mul		Vector Vector1 Vector2 	%line{56} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:58
#   else if (type == "divide") {
	eq		$tmp4 type $const4 	%line{58} %argrw{"wrr"}
	if		$tmp4 35 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:59
#     Vector = safe_divide(Vector1, Vector2);
	functioncall	$const5 35 	%line{59} %argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:26
#   return vector((b[0] != 0.0) ? a[0] / b[0] : 0.0,
	compref		$tmp6 Vector2 $const6 	%line{26} %argrw{"wrr"}
	neq		$tmp7 $tmp6 $const7 	%argrw{"wrr"}
	if		$tmp7 18 19 	%argrw{"r"}
	compref		$tmp8 Vector1 $const6 	%argrw{"wrr"}
	compref		$tmp9 Vector2 $const6 	%argrw{"wrr"}
	div		$tmp5 $tmp8 $tmp9 	%argrw{"wrr"}
	assign		$tmp5 $const7 	%argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:27
#                 (b[1] != 0.0) ? a[1] / b[1] : 0.0,
	compref		$tmp11 Vector2 $const8 	%line{27} %argrw{"wrr"}
	neq		$tmp12 $tmp11 $const7 	%argrw{"wrr"}
	if		$tmp12 25 26 	%argrw{"r"}
	compref		$tmp13 Vector1 $const8 	%argrw{"wrr"}
	compref		$tmp14 Vector2 $const8 	%argrw{"wrr"}
	div		$tmp10 $tmp13 $tmp14 	%argrw{"wrr"}
	assign		$tmp10 $const7 	%argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:28
#                 (b[2] != 0.0) ? a[2] / b[2] : 0.0);
	compref		$tmp16 Vector2 $const9 	%line{28} %argrw{"wrr"}
	neq		$tmp17 $tmp16 $const7 	%argrw{"wrr"}
	if		$tmp17 32 33 	%argrw{"r"}
	compref		$tmp18 Vector1 $const9 	%argrw{"wrr"}
	compref		$tmp19 Vector2 $const9 	%argrw{"wrr"}
	div		$tmp15 $tmp18 $tmp19 	%argrw{"wrr"}
	assign		$tmp15 $const7 	%argrw{"wr"}
	vector		Vector $tmp5 $tmp10 $tmp15 	%argrw{"wrrr"}
	return
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:61
#   else if (type == "cross_product") {
	eq		$tmp20 type $const10 	%line{61} %argrw{"wrr"}
	if		$tmp20 38 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:62
#     Vector = cross(Vector1, Vector2);
	cross		Vector Vector1 Vector2 	%line{62} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:64
#   else if (type == "project") {
	eq		$tmp21 type $const11 	%line{64} %argrw{"wrr"}
	if		$tmp21 49 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:65
#     Vector = project(Vector1, Vector2);
	functioncall	$const11 49 	%line{65} %argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:33
#   float lenSquared = dot(v_proj, v_proj);
	dot		___671_lenSquared Vector2 Vector2 	%line{33} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:34
#   return (lenSquared != 0.0) ? (dot(v, v_proj) / lenSquared) * v_proj : vector(0.0);
	neq		$tmp22 ___671_lenSquared $const7 	%line{34} %argrw{"wrr"}
	if		$tmp22 47 48 	%argrw{"r"}
	dot		$tmp23 Vector1 Vector2 	%argrw{"wrr"}
	div		$tmp24 $tmp23 ___671_lenSquared 	%argrw{"wrr"}
	mul		Vector $tmp24 Vector2 	%argrw{"wrr"}
	assign		Vector $const12 	%argrw{"wr"}
	return
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:67
#   else if (type == "reflect") {
	eq		$tmp25 type $const13 	%line{67} %argrw{"wrr"}
	if		$tmp25 57 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:68
#     Vector = reflect(Vector1, normalize(Vector2));
	normalize	$tmp26 Vector2 	%line{68} %argrw{"wr"}
	functioncall	$const13 57 	%argrw{"r"}
# C:\Users\TGubs\Code\Python\blenderpy\build\temp.win-amd64-3.7\Release\blender\intern\cycles\kernel\shaders\stdosl.h:312
#   return I - 2 * dot(N, I) * N;
	dot		$tmp27 $tmp26 Vector1 	%filename{"C:\Users\TGubs\Code\Python\blenderpy\build\temp.win-amd64-3.7\Release\blender\intern\cycles\kernel\shaders\stdosl.h"} %line{312} %argrw{"wrr"}
	mul		$tmp28 $const14 $tmp27 	%argrw{"wrr"}
	mul		$tmp29 $tmp28 $tmp26 	%argrw{"wrr"}
	sub		Vector Vector1 $tmp29 	%argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:70
#   else if (type == "dot_product") {
	eq		$tmp30 type $const15 	%filename{"C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl"} %line{70} %argrw{"wrr"}
	if		$tmp30 60 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:71
#     Value = dot(Vector1, Vector2);
	dot		Value Vector1 Vector2 	%line{71} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:73
#   else if (type == "distance") {
	eq		$tmp31 type $const16 	%line{73} %argrw{"wrr"}
	if		$tmp31 63 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:74
#     Value = distance(Vector1, Vector2);
	distance	Value Vector1 Vector2 	%line{74} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:76
#   else if (type == "length") {
	eq		$tmp32 type $const17 	%line{76} %argrw{"wrr"}
	if		$tmp32 66 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:77
#     Value = length(Vector1);
	length		Value Vector1 	%line{77} %argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:79
#   else if (type == "scale") {
	eq		$tmp33 type $const18 	%line{79} %argrw{"wrr"}
	if		$tmp33 69 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:80
#     Vector = Vector1 * Scale;
	mul		Vector Vector1 Scale 	%line{80} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:82
#   else if (type == "normalize") {
	eq		$tmp34 type $const19 	%line{82} %argrw{"wrr"}
	if		$tmp34 72 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:83
#     Vector = normalize(Vector1);
	normalize	Vector Vector1 	%line{83} %argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:85
#   else if (type == "snap") {
	eq		$tmp35 type $const20 	%line{85} %argrw{"wrr"}
	if		$tmp35 101 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:86
#     Vector = snap(Vector1, Vector2);
	functioncall	$const20 101 	%line{86} %argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:39
#   return floor(safe_divide(a, b)) * b;
	functioncall	$const5 99 	%line{39} %argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:26
#   return vector((b[0] != 0.0) ? a[0] / b[0] : 0.0,
	compref		$tmp39 Vector2 $const6 	%line{26} %argrw{"wrr"}
	neq		$tmp40 $tmp39 $const7 	%argrw{"wrr"}
	if		$tmp40 82 83 	%argrw{"r"}
	compref		$tmp41 Vector1 $const6 	%argrw{"wrr"}
	compref		$tmp42 Vector2 $const6 	%argrw{"wrr"}
	div		$tmp38 $tmp41 $tmp42 	%argrw{"wrr"}
	assign		$tmp38 $const7 	%argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:27
#                 (b[1] != 0.0) ? a[1] / b[1] : 0.0,
	compref		$tmp44 Vector2 $const8 	%line{27} %argrw{"wrr"}
	neq		$tmp45 $tmp44 $const7 	%argrw{"wrr"}
	if		$tmp45 89 90 	%argrw{"r"}
	compref		$tmp46 Vector1 $const8 	%argrw{"wrr"}
	compref		$tmp47 Vector2 $const8 	%argrw{"wrr"}
	div		$tmp43 $tmp46 $tmp47 	%argrw{"wrr"}
	assign		$tmp43 $const7 	%argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:28
#                 (b[2] != 0.0) ? a[2] / b[2] : 0.0);
	compref		$tmp49 Vector2 $const9 	%line{28} %argrw{"wrr"}
	neq		$tmp50 $tmp49 $const7 	%argrw{"wrr"}
	if		$tmp50 96 97 	%argrw{"r"}
	compref		$tmp51 Vector1 $const9 	%argrw{"wrr"}
	compref		$tmp52 Vector2 $const9 	%argrw{"wrr"}
	div		$tmp48 $tmp51 $tmp52 	%argrw{"wrr"}
	assign		$tmp48 $const7 	%argrw{"wr"}
	vector		$tmp37 $tmp38 $tmp43 $tmp48 	%argrw{"wrrr"}
	return
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:39
#   return floor(safe_divide(a, b)) * b;
	floor		$tmp36 $tmp37 	%line{39} %argrw{"wr"}
	mul		Vector $tmp36 Vector2 	%argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:88
#   else if (type == "floor") {
	eq		$tmp53 type $const21 	%line{88} %argrw{"wrr"}
	if		$tmp53 104 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:89
#     Vector = floor(Vector1);
	floor		Vector Vector1 	%line{89} %argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:91
#   else if (type == "ceil") {
	eq		$tmp54 type $const22 	%line{91} %argrw{"wrr"}
	if		$tmp54 107 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:92
#     Vector = ceil(Vector1);
	ceil		Vector Vector1 	%line{92} %argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:94
#   else if (type == "modulo") {
	eq		$tmp55 type $const23 	%line{94} %argrw{"wrr"}
	if		$tmp55 114 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:95
#     Vector = mod(Vector1, Vector2);
	functioncall	$const24 114 	%line{95} %argrw{"r"}
# C:\Users\TGubs\Code\Python\blenderpy\build\temp.win-amd64-3.7\Release\blender\intern\cycles\kernel\shaders\stdosl.h:179
#   return a - b * floor(a / b);
	div		$tmp57 Vector1 Vector2 	%filename{"C:\Users\TGubs\Code\Python\blenderpy\build\temp.win-amd64-3.7\Release\blender\intern\cycles\kernel\shaders\stdosl.h"} %line{179} %argrw{"wrr"}
	floor		$tmp56 $tmp57 	%argrw{"wr"}
	mul		$tmp58 Vector2 $tmp56 	%argrw{"wrr"}
	sub		Vector Vector1 $tmp58 	%argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:97
#   else if (type == "fraction") {
	eq		$tmp59 type $const25 	%filename{"C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl"} %line{97} %argrw{"wrr"}
	if		$tmp59 118 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:98
#     Vector = Vector1 - floor(Vector1);
	floor		$tmp60 Vector1 	%line{98} %argrw{"wr"}
	sub		Vector Vector1 $tmp60 	%argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:100
#   else if (type == "absolute") {
	eq		$tmp61 type $const26 	%line{100} %argrw{"wrr"}
	if		$tmp61 121 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:101
#     Vector = abs(Vector1);
	abs		Vector Vector1 	%line{101} %argrw{"wr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:103
#   else if (type == "minimum") {
	eq		$tmp62 type $const27 	%line{103} %argrw{"wrr"}
	if		$tmp62 124 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:104
#     Vector = min(Vector1, Vector2);
	min		Vector Vector1 Vector2 	%line{104} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:106
#   else if (type == "maximum") {
	eq		$tmp63 type $const28 	%line{106} %argrw{"wrr"}
	if		$tmp63 127 128 	%argrw{"r"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:107
#     Vector = max(Vector1, Vector2);
	max		Vector Vector1 Vector2 	%line{107} %argrw{"wrr"}
# C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.7/Release/blender/intern/cycles/kernel/shaders/node_vector_math.osl:110
#     warning("%s", "Unknown vector math operator!");
	warning		$const29 $const30 	%line{110} %argrw{"rr"}
	end
