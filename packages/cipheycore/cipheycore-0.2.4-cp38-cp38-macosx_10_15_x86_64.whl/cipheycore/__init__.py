# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ciphey_core_py
else:
    import _ciphey_core_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ciphey_core_py.delete_SwigPyIterator

    def value(self):
        return _ciphey_core_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ciphey_core_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ciphey_core_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ciphey_core_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ciphey_core_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ciphey_core_py.SwigPyIterator_copy(self)

    def next(self):
        return _ciphey_core_py.SwigPyIterator_next(self)

    def __next__(self):
        return _ciphey_core_py.SwigPyIterator___next__(self)

    def previous(self):
        return _ciphey_core_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ciphey_core_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ciphey_core_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ciphey_core_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ciphey_core_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ciphey_core_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ciphey_core_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ciphey_core_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ciphey_core_py:
_ciphey_core_py.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ciphey_core_py.SHARED_PTR_DISOWN
class freq_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.freq_table_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.freq_table___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.freq_table___bool__(self)

    def __len__(self):
        return _ciphey_core_py.freq_table___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ciphey_core_py.freq_table___getitem__(self, key)

    def __delitem__(self, key):
        return _ciphey_core_py.freq_table___delitem__(self, key)

    def has_key(self, key):
        return _ciphey_core_py.freq_table_has_key(self, key)

    def keys(self):
        return _ciphey_core_py.freq_table_keys(self)

    def values(self):
        return _ciphey_core_py.freq_table_values(self)

    def items(self):
        return _ciphey_core_py.freq_table_items(self)

    def __contains__(self, key):
        return _ciphey_core_py.freq_table___contains__(self, key)

    def key_iterator(self):
        return _ciphey_core_py.freq_table_key_iterator(self)

    def value_iterator(self):
        return _ciphey_core_py.freq_table_value_iterator(self)

    def __setitem__(self, *args):
        return _ciphey_core_py.freq_table___setitem__(self, *args)

    def asdict(self):
        return _ciphey_core_py.freq_table_asdict(self)

    def __init__(self, *args):
        _ciphey_core_py.freq_table_swiginit(self, _ciphey_core_py.new_freq_table(*args))

    def empty(self):
        return _ciphey_core_py.freq_table_empty(self)

    def size(self):
        return _ciphey_core_py.freq_table_size(self)

    def swap(self, v):
        return _ciphey_core_py.freq_table_swap(self, v)

    def begin(self):
        return _ciphey_core_py.freq_table_begin(self)

    def end(self):
        return _ciphey_core_py.freq_table_end(self)

    def rbegin(self):
        return _ciphey_core_py.freq_table_rbegin(self)

    def rend(self):
        return _ciphey_core_py.freq_table_rend(self)

    def clear(self):
        return _ciphey_core_py.freq_table_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.freq_table_get_allocator(self)

    def count(self, x):
        return _ciphey_core_py.freq_table_count(self, x)

    def erase(self, *args):
        return _ciphey_core_py.freq_table_erase(self, *args)

    def find(self, x):
        return _ciphey_core_py.freq_table_find(self, x)

    def lower_bound(self, x):
        return _ciphey_core_py.freq_table_lower_bound(self, x)

    def upper_bound(self, x):
        return _ciphey_core_py.freq_table_upper_bound(self, x)
    __swig_destroy__ = _ciphey_core_py.delete_freq_table

# Register freq_table in _ciphey_core_py:
_ciphey_core_py.freq_table_swigregister(freq_table)

class prob_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.prob_table_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.prob_table___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.prob_table___bool__(self)

    def __len__(self):
        return _ciphey_core_py.prob_table___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ciphey_core_py.prob_table___getitem__(self, key)

    def __delitem__(self, key):
        return _ciphey_core_py.prob_table___delitem__(self, key)

    def has_key(self, key):
        return _ciphey_core_py.prob_table_has_key(self, key)

    def keys(self):
        return _ciphey_core_py.prob_table_keys(self)

    def values(self):
        return _ciphey_core_py.prob_table_values(self)

    def items(self):
        return _ciphey_core_py.prob_table_items(self)

    def __contains__(self, key):
        return _ciphey_core_py.prob_table___contains__(self, key)

    def key_iterator(self):
        return _ciphey_core_py.prob_table_key_iterator(self)

    def value_iterator(self):
        return _ciphey_core_py.prob_table_value_iterator(self)

    def __setitem__(self, *args):
        return _ciphey_core_py.prob_table___setitem__(self, *args)

    def asdict(self):
        return _ciphey_core_py.prob_table_asdict(self)

    def __init__(self, *args):
        _ciphey_core_py.prob_table_swiginit(self, _ciphey_core_py.new_prob_table(*args))

    def empty(self):
        return _ciphey_core_py.prob_table_empty(self)

    def size(self):
        return _ciphey_core_py.prob_table_size(self)

    def swap(self, v):
        return _ciphey_core_py.prob_table_swap(self, v)

    def begin(self):
        return _ciphey_core_py.prob_table_begin(self)

    def end(self):
        return _ciphey_core_py.prob_table_end(self)

    def rbegin(self):
        return _ciphey_core_py.prob_table_rbegin(self)

    def rend(self):
        return _ciphey_core_py.prob_table_rend(self)

    def clear(self):
        return _ciphey_core_py.prob_table_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.prob_table_get_allocator(self)

    def count(self, x):
        return _ciphey_core_py.prob_table_count(self, x)

    def erase(self, *args):
        return _ciphey_core_py.prob_table_erase(self, *args)

    def find(self, x):
        return _ciphey_core_py.prob_table_find(self, x)

    def lower_bound(self, x):
        return _ciphey_core_py.prob_table_lower_bound(self, x)

    def upper_bound(self, x):
        return _ciphey_core_py.prob_table_upper_bound(self, x)
    __swig_destroy__ = _ciphey_core_py.delete_prob_table

# Register prob_table in _ciphey_core_py:
_ciphey_core_py.prob_table_swigregister(prob_table)

class group_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.group_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.group_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.group_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.group_t___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.group_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.group_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.group_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.group_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.group_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.group_t___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.group_t_pop(self)

    def append(self, x):
        return _ciphey_core_py.group_t_append(self, x)

    def empty(self):
        return _ciphey_core_py.group_t_empty(self)

    def size(self):
        return _ciphey_core_py.group_t_size(self)

    def swap(self, v):
        return _ciphey_core_py.group_t_swap(self, v)

    def begin(self):
        return _ciphey_core_py.group_t_begin(self)

    def end(self):
        return _ciphey_core_py.group_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.group_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.group_t_rend(self)

    def clear(self):
        return _ciphey_core_py.group_t_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.group_t_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.group_t_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.group_t_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.group_t_swiginit(self, _ciphey_core_py.new_group_t(*args))

    def push_back(self, x):
        return _ciphey_core_py.group_t_push_back(self, x)

    def front(self):
        return _ciphey_core_py.group_t_front(self)

    def back(self):
        return _ciphey_core_py.group_t_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.group_t_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.group_t_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.group_t_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.group_t_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.group_t_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_group_t

# Register group_t in _ciphey_core_py:
_ciphey_core_py.group_t_swigregister(group_t)

class viginere_key_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.viginere_key_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.viginere_key_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.viginere_key_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.viginere_key_t___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.viginere_key_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.viginere_key_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.viginere_key_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.viginere_key_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.viginere_key_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.viginere_key_t___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.viginere_key_t_pop(self)

    def append(self, x):
        return _ciphey_core_py.viginere_key_t_append(self, x)

    def empty(self):
        return _ciphey_core_py.viginere_key_t_empty(self)

    def size(self):
        return _ciphey_core_py.viginere_key_t_size(self)

    def swap(self, v):
        return _ciphey_core_py.viginere_key_t_swap(self, v)

    def begin(self):
        return _ciphey_core_py.viginere_key_t_begin(self)

    def end(self):
        return _ciphey_core_py.viginere_key_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.viginere_key_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.viginere_key_t_rend(self)

    def clear(self):
        return _ciphey_core_py.viginere_key_t_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.viginere_key_t_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.viginere_key_t_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.viginere_key_t_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.viginere_key_t_swiginit(self, _ciphey_core_py.new_viginere_key_t(*args))

    def push_back(self, x):
        return _ciphey_core_py.viginere_key_t_push_back(self, x)

    def front(self):
        return _ciphey_core_py.viginere_key_t_front(self)

    def back(self):
        return _ciphey_core_py.viginere_key_t_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.viginere_key_t_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.viginere_key_t_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.viginere_key_t_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.viginere_key_t_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.viginere_key_t_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_viginere_key_t

# Register viginere_key_t in _ciphey_core_py:
_ciphey_core_py.viginere_key_t_swigregister(viginere_key_t)

class analysis_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ciphey_core_py.analysis_t_swiginit(self, _ciphey_core_py.new_analysis_t())
    __swig_destroy__ = _ciphey_core_py.delete_analysis_t

# Register analysis_t in _ciphey_core_py:
_ciphey_core_py.analysis_t_swigregister(analysis_t)

class windowed_analysis_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ciphey_core_py.windowed_analysis_t_swiginit(self, _ciphey_core_py.new_windowed_analysis_t())
    __swig_destroy__ = _ciphey_core_py.delete_windowed_analysis_t

# Register windowed_analysis_t in _ciphey_core_py:
_ciphey_core_py.windowed_analysis_t_swigregister(windowed_analysis_t)

class domain_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.domain_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.domain_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.domain_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.domain_t___len__(self)

    def append(self, x):
        return _ciphey_core_py.domain_t_append(self, x)

    def __contains__(self, x):
        return _ciphey_core_py.domain_t___contains__(self, x)

    def __getitem__(self, i):
        return _ciphey_core_py.domain_t___getitem__(self, i)

    def add(self, x):
        return _ciphey_core_py.domain_t_add(self, x)

    def discard(self, x):
        return _ciphey_core_py.domain_t_discard(self, x)

    def __init__(self, *args):
        _ciphey_core_py.domain_t_swiginit(self, _ciphey_core_py.new_domain_t(*args))

    def empty(self):
        return _ciphey_core_py.domain_t_empty(self)

    def size(self):
        return _ciphey_core_py.domain_t_size(self)

    def clear(self):
        return _ciphey_core_py.domain_t_clear(self)

    def swap(self, v):
        return _ciphey_core_py.domain_t_swap(self, v)

    def count(self, x):
        return _ciphey_core_py.domain_t_count(self, x)

    def begin(self):
        return _ciphey_core_py.domain_t_begin(self)

    def end(self):
        return _ciphey_core_py.domain_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.domain_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.domain_t_rend(self)

    def erase(self, *args):
        return _ciphey_core_py.domain_t_erase(self, *args)

    def find(self, x):
        return _ciphey_core_py.domain_t_find(self, x)

    def lower_bound(self, x):
        return _ciphey_core_py.domain_t_lower_bound(self, x)

    def upper_bound(self, x):
        return _ciphey_core_py.domain_t_upper_bound(self, x)

    def equal_range(self, x):
        return _ciphey_core_py.domain_t_equal_range(self, x)

    def insert(self, __x):
        return _ciphey_core_py.domain_t_insert(self, __x)
    __swig_destroy__ = _ciphey_core_py.delete_domain_t

# Register domain_t in _ciphey_core_py:
_ciphey_core_py.domain_t_swigregister(domain_t)

class data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.data_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.data___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.data___bool__(self)

    def __len__(self):
        return _ciphey_core_py.data___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.data___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.data___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.data___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.data___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.data___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.data___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.data_pop(self)

    def append(self, x):
        return _ciphey_core_py.data_append(self, x)

    def empty(self):
        return _ciphey_core_py.data_empty(self)

    def size(self):
        return _ciphey_core_py.data_size(self)

    def swap(self, v):
        return _ciphey_core_py.data_swap(self, v)

    def begin(self):
        return _ciphey_core_py.data_begin(self)

    def end(self):
        return _ciphey_core_py.data_end(self)

    def rbegin(self):
        return _ciphey_core_py.data_rbegin(self)

    def rend(self):
        return _ciphey_core_py.data_rend(self)

    def clear(self):
        return _ciphey_core_py.data_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.data_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.data_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.data_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.data_swiginit(self, _ciphey_core_py.new_data(*args))

    def push_back(self, x):
        return _ciphey_core_py.data_push_back(self, x)

    def front(self):
        return _ciphey_core_py.data_front(self)

    def back(self):
        return _ciphey_core_py.data_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.data_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.data_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.data_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.data_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.data_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_data

# Register data in _ciphey_core_py:
_ciphey_core_py.data_swigregister(data)

class ausearch_nodes_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.ausearch_nodes_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.ausearch_nodes_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.ausearch_nodes_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.ausearch_nodes_t___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.ausearch_nodes_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.ausearch_nodes_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.ausearch_nodes_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.ausearch_nodes_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.ausearch_nodes_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.ausearch_nodes_t___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.ausearch_nodes_t_pop(self)

    def append(self, x):
        return _ciphey_core_py.ausearch_nodes_t_append(self, x)

    def empty(self):
        return _ciphey_core_py.ausearch_nodes_t_empty(self)

    def size(self):
        return _ciphey_core_py.ausearch_nodes_t_size(self)

    def swap(self, v):
        return _ciphey_core_py.ausearch_nodes_t_swap(self, v)

    def begin(self):
        return _ciphey_core_py.ausearch_nodes_t_begin(self)

    def end(self):
        return _ciphey_core_py.ausearch_nodes_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.ausearch_nodes_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.ausearch_nodes_t_rend(self)

    def clear(self):
        return _ciphey_core_py.ausearch_nodes_t_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.ausearch_nodes_t_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.ausearch_nodes_t_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.ausearch_nodes_t_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.ausearch_nodes_t_swiginit(self, _ciphey_core_py.new_ausearch_nodes_t(*args))

    def push_back(self, x):
        return _ciphey_core_py.ausearch_nodes_t_push_back(self, x)

    def front(self):
        return _ciphey_core_py.ausearch_nodes_t_front(self)

    def back(self):
        return _ciphey_core_py.ausearch_nodes_t_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.ausearch_nodes_t_assign(self, n, x)

    def insert(self, *args):
        return _ciphey_core_py.ausearch_nodes_t_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.ausearch_nodes_t_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.ausearch_nodes_t_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_ausearch_nodes_t

# Register ausearch_nodes_t in _ciphey_core_py:
_ciphey_core_py.ausearch_nodes_t_swigregister(ausearch_nodes_t)

class ausearch_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    success_probability = property(_ciphey_core_py.ausearch_node_success_probability_get, _ciphey_core_py.ausearch_node_success_probability_set)
    failure_probability = property(_ciphey_core_py.ausearch_node_failure_probability_get, _ciphey_core_py.ausearch_node_failure_probability_set)
    success_time = property(_ciphey_core_py.ausearch_node_success_time_get, _ciphey_core_py.ausearch_node_success_time_set)
    failure_time = property(_ciphey_core_py.ausearch_node_failure_time_get, _ciphey_core_py.ausearch_node_failure_time_set)

    def __init__(self, success_probability_, success_time_, failure_time_):
        _ciphey_core_py.ausearch_node_swiginit(self, _ciphey_core_py.new_ausearch_node(success_probability_, success_time_, failure_time_))
    __swig_destroy__ = _ciphey_core_py.delete_ausearch_node

# Register ausearch_node in _ciphey_core_py:
_ciphey_core_py.ausearch_node_swigregister(ausearch_node)

class simple_analysis_res(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freqs = property(_ciphey_core_py.simple_analysis_res_freqs_get, _ciphey_core_py.simple_analysis_res_freqs_set)
    len = property(_ciphey_core_py.simple_analysis_res_len_get, _ciphey_core_py.simple_analysis_res_len_set)

    def __init__(self):
        _ciphey_core_py.simple_analysis_res_swiginit(self, _ciphey_core_py.new_simple_analysis_res())
    __swig_destroy__ = _ciphey_core_py.delete_simple_analysis_res

# Register simple_analysis_res in _ciphey_core_py:
_ciphey_core_py.simple_analysis_res_swigregister(simple_analysis_res)

class windowed_analysis_res(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freqs = property(_ciphey_core_py.windowed_analysis_res_freqs_get, _ciphey_core_py.windowed_analysis_res_freqs_set)
    domain = property(_ciphey_core_py.windowed_analysis_res_domain_get, _ciphey_core_py.windowed_analysis_res_domain_set)
    len = property(_ciphey_core_py.windowed_analysis_res_len_get, _ciphey_core_py.windowed_analysis_res_len_set)

    def __init__(self):
        _ciphey_core_py.windowed_analysis_res_swiginit(self, _ciphey_core_py.new_windowed_analysis_res())
    __swig_destroy__ = _ciphey_core_py.delete_windowed_analysis_res

# Register windowed_analysis_res in _ciphey_core_py:
_ciphey_core_py.windowed_analysis_res_swigregister(windowed_analysis_res)


def analyse_string(*args):
    return _ciphey_core_py.analyse_string(*args)

def start_analysis(*args):
    return _ciphey_core_py.start_analysis(*args)

def continue_analysis(*args):
    return _ciphey_core_py.continue_analysis(*args)

def fuzz(_in, len):
    return _ciphey_core_py.fuzz(_in, len)

def chisq_test(_in, expected):
    return _ciphey_core_py.chisq_test(_in, expected)

def info_content(_in):
    return _ciphey_core_py.info_content(_in)

def caesar_crack(*args):
    return _ciphey_core_py.caesar_crack(*args)

def caesar_decrypt(str, key, group):
    return _ciphey_core_py.caesar_decrypt(str, key, group)

def caesar_encrypt(str, key, group):
    return _ciphey_core_py.caesar_encrypt(str, key, group)

def caesar_detect(_in, expected):
    return _ciphey_core_py.caesar_detect(_in, expected)

def vigenere_crack(_in, expected, group, p_value=0.999):
    return _ciphey_core_py.vigenere_crack(_in, expected, group, p_value)

def vigenere_decrypt(str, key, group):
    return _ciphey_core_py.vigenere_decrypt(str, key, group)

def vigenere_encrypt(str, key, group):
    return _ciphey_core_py.vigenere_encrypt(str, key, group)

def vigenere_detect(_in, expected):
    return _ciphey_core_py.vigenere_detect(_in, expected)

def ausearch_minimise(input):
    return _ciphey_core_py.ausearch_minimise(input)

def xor_single_crypt(str, key):
    return _ciphey_core_py.xor_single_crypt(str, key)
class caesar_results_elem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_ciphey_core_py.caesar_results_elem_key_get, _ciphey_core_py.caesar_results_elem_key_set)
    p_value = property(_ciphey_core_py.caesar_results_elem_p_value_get, _ciphey_core_py.caesar_results_elem_p_value_set)

    def __init__(self):
        _ciphey_core_py.caesar_results_elem_swiginit(self, _ciphey_core_py.new_caesar_results_elem())
    __swig_destroy__ = _ciphey_core_py.delete_caesar_results_elem

# Register caesar_results_elem in _ciphey_core_py:
_ciphey_core_py.caesar_results_elem_swigregister(caesar_results_elem)

class vigenere_results_elem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_ciphey_core_py.vigenere_results_elem_key_get, _ciphey_core_py.vigenere_results_elem_key_set)
    p_value = property(_ciphey_core_py.vigenere_results_elem_p_value_get, _ciphey_core_py.vigenere_results_elem_p_value_set)

    def __init__(self):
        _ciphey_core_py.vigenere_results_elem_swiginit(self, _ciphey_core_py.new_vigenere_results_elem())
    __swig_destroy__ = _ciphey_core_py.delete_vigenere_results_elem

# Register vigenere_results_elem in _ciphey_core_py:
_ciphey_core_py.vigenere_results_elem_swigregister(vigenere_results_elem)

class caesar_results(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.caesar_results_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.caesar_results___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.caesar_results___bool__(self)

    def __len__(self):
        return _ciphey_core_py.caesar_results___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.caesar_results___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.caesar_results___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.caesar_results___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.caesar_results___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.caesar_results___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.caesar_results___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.caesar_results_pop(self)

    def append(self, x):
        return _ciphey_core_py.caesar_results_append(self, x)

    def empty(self):
        return _ciphey_core_py.caesar_results_empty(self)

    def size(self):
        return _ciphey_core_py.caesar_results_size(self)

    def swap(self, v):
        return _ciphey_core_py.caesar_results_swap(self, v)

    def begin(self):
        return _ciphey_core_py.caesar_results_begin(self)

    def end(self):
        return _ciphey_core_py.caesar_results_end(self)

    def rbegin(self):
        return _ciphey_core_py.caesar_results_rbegin(self)

    def rend(self):
        return _ciphey_core_py.caesar_results_rend(self)

    def clear(self):
        return _ciphey_core_py.caesar_results_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.caesar_results_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.caesar_results_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.caesar_results_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.caesar_results_swiginit(self, _ciphey_core_py.new_caesar_results(*args))

    def push_back(self, x):
        return _ciphey_core_py.caesar_results_push_back(self, x)

    def front(self):
        return _ciphey_core_py.caesar_results_front(self)

    def back(self):
        return _ciphey_core_py.caesar_results_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.caesar_results_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.caesar_results_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.caesar_results_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.caesar_results_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.caesar_results_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_caesar_results

# Register caesar_results in _ciphey_core_py:
_ciphey_core_py.caesar_results_swigregister(caesar_results)

class vigenere_results(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.vigenere_results_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.vigenere_results___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.vigenere_results___bool__(self)

    def __len__(self):
        return _ciphey_core_py.vigenere_results___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.vigenere_results___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.vigenere_results___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.vigenere_results___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.vigenere_results___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.vigenere_results___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.vigenere_results___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.vigenere_results_pop(self)

    def append(self, x):
        return _ciphey_core_py.vigenere_results_append(self, x)

    def empty(self):
        return _ciphey_core_py.vigenere_results_empty(self)

    def size(self):
        return _ciphey_core_py.vigenere_results_size(self)

    def swap(self, v):
        return _ciphey_core_py.vigenere_results_swap(self, v)

    def begin(self):
        return _ciphey_core_py.vigenere_results_begin(self)

    def end(self):
        return _ciphey_core_py.vigenere_results_end(self)

    def rbegin(self):
        return _ciphey_core_py.vigenere_results_rbegin(self)

    def rend(self):
        return _ciphey_core_py.vigenere_results_rend(self)

    def clear(self):
        return _ciphey_core_py.vigenere_results_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.vigenere_results_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.vigenere_results_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.vigenere_results_erase(self, *args)

    def __init__(self, *args):
        _ciphey_core_py.vigenere_results_swiginit(self, _ciphey_core_py.new_vigenere_results(*args))

    def push_back(self, x):
        return _ciphey_core_py.vigenere_results_push_back(self, x)

    def front(self):
        return _ciphey_core_py.vigenere_results_front(self)

    def back(self):
        return _ciphey_core_py.vigenere_results_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.vigenere_results_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.vigenere_results_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.vigenere_results_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.vigenere_results_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.vigenere_results_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_vigenere_results

# Register vigenere_results in _ciphey_core_py:
_ciphey_core_py.vigenere_results_swigregister(vigenere_results)



