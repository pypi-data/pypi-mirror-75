# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libprio', [dirname(__file__)])
        except ImportError:
            import _libprio
            return _libprio
        if fp is not None:
            try:
                _mod = imp.load_module('_libprio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libprio = swig_import_helper()
    del swig_import_helper
else:
    import _libprio
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BBIT_PREC_MAX = _libprio.BBIT_PREC_MAX

def PublicKey_export(*args):
  """
    PublicKey_export(const_PublicKey key) -> PyObject *

    Parameters:
        key: const_PublicKey

    """
  return _libprio.PublicKey_export(*args)

def PublicKey_export_hex(*args):
  """
    PublicKey_export_hex(const_PublicKey key) -> PyObject *

    Parameters:
        key: const_PublicKey

    """
  return _libprio.PublicKey_export_hex(*args)

def PrivateKey_export(*args):
  """
    PrivateKey_export(PrivateKey key) -> PyObject *

    Parameters:
        key: PrivateKey

    """
  return _libprio.PrivateKey_export(*args)

def PrivateKey_export_hex(*args):
  """
    PrivateKey_export_hex(PrivateKey key) -> PyObject *

    Parameters:
        key: PrivateKey

    """
  return _libprio.PrivateKey_export_hex(*args)

def PrioTotalShare_final_uint(*args):
  """
    PrioTotalShare_final_uint(const_PrioConfig cfg, int const prec, const_PrioTotalShare tA, const_PrioTotalShare tB) -> SECStatus

    Parameters:
        cfg: const_PrioConfig
        prec: int const
        tA: const_PrioTotalShare
        tB: const_PrioTotalShare

    """
  return _libprio.PrioTotalShare_final_uint(*args)

def PrioPacketVerify1_write(*args):
  """
    PrioPacketVerify1_write(const_PrioPacketVerify1 p) -> PyObject *

    Parameters:
        p: const_PrioPacketVerify1

    """
  return _libprio.PrioPacketVerify1_write(*args)

def PrioPacketVerify2_write(*args):
  """
    PrioPacketVerify2_write(const_PrioPacketVerify2 p) -> PyObject *

    Parameters:
        p: const_PrioPacketVerify2

    """
  return _libprio.PrioPacketVerify2_write(*args)

def PrioTotalShare_write(*args):
  """
    PrioTotalShare_write(const_PrioTotalShare p) -> PyObject *

    Parameters:
        p: const_PrioTotalShare

    """
  return _libprio.PrioTotalShare_write(*args)

def PrioPacketVerify1_read(*args):
  """
    PrioPacketVerify1_read(PrioPacketVerify1 p, unsigned char const * data, const_PrioConfig cfg) -> SECStatus

    Parameters:
        p: PrioPacketVerify1
        data: unsigned char const *
        cfg: const_PrioConfig

    """
  return _libprio.PrioPacketVerify1_read(*args)

def PrioPacketVerify2_read(*args):
  """
    PrioPacketVerify2_read(PrioPacketVerify2 p, unsigned char const * data, const_PrioConfig cfg) -> SECStatus

    Parameters:
        p: PrioPacketVerify2
        data: unsigned char const *
        cfg: const_PrioConfig

    """
  return _libprio.PrioPacketVerify2_read(*args)

def PrioTotalShare_read(*args):
  """
    PrioTotalShare_read(PrioTotalShare p, unsigned char const * data, const_PrioConfig cfg) -> SECStatus

    Parameters:
        p: PrioTotalShare
        data: unsigned char const *
        cfg: const_PrioConfig

    """
  return _libprio.PrioTotalShare_read(*args)
CURVE25519_KEY_LEN = _libprio.CURVE25519_KEY_LEN
CURVE25519_KEY_LEN_HEX = _libprio.CURVE25519_KEY_LEN_HEX
PRIO_SERVER_A = _libprio.PRIO_SERVER_A
PRIO_SERVER_B = _libprio.PRIO_SERVER_B

def Prio_init():
  """Prio_init() -> SECStatus"""
  return _libprio.Prio_init()

def Prio_clear():
  """Prio_clear()"""
  return _libprio.Prio_clear()

def PrioConfig_new(*args):
  """
    PrioConfig_new(int nFields, PublicKey serverA, PublicKey serverB, unsigned char const * batchId) -> PrioConfig

    Parameters:
        nFields: int
        serverA: PublicKey
        serverB: PublicKey
        batchId: unsigned char const *

    """
  return _libprio.PrioConfig_new(*args)

def PrioConfig_new_uint(*args):
  """
    PrioConfig_new_uint(int nUInts, int prec, PublicKey serverA, PublicKey serverB, unsigned char const * batchId) -> PrioConfig

    Parameters:
        nUInts: int
        prec: int
        serverA: PublicKey
        serverB: PublicKey
        batchId: unsigned char const *

    """
  return _libprio.PrioConfig_new_uint(*args)

def PrioConfig_numDataFields(*args):
  """
    PrioConfig_numDataFields(const_PrioConfig cfg) -> int

    Parameters:
        cfg: const_PrioConfig

    """
  return _libprio.PrioConfig_numDataFields(*args)

def PrioConfig_numUIntEntries(*args):
  """
    PrioConfig_numUIntEntries(const_PrioConfig cfg, int prec) -> int

    Parameters:
        cfg: const_PrioConfig
        prec: int

    """
  return _libprio.PrioConfig_numUIntEntries(*args)

def PrioConfig_maxDataFields():
  """PrioConfig_maxDataFields() -> int"""
  return _libprio.PrioConfig_maxDataFields()

def PrioConfig_maxUIntEntries(*args):
  """
    PrioConfig_maxUIntEntries(int prec) -> int

    Parameters:
        prec: int

    """
  return _libprio.PrioConfig_maxUIntEntries(*args)

def PrioConfig_newTest(*args):
  """
    PrioConfig_newTest(int nFields) -> PrioConfig

    Parameters:
        nFields: int

    """
  return _libprio.PrioConfig_newTest(*args)

def Keypair_new():
  """Keypair_new() -> SECStatus"""
  return _libprio.Keypair_new()

def PublicKey_import(*args):
  """
    PublicKey_import(unsigned char const * data) -> SECStatus

    Parameters:
        data: unsigned char const *

    """
  return _libprio.PublicKey_import(*args)

def PrivateKey_import(*args):
  """
    PrivateKey_import(unsigned char const * privData, unsigned char const * pubData) -> SECStatus

    Parameters:
        privData: unsigned char const *
        pubData: unsigned char const *

    """
  return _libprio.PrivateKey_import(*args)

def PublicKey_import_hex(*args):
  """
    PublicKey_import_hex(unsigned char const * hexData) -> SECStatus

    Parameters:
        hexData: unsigned char const *

    """
  return _libprio.PublicKey_import_hex(*args)

def PrivateKey_import_hex(*args):
  """
    PrivateKey_import_hex(unsigned char const * privHexData, unsigned char const * pubHexData) -> SECStatus

    Parameters:
        privHexData: unsigned char const *
        pubHexData: unsigned char const *

    """
  return _libprio.PrivateKey_import_hex(*args)

def PrioClient_encode(*args):
  """
    PrioClient_encode(const_PrioConfig cfg, bool const * data_in) -> SECStatus

    Parameters:
        cfg: const_PrioConfig
        data_in: bool const *

    """
  return _libprio.PrioClient_encode(*args)

def PrioClient_encode_uint(*args):
  """
    PrioClient_encode_uint(const_PrioConfig cfg, int const prec, long const * data_uint) -> SECStatus

    Parameters:
        cfg: const_PrioConfig
        prec: int const
        data_uint: long const *

    """
  return _libprio.PrioClient_encode_uint(*args)

def PrioPRGSeed_randomize():
  """PrioPRGSeed_randomize() -> SECStatus"""
  return _libprio.PrioPRGSeed_randomize()

def PrioServer_new(*args):
  """
    PrioServer_new(const_PrioConfig cfg, PrioServerId serverIdx, PrivateKey serverPriv, PrioPRGSeed const serverSharedSecret) -> PrioServer

    Parameters:
        cfg: const_PrioConfig
        serverIdx: enum PrioServerId
        serverPriv: PrivateKey
        serverSharedSecret: unsigned char const [AES_128_KEY_LENGTH]

    """
  return _libprio.PrioServer_new(*args)

def PrioVerifier_new(*args):
  """
    PrioVerifier_new(PrioServer s) -> PrioVerifier

    Parameters:
        s: PrioServer

    """
  return _libprio.PrioVerifier_new(*args)

def PrioVerifier_set_data(*args):
  """
    PrioVerifier_set_data(PrioVerifier v, unsigned char * data) -> SECStatus

    Parameters:
        v: PrioVerifier
        data: unsigned char *

    """
  return _libprio.PrioVerifier_set_data(*args)

def PrioPacketVerify1_new():
  """PrioPacketVerify1_new() -> PrioPacketVerify1"""
  return _libprio.PrioPacketVerify1_new()

def PrioPacketVerify1_set_data(*args):
  """
    PrioPacketVerify1_set_data(PrioPacketVerify1 p1, const_PrioVerifier v) -> SECStatus

    Parameters:
        p1: PrioPacketVerify1
        v: const_PrioVerifier

    """
  return _libprio.PrioPacketVerify1_set_data(*args)

def PrioPacketVerify2_new():
  """PrioPacketVerify2_new() -> PrioPacketVerify2"""
  return _libprio.PrioPacketVerify2_new()

def PrioPacketVerify2_set_data(*args):
  """
    PrioPacketVerify2_set_data(PrioPacketVerify2 p2, const_PrioVerifier v, const_PrioPacketVerify1 p1A, const_PrioPacketVerify1 p1B) -> SECStatus

    Parameters:
        p2: PrioPacketVerify2
        v: const_PrioVerifier
        p1A: const_PrioPacketVerify1
        p1B: const_PrioPacketVerify1

    """
  return _libprio.PrioPacketVerify2_set_data(*args)

def PrioVerifier_isValid(*args):
  """
    PrioVerifier_isValid(const_PrioVerifier v, const_PrioPacketVerify2 pA, const_PrioPacketVerify2 pB) -> SECStatus

    Parameters:
        v: const_PrioVerifier
        pA: const_PrioPacketVerify2
        pB: const_PrioPacketVerify2

    """
  return _libprio.PrioVerifier_isValid(*args)

def PrioServer_aggregate(*args):
  """
    PrioServer_aggregate(PrioServer s, PrioVerifier v) -> SECStatus

    Parameters:
        s: PrioServer
        v: PrioVerifier

    """
  return _libprio.PrioServer_aggregate(*args)

def PrioTotalShare_new():
  """PrioTotalShare_new() -> PrioTotalShare"""
  return _libprio.PrioTotalShare_new()

def PrioTotalShare_set_data(*args):
  """
    PrioTotalShare_set_data(PrioTotalShare t, const_PrioServer s) -> SECStatus

    Parameters:
        t: PrioTotalShare
        s: const_PrioServer

    """
  return _libprio.PrioTotalShare_set_data(*args)

def PrioTotalShare_set_data_uint(*args):
  """
    PrioTotalShare_set_data_uint(PrioTotalShare t, const_PrioServer s, int const prec) -> SECStatus

    Parameters:
        t: PrioTotalShare
        s: const_PrioServer
        prec: int const

    """
  return _libprio.PrioTotalShare_set_data_uint(*args)

def PrioTotalShare_final(*args):
  """
    PrioTotalShare_final(const_PrioConfig cfg, const_PrioTotalShare tA, const_PrioTotalShare tB) -> SECStatus

    Parameters:
        cfg: const_PrioConfig
        tA: const_PrioTotalShare
        tB: const_PrioTotalShare

    """
  return _libprio.PrioTotalShare_final(*args)
# This file is compatible with both classic and new-style classes.


